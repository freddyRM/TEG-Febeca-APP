(function(modules) {
var installedModules = {};
function __webpack_require__(moduleId) {
if (installedModules[moduleId]) return installedModules[moduleId].exports;
var module = installedModules[moduleId] = {
exports: {},
id: moduleId,
loaded: false
};
modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
module.loaded = true;
return module.exports;
}
__webpack_require__.m = modules;
__webpack_require__.c = installedModules;
__webpack_require__.p = "";
return __webpack_require__(0);
})([ function(module, exports, __webpack_require__) {
__webpack_require__(1);
__webpack_require__(2);
module.exports = __webpack_require__(150);
}, function(module, exports) {
var global = Function("return this")();
global.global = global;
}, function(module, exports, __webpack_require__) {
__webpack_require__(3);
}, function(module, exports, __webpack_require__) {
var appModule = __webpack_require__(4);
var observable = __webpack_require__(18);
var enums;
global.moduleMerge(appModule, exports);
var typedExports = exports;
function initLifecycleCallbacks() {
var lifecycleCallbacks = new android.app.Application.ActivityLifecycleCallbacks({
onActivityCreated: function(activity, bundle) {
var activityInfo = activity.getPackageManager().getActivityInfo(activity.getComponentName(), android.content.pm.PackageManager.GET_META_DATA);
if (activityInfo.metaData) {
var setThemeOnLaunch = activityInfo.metaData.getInt("SET_THEME_ON_LAUNCH", -1);
if (setThemeOnLaunch !== -1) {
activity.setTheme(setThemeOnLaunch);
}
}
if (!androidApp.startActivity) {
androidApp.startActivity = activity;
}
androidApp.notify({
eventName: "activityCreated",
object: androidApp,
activity: activity,
bundle: bundle
});
if (androidApp.onActivityCreated) {
androidApp.onActivityCreated(activity, bundle);
}
},
onActivityDestroyed: function(activity) {
if (activity === androidApp.foregroundActivity) {
androidApp.foregroundActivity = undefined;
}
if (activity === androidApp.startActivity) {
androidApp.startActivity = undefined;
}
androidApp.notify({
eventName: "activityDestroyed",
object: androidApp,
activity: activity
});
if (androidApp.onActivityDestroyed) {
androidApp.onActivityDestroyed(activity);
}
gc();
},
onActivityPaused: function(activity) {
if (activity.isNativeScriptActivity) {
androidApp.paused = true;
if (typedExports.onSuspend) {
typedExports.onSuspend();
}
typedExports.notify({
eventName: typedExports.suspendEvent,
object: androidApp,
android: activity
});
}
androidApp.notify({
eventName: "activityPaused",
object: androidApp,
activity: activity
});
if (androidApp.onActivityPaused) {
androidApp.onActivityPaused(activity);
}
},
onActivityResumed: function(activity) {
androidApp.foregroundActivity = activity;
if (activity.isNativeScriptActivity) {
if (typedExports.onResume) {
typedExports.onResume();
}
typedExports.notify({
eventName: typedExports.resumeEvent,
object: androidApp,
android: activity
});
androidApp.paused = false;
}
androidApp.notify({
eventName: "activityResumed",
object: androidApp,
activity: activity
});
if (androidApp.onActivityResumed) {
androidApp.onActivityResumed(activity);
}
},
onActivitySaveInstanceState: function(activity, bundle) {
androidApp.notify({
eventName: "saveActivityState",
object: androidApp,
activity: activity,
bundle: bundle
});
if (androidApp.onSaveActivityState) {
androidApp.onSaveActivityState(activity, bundle);
}
},
onActivityStarted: function(activity) {
androidApp.notify({
eventName: "activityStarted",
object: androidApp,
activity: activity
});
if (androidApp.onActivityStarted) {
androidApp.onActivityStarted(activity);
}
},
onActivityStopped: function(activity) {
androidApp.notify({
eventName: "activityStopped",
object: androidApp,
activity: activity
});
if (androidApp.onActivityStopped) {
androidApp.onActivityStopped(activity);
}
}
});
return lifecycleCallbacks;
}
var currentOrientation;
function initComponentCallbacks() {
var componentCallbacks = new android.content.ComponentCallbacks2({
onLowMemory: function() {
gc();
java.lang.System.gc();
typedExports.notify({
eventName: typedExports.lowMemoryEvent,
object: this,
android: this
});
},
onTrimMemory: function(level) {},
onConfigurationChanged: function(newConfig) {
var newOrientation = newConfig.orientation;
if (newOrientation === currentOrientation) {
return;
}
if (!enums) {
enums = __webpack_require__(24);
}
currentOrientation = newOrientation;
var newValue;
switch (newOrientation) {
case android.content.res.Configuration.ORIENTATION_LANDSCAPE:
newValue = enums.DeviceOrientation.landscape;
break;

case android.content.res.Configuration.ORIENTATION_PORTRAIT:
newValue = enums.DeviceOrientation.portrait;
break;

default:
newValue = enums.DeviceOrientation.unknown;
break;
}
appModule._onOrientationChanged();
typedExports.notify({
eventName: typedExports.orientationChangedEvent,
android: androidApp.nativeApp,
newValue: newValue,
object: typedExports.android
});
}
});
return componentCallbacks;
}
var AndroidApplication = function(_super) {
__extends(AndroidApplication, _super);
function AndroidApplication() {
_super.apply(this, arguments);
this._registeredReceivers = {};
this._pendingReceiverRegistrations = new Array();
}
Object.defineProperty(AndroidApplication.prototype, "currentContext", {
get: function() {
return this.foregroundActivity;
},
enumerable: true,
configurable: true
});
AndroidApplication.prototype.init = function(nativeApp) {
if (this.nativeApp) {
throw new Error("application.android already initialized.");
}
this.nativeApp = nativeApp;
this.packageName = nativeApp.getPackageName();
this.context = nativeApp.getApplicationContext();
var lifecycleCallbacks = initLifecycleCallbacks();
var componentCallbacks = initComponentCallbacks();
this.nativeApp.registerActivityLifecycleCallbacks(lifecycleCallbacks);
this.nativeApp.registerComponentCallbacks(componentCallbacks);
this._registerPendingReceivers();
};
AndroidApplication.prototype._registerPendingReceivers = function() {
if (this._pendingReceiverRegistrations) {
var i = 0;
var length = this._pendingReceiverRegistrations.length;
for (;i < length; i++) {
var registerFunc = this._pendingReceiverRegistrations[i];
registerFunc(this.context);
}
this._pendingReceiverRegistrations = new Array();
}
};
AndroidApplication.prototype.registerBroadcastReceiver = function(intentFilter, onReceiveCallback) {
ensureBroadCastReceiverClass();
var that = this;
var registerFunc = function(context) {
var receiver = new BroadcastReceiverClass(onReceiveCallback);
context.registerReceiver(receiver, new android.content.IntentFilter(intentFilter));
that._registeredReceivers[intentFilter] = receiver;
};
if (this.context) {
registerFunc(this.context);
} else {
this._pendingReceiverRegistrations.push(registerFunc);
}
};
AndroidApplication.prototype.unregisterBroadcastReceiver = function(intentFilter) {
var receiver = this._registeredReceivers[intentFilter];
if (receiver) {
this.context.unregisterReceiver(receiver);
this._registeredReceivers[intentFilter] = undefined;
delete this._registeredReceivers[intentFilter];
}
};
AndroidApplication.activityCreatedEvent = "activityCreated";
AndroidApplication.activityDestroyedEvent = "activityDestroyed";
AndroidApplication.activityStartedEvent = "activityStarted";
AndroidApplication.activityPausedEvent = "activityPaused";
AndroidApplication.activityResumedEvent = "activityResumed";
AndroidApplication.activityStoppedEvent = "activityStopped";
AndroidApplication.saveActivityStateEvent = "saveActivityState";
AndroidApplication.activityResultEvent = "activityResult";
AndroidApplication.activityBackPressedEvent = "activityBackPressed";
AndroidApplication.activityRequestPermissionsEvent = "activityRequestPermissions";
return AndroidApplication;
}(observable.Observable);
exports.AndroidApplication = AndroidApplication;
var androidApp = new AndroidApplication();
typedExports.android = androidApp;
var BroadcastReceiverClass;
function ensureBroadCastReceiverClass() {
if (BroadcastReceiverClass) {
return;
}
var BroadcastReceiver = function(_super) {
__extends(BroadcastReceiver, _super);
function BroadcastReceiver(onReceiveCallback) {
_super.call(this);
this._onReceiveCallback = onReceiveCallback;
return global.__native(this);
}
BroadcastReceiver.prototype.onReceive = function(context, intent) {
if (this._onReceiveCallback) {
this._onReceiveCallback(context, intent);
}
};
return BroadcastReceiver;
}(android.content.BroadcastReceiver);
BroadcastReceiverClass = BroadcastReceiver;
}
var started = false;
function start(entry) {
if (started) {
throw new Error("Application is already started.");
}
if (!androidApp.nativeApp) {
var utils = __webpack_require__(27);
var nativeApp = utils.ad.getApplication();
androidApp.init(nativeApp);
}
started = true;
if (entry) {
typedExports.mainEntry = entry;
}
loadCss();
}
exports.start = start;
function loadCss() {
typedExports.appSelectors = typedExports.loadCss(typedExports.cssFile) || [];
if (typedExports.appSelectors.length > 0) {
typedExports.mergeCssSelectors(typedExports);
}
}
function addCss(cssText) {
var parsed = typedExports.parseCss(cssText);
if (parsed) {
typedExports.additionalSelectors.push.apply(typedExports.additionalSelectors, parsed);
typedExports.mergeCssSelectors(typedExports);
}
}
exports.addCss = addCss;
global.__onLiveSync = function() {
if (typedExports.android && typedExports.android.paused) {
return;
}
appModule.__onLiveSync();
loadCss();
};
global.__onUncaughtError = function(error) {
var types = __webpack_require__(14);
if (types.isFunction(typedExports.onUncaughtError)) {
typedExports.onUncaughtError(error);
}
typedExports.notify({
eventName: typedExports.uncaughtErrorEvent,
object: appModule.android,
android: error
});
};
}, function(module, exports, __webpack_require__) {
__webpack_require__(5);
var observable = __webpack_require__(18);
var frame = __webpack_require__(10);
__webpack_require__(106);
var builder;
function ensureBuilder() {
if (!builder) {
builder = __webpack_require__(82);
}
}
var platform;
function ensurePlatform() {
if (!platform) {
platform = __webpack_require__(35);
}
}
var fileNameResolver;
function ensureFileNameResolver() {
if (!fileNameResolver) {
fileNameResolver = __webpack_require__(81);
}
}
var styleScope = undefined;
var events = new observable.Observable();
global.moduleMerge(events, exports);
exports.launchEvent = "launch";
exports.suspendEvent = "suspend";
exports.resumeEvent = "resume";
exports.exitEvent = "exit";
exports.lowMemoryEvent = "lowMemory";
exports.uncaughtErrorEvent = "uncaughtError";
exports.orientationChangedEvent = "orientationChanged";
exports.cssFile = "app.css";
function setCssFileName(cssFileName) {
exports.cssFile = cssFileName;
}
exports.setCssFileName = setCssFileName;
exports.appSelectors = [];
exports.additionalSelectors = [];
exports.cssSelectors = [];
exports.cssSelectorVersion = 0;
exports.keyframes = {};
exports.resources = {};
function setResources(res) {
exports.resources = res;
}
exports.setResources = setResources;
exports.onUncaughtError = undefined;
exports.onLaunch = undefined;
exports.onSuspend = undefined;
exports.onResume = undefined;
exports.onExit = undefined;
exports.onLowMemory = undefined;
exports.android = undefined;
exports.ios = undefined;
function loadCss(cssFile) {
if (!cssFile) {
return undefined;
}
var result;
var fs = __webpack_require__(32);
if (!styleScope) {
styleScope = __webpack_require__(60);
}
var cssFileName = fs.path.join(fs.knownFolders.currentApp().path, cssFile);
if (fs.File.exists(cssFileName)) {
var file = fs.File.fromPath(cssFileName);
var applicationCss = file.readTextSync();
if (applicationCss) {
result = parseCss(applicationCss, cssFileName);
}
}
return result;
}
exports.loadCss = loadCss;
function mergeCssSelectors(module) {
module.cssSelectors = module.appSelectors.slice();
module.cssSelectors.push.apply(module.cssSelectors, module.additionalSelectors);
module.cssSelectorVersion++;
}
exports.mergeCssSelectors = mergeCssSelectors;
function parseCss(cssText, cssFileName) {
if (!styleScope) {
styleScope = __webpack_require__(60);
}
return styleScope.StyleScope.createSelectorsFromCss(cssText, cssFileName, exports.keyframes);
}
exports.parseCss = parseCss;
function __onLiveSync() {
if (global.errorPage) {
global.errorPage.closeModal();
global.errorPage = undefined;
}
try {
ensureFileNameResolver();
fileNameResolver.clearCache();
loadCss();
global.__onLiveSyncCore();
} catch (ex) {
ensureBuilder();
global.errorPage = builder.parse('<Page><ScrollView><Label text="' + ex + '" textWrap="true" style="color: red;" /></ScrollView></Page>');
global.errorPage.showModal();
}
}
exports.__onLiveSync = __onLiveSync;
function __onLiveSyncCore() {
frame.reloadPage();
}
exports.__onLiveSyncCore = __onLiveSyncCore;
global.__onLiveSyncCore = __onLiveSyncCore;
function _onOrientationChanged() {
ensurePlatform();
platform.screen.mainScreen._invalidate();
ensureFileNameResolver();
fileNameResolver._invalidateResolverInstance();
}
exports._onOrientationChanged = _onOrientationChanged;
}, function(module, exports, __webpack_require__) {
__webpack_require__(6);
global.__extends = global.__extends || function(d, b) {
for (var p in b) {
if (b.hasOwnProperty(p)) {
d[p] = b[p];
}
}
function __() {
this.constructor = d;
}
d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
global.moduleMerge = function(sourceExports, destExports) {
for (var key in sourceExports) {
destExports[key] = sourceExports[key];
}
};
var modules = new Map();
global.registerModule = function(name, loader) {
modules.set(name, loader);
};
global.moduleExists = function(name) {
return modules.has(name);
};
global.loadModule = function(name) {
var loader = modules.get(name);
if (loader) {
return loader();
} else {
var result_1 = global.require(name);
modules.set(name, function() {
return result_1;
});
return result_1;
}
};
global.zonedCallback = function(callback) {
if (global.zone) {
return global.zone.bind(callback);
}
if (global.Zone) {
return global.Zone.current.wrap(callback);
} else {
return callback;
}
};
global.registerModule("timer", function() {
return __webpack_require__(7);
});
global.registerModule("ui/dialogs", function() {
return __webpack_require__(8);
});
global.registerModule("xhr", function() {
return __webpack_require__(103);
});
global.registerModule("fetch", function() {
return __webpack_require__(104);
});
var __tnsGlobalMergedModules = new Map();
function registerOnGlobalContext(name, module) {
Object.defineProperty(global, name, {
get: function() {
var m = global.loadModule(module);
if (!__tnsGlobalMergedModules.has(module)) {
__tnsGlobalMergedModules.set(module, true);
global.moduleMerge(m, global);
}
var resolvedValue = m[name];
Object.defineProperty(this, name, {
value: resolvedValue,
configurable: true,
writable: true
});
return resolvedValue;
},
configurable: true
});
}
if (true) {
var timer = __webpack_require__(7);
global.setTimeout = timer.setTimeout;
global.clearTimeout = timer.clearTimeout;
global.setInterval = timer.setInterval;
global.clearInterval = timer.clearInterval;
var dialogs = __webpack_require__(8);
global.alert = dialogs.alert;
global.confirm = dialogs.confirm;
global.prompt = dialogs.prompt;
var xhr = __webpack_require__(103);
global.XMLHttpRequest = xhr.XMLHttpRequest;
global.FormData = xhr.FormData;
var fetch = __webpack_require__(104);
global.fetch = fetch.fetch;
global.Headers = fetch.Headers;
global.Request = fetch.Request;
global.Response = fetch.Response;
} else {
registerOnGlobalContext("setTimeout", "timer");
registerOnGlobalContext("clearTimeout", "timer");
registerOnGlobalContext("setInterval", "timer");
registerOnGlobalContext("clearInterval", "timer");
registerOnGlobalContext("alert", "ui/dialogs");
registerOnGlobalContext("confirm", "ui/dialogs");
registerOnGlobalContext("prompt", "ui/dialogs");
registerOnGlobalContext("XMLHttpRequest", "xhr");
registerOnGlobalContext("FormData", "xhr");
registerOnGlobalContext("fetch", "fetch");
}
var platform = __webpack_require__(35);
var consoleModule = __webpack_require__(105);
var c = new consoleModule.Console();
if (platform.device.os === platform.platformNames.android) {
global.console = c;
} else if (platform.device.os === platform.platformNames.ios) {
global.console.dump = function(args) {
c.dump(args);
};
}
function Deprecated(target, key, descriptor) {
if (descriptor) {
var originalMethod = descriptor.value;
descriptor.value = function() {
var args = [];
for (var _i = 0; _i < arguments.length; _i++) {
args[_i - 0] = arguments[_i];
}
console.log(key + " is deprecated");
return originalMethod.apply(this, args);
};
return descriptor;
} else {
console.log((target && target.name || target) + " is deprecated");
return target;
}
}
exports.Deprecated = Deprecated;
global.Deprecated = Deprecated;
function Experimental(target, key, descriptor) {
if (descriptor) {
var originalMethod = descriptor.value;
descriptor.value = function() {
var args = [];
for (var _i = 0; _i < arguments.length; _i++) {
args[_i - 0] = arguments[_i];
}
console.log(key + " is experimental");
return originalMethod.apply(this, args);
};
return descriptor;
} else {
console.log((target && target.name || target) + " is experimental");
return target;
}
}
exports.Experimental = Experimental;
global.Experimental = Experimental;
}, function(module, exports) {
if (typeof global.__decorate !== "function") {
global.__decorate = function(decorators, target, key, desc) {
var c = arguments.length;
var r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
if (typeof global.Reflect === "object" && typeof global.Reflect.decorate === "function") {
r = global.Reflect.decorate(decorators, target, key, desc);
} else {
for (var i = decorators.length - 1; i >= 0; i--) {
if (d = decorators[i]) {
r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
}
}
}
return c > 3 && r && Object.defineProperty(target, key, r), r;
};
}
if (typeof global.__metadata !== "function") {
global.__metadata = function(k, v) {
if (typeof global.Reflect === "object" && typeof global.Reflect.metadata === "function") {
return global.Reflect.metadata(k, v);
}
};
}
if (typeof global.__param !== "function") {
global.__param = global && global.__param || function(paramIndex, decorator) {
return function(target, key) {
decorator(target, key, paramIndex);
};
};
}
}, function(module, exports) {
var timeoutHandler;
var timeoutCallbacks = {};
var timerId = 0;
function createHandlerAndGetId() {
if (!timeoutHandler) {
timeoutHandler = new android.os.Handler(android.os.Looper.myLooper());
}
timerId++;
return timerId;
}
function setTimeout(callback, milliseconds) {
if (milliseconds === void 0) {
milliseconds = 0;
}
var id = createHandlerAndGetId();
var zoneBound = zonedCallback(callback);
var runnable = new java.lang.Runnable({
run: function() {
zoneBound();
if (timeoutCallbacks[id]) {
delete timeoutCallbacks[id];
}
}
});
if (!timeoutCallbacks[id]) {
timeoutCallbacks[id] = runnable;
}
timeoutHandler.postDelayed(runnable, long(milliseconds));
return id;
}
exports.setTimeout = setTimeout;
function clearTimeout(id) {
if (timeoutCallbacks[id]) {
timeoutHandler.removeCallbacks(timeoutCallbacks[id]);
delete timeoutCallbacks[id];
}
}
exports.clearTimeout = clearTimeout;
function setInterval(callback, milliseconds) {
if (milliseconds === void 0) {
milliseconds = 0;
}
var id = createHandlerAndGetId();
var handler = timeoutHandler;
var zoneBound = zonedCallback(callback);
var runnable = new java.lang.Runnable({
run: function() {
zoneBound();
if (timeoutCallbacks[id]) {
handler.postDelayed(runnable, long(milliseconds));
}
}
});
if (!timeoutCallbacks[id]) {
timeoutCallbacks[id] = runnable;
}
timeoutHandler.postDelayed(runnable, long(milliseconds));
return id;
}
exports.setInterval = setInterval;
exports.clearInterval = clearTimeout;
}, function(module, exports, __webpack_require__) {
var dialogsCommon = __webpack_require__(9);
var appmodule = __webpack_require__(3);
var types = __webpack_require__(14);
global.moduleMerge(dialogsCommon, exports);
function createAlertDialog(options) {
var alert = new android.app.AlertDialog.Builder(appmodule.android.foregroundActivity);
alert.setTitle(options && types.isString(options.title) ? options.title : "");
alert.setMessage(options && types.isString(options.message) ? options.message : "");
if (options && options.cancelable === false) {
alert.setCancelable(false);
}
return alert;
}
function showDialog(builder) {
var dlg = builder.show();
var labelColor = dialogsCommon.getLabelColor();
if (labelColor) {
var textViewId = dlg.getContext().getResources().getIdentifier("android:id/alertTitle", null, null);
if (textViewId) {
var tv = dlg.findViewById(textViewId);
if (tv) {
tv.setTextColor(labelColor.android);
}
}
var messageTextViewId = dlg.getContext().getResources().getIdentifier("android:id/message", null, null);
if (messageTextViewId) {
var messageTextView = dlg.findViewById(messageTextViewId);
if (messageTextView) {
messageTextView.setTextColor(labelColor.android);
}
}
}
var buttonColor = dialogsCommon.getButtonColor();
var buttonBackgroundColor = dialogsCommon.getButtonBackgroundColor();
if (buttonColor || buttonBackgroundColor) {
var buttons = [];
for (var i = 0; i < 3; i++) {
var id = dlg.getContext().getResources().getIdentifier("android:id/button" + i, null, null);
buttons[i] = dlg.findViewById(id);
}
buttons.forEach(function(button) {
if (button) {
if (buttonColor) {
button.setTextColor(buttonColor.android);
}
if (buttonBackgroundColor) {
button.setBackgroundColor(buttonBackgroundColor.android);
}
}
});
}
}
function addButtonsToAlertDialog(alert, options, callback) {
if (!options) {
return;
}
if (options.okButtonText) {
alert.setPositiveButton(options.okButtonText, new android.content.DialogInterface.OnClickListener({
onClick: function(dialog, id) {
dialog.cancel();
callback(true);
}
}));
}
if (options.cancelButtonText) {
alert.setNegativeButton(options.cancelButtonText, new android.content.DialogInterface.OnClickListener({
onClick: function(dialog, id) {
dialog.cancel();
callback(false);
}
}));
}
if (options.neutralButtonText) {
alert.setNeutralButton(options.neutralButtonText, new android.content.DialogInterface.OnClickListener({
onClick: function(dialog, id) {
dialog.cancel();
callback(undefined);
}
}));
}
alert.setOnDismissListener(new android.content.DialogInterface.OnDismissListener({
onDismiss: function() {
callback(false);
}
}));
}
function alert(arg) {
return new Promise(function(resolve, reject) {
try {
var options = !dialogsCommon.isDialogOptions(arg) ? {
title: dialogsCommon.ALERT,
okButtonText: dialogsCommon.OK,
message: arg + ""
} : arg;
var alert_1 = createAlertDialog(options);
alert_1.setPositiveButton(options.okButtonText, new android.content.DialogInterface.OnClickListener({
onClick: function(dialog, id) {
dialog.cancel();
resolve();
}
}));
alert_1.setOnDismissListener(new android.content.DialogInterface.OnDismissListener({
onDismiss: function() {
resolve();
}
}));
showDialog(alert_1);
} catch (ex) {
reject(ex);
}
});
}
exports.alert = alert;
function confirm(arg) {
return new Promise(function(resolve, reject) {
try {
var options = !dialogsCommon.isDialogOptions(arg) ? {
title: dialogsCommon.CONFIRM,
okButtonText: dialogsCommon.OK,
cancelButtonText: dialogsCommon.CANCEL,
message: arg + ""
} : arg;
var alert_2 = createAlertDialog(options);
addButtonsToAlertDialog(alert_2, options, function(result) {
resolve(result);
});
showDialog(alert_2);
} catch (ex) {
reject(ex);
}
});
}
exports.confirm = confirm;
function prompt(arg) {
var options;
var defaultOptions = {
title: dialogsCommon.PROMPT,
okButtonText: dialogsCommon.OK,
cancelButtonText: dialogsCommon.CANCEL,
inputType: dialogsCommon.inputType.text
};
if (arguments.length === 1) {
if (types.isString(arg)) {
options = defaultOptions;
options.message = arg;
} else {
options = arg;
}
} else if (arguments.length === 2) {
if (types.isString(arguments[0]) && types.isString(arguments[1])) {
options = defaultOptions;
options.message = arguments[0];
options.defaultText = arguments[1];
}
}
return new Promise(function(resolve, reject) {
try {
var alert_3 = createAlertDialog(options);
var input_1 = new android.widget.EditText(appmodule.android.foregroundActivity);
if (options && options.inputType === dialogsCommon.inputType.password) {
input_1.setInputType(android.text.InputType.TYPE_CLASS_TEXT | android.text.InputType.TYPE_TEXT_VARIATION_PASSWORD);
}
input_1.setText(options && options.defaultText || "");
alert_3.setView(input_1);
var getText_1 = function() {
return input_1.getText().toString();
};
addButtonsToAlertDialog(alert_3, options, function(r) {
resolve({
result: r,
text: getText_1()
});
});
showDialog(alert_3);
} catch (ex) {
reject(ex);
}
});
}
exports.prompt = prompt;
function login(arg) {
var options;
var defaultOptions = {
title: dialogsCommon.LOGIN,
okButtonText: dialogsCommon.OK,
cancelButtonText: dialogsCommon.CANCEL
};
if (arguments.length === 1) {
if (types.isString(arguments[0])) {
options = defaultOptions;
options.message = arguments[0];
} else {
options = arguments[0];
}
} else if (arguments.length === 2) {
if (types.isString(arguments[0]) && types.isString(arguments[1])) {
options = defaultOptions;
options.message = arguments[0];
options.userName = arguments[1];
}
} else if (arguments.length === 3) {
if (types.isString(arguments[0]) && types.isString(arguments[1]) && types.isString(arguments[2])) {
options = defaultOptions;
options.message = arguments[0];
options.userName = arguments[1];
options.password = arguments[2];
}
}
return new Promise(function(resolve, reject) {
try {
var context_1 = appmodule.android.foregroundActivity;
var alert_4 = createAlertDialog(options);
var userNameInput_1 = new android.widget.EditText(context_1);
userNameInput_1.setText(options.userName ? options.userName : "");
var passwordInput_1 = new android.widget.EditText(context_1);
passwordInput_1.setInputType(android.text.InputType.TYPE_CLASS_TEXT | android.text.InputType.TYPE_TEXT_VARIATION_PASSWORD);
passwordInput_1.setText(options.password ? options.password : "");
var layout = new android.widget.LinearLayout(context_1);
layout.setOrientation(1);
layout.addView(userNameInput_1);
layout.addView(passwordInput_1);
alert_4.setView(layout);
addButtonsToAlertDialog(alert_4, options, function(r) {
resolve({
result: r,
userName: userNameInput_1.getText().toString(),
password: passwordInput_1.getText().toString()
});
});
showDialog(alert_4);
} catch (ex) {
reject(ex);
}
});
}
exports.login = login;
function action(arg) {
var options;
var defaultOptions = {
title: null,
cancelButtonText: dialogsCommon.CANCEL
};
if (arguments.length === 1) {
if (types.isString(arguments[0])) {
options = defaultOptions;
options.message = arguments[0];
} else {
options = arguments[0];
}
} else if (arguments.length === 2) {
if (types.isString(arguments[0]) && types.isString(arguments[1])) {
options = defaultOptions;
options.message = arguments[0];
options.cancelButtonText = arguments[1];
}
} else if (arguments.length === 3) {
if (types.isString(arguments[0]) && types.isString(arguments[1]) && types.isDefined(arguments[2])) {
options = defaultOptions;
options.message = arguments[0];
options.cancelButtonText = arguments[1];
options.actions = arguments[2];
}
}
return new Promise(function(resolve, reject) {
try {
var activity = appmodule.android.foregroundActivity || appmodule.android.startActivity;
var alert_5 = new android.app.AlertDialog.Builder(activity);
var message = options && types.isString(options.message) ? options.message : "";
var title = options && types.isString(options.title) ? options.title : "";
if (options && options.cancelable === false) {
alert_5.setCancelable(false);
}
if (title) {
alert_5.setTitle(title);
if (!options.actions) {
alert_5.setMessage(message);
}
} else {
alert_5.setTitle(message);
}
if (options.actions) {
alert_5.setItems(options.actions, new android.content.DialogInterface.OnClickListener({
onClick: function(dialog, which) {
resolve(options.actions[which]);
}
}));
}
if (types.isString(options.cancelButtonText)) {
alert_5.setNegativeButton(options.cancelButtonText, new android.content.DialogInterface.OnClickListener({
onClick: function(dialog, id) {
dialog.cancel();
resolve(options.cancelButtonText);
}
}));
}
alert_5.setOnDismissListener(new android.content.DialogInterface.OnDismissListener({
onDismiss: function() {
if (types.isString(options.cancelButtonText)) {
resolve(options.cancelButtonText);
} else {
resolve("");
}
}
}));
showDialog(alert_5);
} catch (ex) {
reject(ex);
}
});
}
exports.action = action;
}, function(module, exports, __webpack_require__) {
var frame = __webpack_require__(10);
var button = __webpack_require__(39);
var textField = __webpack_require__(95);
var label = __webpack_require__(101);
var types = __webpack_require__(14);
exports.STRING = "string", exports.PROMPT = "Prompt", exports.CONFIRM = "Confirm", 
exports.ALERT = "Alert", exports.LOGIN = "Login", exports.OK = "OK", exports.CANCEL = "Cancel";
var inputType;
(function(inputType) {
inputType.text = "text";
inputType.password = "password";
})(inputType = exports.inputType || (exports.inputType = {}));
function getCurrentPage() {
var topMostFrame = frame.topmost();
if (topMostFrame) {
return topMostFrame.currentPage;
}
return undefined;
}
exports.getCurrentPage = getCurrentPage;
function applySelectors(view) {
var currentPage = getCurrentPage();
if (currentPage) {
var styleScope = currentPage._getStyleScope();
if (styleScope) {
styleScope.applySelectors(view);
}
}
}
var buttonColor;
function getButtonColor() {
if (!buttonColor) {
var btn = new button.Button();
applySelectors(btn);
buttonColor = btn.color;
btn.onUnloaded();
}
return buttonColor;
}
exports.getButtonColor = getButtonColor;
var buttonBackgroundColor;
function getButtonBackgroundColor() {
if (!buttonBackgroundColor) {
var btn = new button.Button();
applySelectors(btn);
buttonBackgroundColor = btn.backgroundColor;
btn.onUnloaded();
}
return buttonBackgroundColor;
}
exports.getButtonBackgroundColor = getButtonBackgroundColor;
var textFieldColor;
function getTextFieldColor() {
if (!textFieldColor) {
var tf = new textField.TextField();
applySelectors(tf);
textFieldColor = tf.color;
}
return textFieldColor;
}
exports.getTextFieldColor = getTextFieldColor;
var labelColor;
function getLabelColor() {
if (!labelColor) {
var lbl = new label.Label();
applySelectors(lbl);
labelColor = lbl.color;
}
return labelColor;
}
exports.getLabelColor = getLabelColor;
function isDialogOptions(arg) {
return !types.isNullOrUndefined(arg) && (arg.message || arg.title);
}
exports.isDialogOptions = isDialogOptions;
}, function(module, exports, __webpack_require__) {
var frameCommon = __webpack_require__(11);
var pages = __webpack_require__(73);
var transitionModule = __webpack_require__(90);
var trace = __webpack_require__(16);
var observable_1 = __webpack_require__(18);
var application = __webpack_require__(3);
var types = __webpack_require__(14);
global.moduleMerge(frameCommon, exports);
var HIDDEN = "_hidden";
var INTENT_EXTRA = "com.tns.activity";
var FRAMEID = "_frameId";
var navDepth = -1;
var fragmentId = -1;
var activityInitialized = false;
var CALLBACKS = "_callbacks";
function onFragmentShown(fragment) {
if (trace.enabled) {
trace.write("SHOWN " + fragment, trace.categories.NativeLifecycle);
}
var callbacks = fragment[CALLBACKS];
if (callbacks.clearHistory) {
if (trace.enabled) {
trace.write(fragment + " has been shown, but it is being cleared from history. Returning.", trace.categories.NativeLifecycle);
}
return null;
}
var frame = callbacks.frame;
var entry = callbacks.entry;
var page = entry.resolvedPage;
page._fragmentTag = entry.fragmentTag;
var currentNavigationContext;
var navigationQueue = frame._navigationQueue;
for (var i = 0; i < navigationQueue.length; i++) {
if (navigationQueue[i].entry === entry) {
currentNavigationContext = navigationQueue[i];
break;
}
}
var isBack = currentNavigationContext ? currentNavigationContext.isBackNavigation : false;
frame._addView(page);
if (!frame.isLoaded) {
frame._currentEntry = entry;
frame.onLoaded();
}
transitionModule._onFragmentShown(fragment, isBack);
}
function onFragmentHidden(fragment, destroyed) {
if (trace.enabled) {
trace.write("HIDDEN " + fragment + "; destroyed: " + destroyed, trace.categories.NativeLifecycle);
}
var callbacks = fragment[CALLBACKS];
var isBack = callbacks.entry.isBack;
callbacks.entry.isBack = undefined;
callbacks.entry.resolvedPage._fragmentTag = undefined;
transitionModule._onFragmentHidden(fragment, isBack, destroyed);
}
var Frame = function(_super) {
__extends(Frame, _super);
function Frame() {
_super.call(this);
this._containerViewId = -1;
this._android = new AndroidFrame(this);
this._listener = new android.view.View.OnAttachStateChangeListener({
onViewAttachedToWindow: this.onNativeViewAttachedToWindow.bind(this),
onViewDetachedFromWindow: this.onNativeViewDetachedToWindow.bind(this)
});
}
Object.defineProperty(Frame, "defaultAnimatedNavigation", {
get: function() {
return frameCommon.Frame.defaultAnimatedNavigation;
},
set: function(value) {
frameCommon.Frame.defaultAnimatedNavigation = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(Frame, "defaultTransition", {
get: function() {
return frameCommon.Frame.defaultTransition;
},
set: function(value) {
frameCommon.Frame.defaultTransition = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(Frame.prototype, "containerViewId", {
get: function() {
return this._containerViewId;
},
enumerable: true,
configurable: true
});
Object.defineProperty(Frame.prototype, "android", {
get: function() {
return this._android;
},
enumerable: true,
configurable: true
});
Object.defineProperty(Frame.prototype, "_nativeView", {
get: function() {
return this._android.rootViewGroup;
},
enumerable: true,
configurable: true
});
Frame.prototype._navigateCore = function(backstackEntry) {
_super.prototype._navigateCore.call(this, backstackEntry);
var activity = this._android.activity;
if (!activity) {
var currentActivity = this._android.currentActivity;
if (currentActivity) {
startActivity(currentActivity, this._android.frameId);
}
this._delayedNavigationEntry = backstackEntry;
return;
}
var manager = activity.getFragmentManager();
var currentFragment;
if (this._currentEntry) {
this._currentEntry.isNavigation = true;
currentFragment = manager.findFragmentByTag(this._currentEntry.fragmentTag);
}
var clearHistory = backstackEntry.entry.clearHistory;
if (clearHistory) {
navDepth = -1;
}
navDepth++;
fragmentId++;
var newFragmentTag = "fragment" + fragmentId + "[" + navDepth + "]";
ensureFragmentClass();
var newFragment = new fragmentClass();
var args = new android.os.Bundle();
args.putInt(FRAMEID, this._android.frameId);
newFragment.setArguments(args);
setFragmentCallbacks(newFragment);
var callbacks = newFragment[CALLBACKS];
callbacks.frame = this;
callbacks.entry = backstackEntry;
backstackEntry.isNavigation = true;
backstackEntry.fragmentTag = newFragmentTag;
backstackEntry.navDepth = navDepth;
var fragmentTransaction = manager.beginTransaction();
if (trace.enabled) {
trace.write("BEGIN TRANSACTION " + fragmentTransaction, trace.categories.Navigation);
}
var animated = this._getIsAnimatedNavigation(backstackEntry.entry);
var navigationTransition = this._getNavigationTransition(backstackEntry.entry);
if (currentFragment) {
transitionModule._clearForwardTransitions(currentFragment);
if (animated && navigationTransition) {
transitionModule._setAndroidFragmentTransitions(navigationTransition, currentFragment, newFragment, fragmentTransaction);
}
}
var length = manager.getBackStackEntryCount();
var emptyNativeBackStack = clearHistory && length > 0;
if (emptyNativeBackStack) {
for (var i = 0; i < length; i++) {
var fragmentToRemove = manager.findFragmentByTag(manager.getBackStackEntryAt(i).getName());
Frame._clearHistory(fragmentToRemove);
}
if (currentFragment) {
transitionModule._prepareCurrentFragmentForClearHistory(currentFragment);
}
var firstEntryName = manager.getBackStackEntryAt(0).getName();
if (trace.enabled) {
trace.write("POP BACK STACK " + firstEntryName, trace.categories.Navigation);
}
manager.popBackStackImmediate(firstEntryName, android.app.FragmentManager.POP_BACK_STACK_INCLUSIVE);
}
if (currentFragment && !emptyNativeBackStack) {
if (this.android.cachePagesOnNavigate && !clearHistory) {
if (trace.enabled) {
trace.write("\tHIDE " + currentFragment, trace.categories.Navigation);
}
fragmentTransaction.hide(currentFragment);
} else {
if (trace.enabled) {
trace.write("\tREMOVE " + currentFragment, trace.categories.Navigation);
}
fragmentTransaction.remove(currentFragment);
}
}
if (trace.enabled) {
trace.write("\tADD " + newFragmentTag + "<" + callbacks.entry.resolvedPage + ">", trace.categories.Navigation);
}
fragmentTransaction.add(this.containerViewId, newFragment, newFragmentTag);
if (this.backStack.length > 0 && currentFragment && !clearHistory) {
if (trace.enabled) {
trace.write("\tADD TO BACK STACK " + currentFragment, trace.categories.Navigation);
}
fragmentTransaction.addToBackStack(this._currentEntry.fragmentTag);
}
if (currentFragment) {
ensureAnimationFixed();
var trans = void 0;
if (this.android.cachePagesOnNavigate && animationFixed < 0 && !navigationTransition) {
trans = android.app.FragmentTransaction.TRANSIT_NONE;
} else {
trans = animated ? android.app.FragmentTransaction.TRANSIT_FRAGMENT_OPEN : android.app.FragmentTransaction.TRANSIT_NONE;
}
if (trace.enabled) {
trace.write("\tSET TRANSITION " + (trans === 0 ? "NONE" : "OPEN"), trace.categories.Navigation);
}
fragmentTransaction.setTransition(trans);
}
fragmentTransaction.commit();
if (trace.enabled) {
trace.write("END TRANSACTION " + fragmentTransaction, trace.categories.Navigation);
}
};
Frame._clearHistory = function(fragment) {
if (trace.enabled) {
trace.write("CLEAR HISTORY FOR " + fragment, trace.categories.Navigation);
}
var callbacks = fragment[CALLBACKS];
callbacks.clearHistory = true;
transitionModule._clearBackwardTransitions(fragment);
transitionModule._clearForwardTransitions(fragment);
transitionModule._removePageNativeViewFromAndroidParent(callbacks.entry.resolvedPage);
};
Frame.prototype._goBackCore = function(backstackEntry) {
_super.prototype._goBackCore.call(this, backstackEntry);
navDepth = backstackEntry.navDepth;
backstackEntry.isNavigation = true;
if (this._currentEntry) {
this._currentEntry.isBack = true;
this._currentEntry.isNavigation = true;
}
var manager = this._android.activity.getFragmentManager();
if (manager.getBackStackEntryCount() > 0) {
manager.popBackStack(backstackEntry.fragmentTag, android.app.FragmentManager.POP_BACK_STACK_INCLUSIVE);
}
};
Frame.prototype._createUI = function() {
var root = new org.nativescript.widgets.ContentLayout(this._context);
if (this._containerViewId < 0) {
this._containerViewId = android.view.View.generateViewId();
}
this._android.rootViewGroup = root;
this._android.rootViewGroup.setId(this._containerViewId);
this._android.rootViewGroup.addOnAttachStateChangeListener(this._listener);
};
Frame.prototype.onNativeViewAttachedToWindow = function(view) {
if (this._delayedNavigationEntry) {
this._navigateCore(this._delayedNavigationEntry);
this._delayedNavigationEntry = undefined;
}
};
Frame.prototype.onNativeViewDetachedToWindow = function(view) {};
Frame.prototype._popFromFrameStack = function() {
if (!this._isInFrameStack) {
return;
}
_super.prototype._popFromFrameStack.call(this);
if (this._android.hasOwnActivity) {
this._android.activity.finish();
}
};
Frame.prototype._clearAndroidReference = function() {
this._android.rootViewGroup.removeOnAttachStateChangeListener(this._listener);
this._android.rootViewGroup = null;
};
Frame.prototype._printNativeBackStack = function() {
if (!this._android.activity) {
return;
}
var manager = this._android.activity.getFragmentManager();
var length = manager.getBackStackEntryCount();
var i = length - 1;
console.log("Fragment Manager Back Stack: ");
while (i >= 0) {
var fragment = manager.findFragmentByTag(manager.getBackStackEntryAt(i--).getName());
console.log("\t" + fragment);
}
};
Frame.prototype._getNavBarVisible = function(page) {
if (types.isDefined(page.actionBarHidden)) {
return !page.actionBarHidden;
}
if (this._android && types.isDefined(this._android.showActionBar)) {
return this._android.showActionBar;
}
return true;
};
Frame.prototype._processNavigationContext = function(navigationContext) {
var _this = this;
var activity = this._android.activity;
if (activity) {
var isForegroundActivity = activity === application.android.foregroundActivity;
var isPaused = application.android.paused;
if (activity && !isForegroundActivity || isForegroundActivity && isPaused) {
var weakActivity_1 = new WeakRef(activity);
var resume_1 = function(args) {
var weakActivityInstance = weakActivity_1.get();
var isCurrent = args.activity === weakActivityInstance;
if (!weakActivityInstance) {
if (trace.enabled) {
trace.write("Frame _processNavigationContext: Drop For Activity GC-ed", trace.categories.Navigation);
}
unsubscribe_1();
return;
}
if (isCurrent) {
if (trace.enabled) {
trace.write("Frame _processNavigationContext: Activity.Resumed, Continue", trace.categories.Navigation);
}
_super.prototype._processNavigationContext.call(_this, navigationContext);
unsubscribe_1();
}
};
var unsubscribe_1 = function() {
if (trace.enabled) {
trace.write("Frame _processNavigationContext: Unsubscribe from Activity.Resumed", trace.categories.Navigation);
}
application.android.off(application.AndroidApplication.activityResumedEvent, resume_1);
application.android.off(application.AndroidApplication.activityStoppedEvent, unsubscribe_1);
application.android.off(application.AndroidApplication.activityDestroyedEvent, unsubscribe_1);
};
if (trace.enabled) {
trace.write("Frame._processNavigationContext: Subscribe for Activity.Resumed", trace.categories.Navigation);
}
application.android.on(application.AndroidApplication.activityResumedEvent, resume_1);
application.android.on(application.AndroidApplication.activityStoppedEvent, unsubscribe_1);
application.android.on(application.AndroidApplication.activityDestroyedEvent, unsubscribe_1);
return;
}
}
_super.prototype._processNavigationContext.call(this, navigationContext);
};
return Frame;
}(frameCommon.Frame);
exports.Frame = Frame;
var framesCounter = 0;
var framesCache = new Array();
var AndroidFrame = function(_super) {
__extends(AndroidFrame, _super);
function AndroidFrame(owner) {
_super.call(this);
this.hasOwnActivity = false;
this._showActionBar = true;
this._owner = owner;
this.frameId = framesCounter++;
framesCache.push(new WeakRef(this));
}
Object.defineProperty(AndroidFrame.prototype, "showActionBar", {
get: function() {
return this._showActionBar;
},
set: function(value) {
if (this._showActionBar !== value) {
this._showActionBar = value;
if (this.owner.currentPage) {
this.owner.currentPage.actionBar.update();
}
}
},
enumerable: true,
configurable: true
});
Object.defineProperty(AndroidFrame.prototype, "activity", {
get: function() {
var activity = this.owner._context;
if (activity) {
return activity;
}
var currView = this._owner.parent;
while (currView) {
if (currView instanceof Frame) {
return currView.android.activity;
}
currView = currView.parent;
}
return undefined;
},
enumerable: true,
configurable: true
});
Object.defineProperty(AndroidFrame.prototype, "actionBar", {
get: function() {
var activity = this.currentActivity;
if (!activity) {
return undefined;
}
var bar = activity.getActionBar();
if (!bar) {
return undefined;
}
return bar;
},
enumerable: true,
configurable: true
});
Object.defineProperty(AndroidFrame.prototype, "currentActivity", {
get: function() {
var activity = this.activity;
if (activity) {
return activity;
}
var stack = frameCommon.stack(), length = stack.length, i = length - 1, frame;
for (i; i >= 0; i--) {
frame = stack[i];
activity = frame.android.activity;
if (activity) {
return activity;
}
}
return undefined;
},
enumerable: true,
configurable: true
});
Object.defineProperty(AndroidFrame.prototype, "owner", {
get: function() {
return this._owner;
},
enumerable: true,
configurable: true
});
Object.defineProperty(AndroidFrame.prototype, "cachePagesOnNavigate", {
get: function() {
return this._cachePagesOnNavigate;
},
set: function(value) {
if (this._cachePagesOnNavigate !== value) {
if (this._owner.backStack.length > 0) {
this._owner._printFrameBackStack();
this._owner._printNativeBackStack();
console.log("currentPage: " + this._owner.currentPage);
throw new Error("Cannot set cachePagesOnNavigate if there are items in the back stack.");
}
this._cachePagesOnNavigate = value;
}
},
enumerable: true,
configurable: true
});
AndroidFrame.prototype.canGoBack = function() {
if (!this.activity) {
return false;
}
return this.activity.getIntent().getAction() !== android.content.Intent.ACTION_MAIN;
};
AndroidFrame.prototype.fragmentForPage = function(page) {
if (!page) {
return undefined;
}
var tag = page._fragmentTag;
if (tag) {
var manager = this.activity.getFragmentManager();
return manager.findFragmentByTag(tag);
}
return undefined;
};
return AndroidFrame;
}(observable_1.Observable);
function findPageForFragment(fragment, frame) {
var fragmentTag = fragment.getTag();
var page;
var entry;
if (trace.enabled) {
trace.write("Finding page for " + fragmentTag + ".", trace.categories.NativeLifecycle);
}
if (fragmentTag === pages.DIALOG_FRAGMENT_TAG) {
if (trace.enabled) {
trace.write("No need to find page for dialog fragment.", trace.categories.NativeLifecycle);
}
return;
}
if (frame._currentEntry && frame._currentEntry.fragmentTag === fragmentTag) {
page = frame.currentPage;
entry = frame._currentEntry;
if (trace.enabled) {
trace.write("Current page matches fragment " + fragmentTag + ".", trace.categories.NativeLifecycle);
}
} else {
var backStack = frame.backStack;
for (var i = 0; i < backStack.length; i++) {
if (backStack[i].fragmentTag === fragmentTag) {
entry = backStack[i];
break;
}
}
if (entry) {
page = entry.resolvedPage;
if (trace.enabled) {
trace.write("Found " + page + " for " + fragmentTag, trace.categories.NativeLifecycle);
}
}
}
if (page) {
var callbacks = fragment[CALLBACKS];
callbacks.frame = frame;
callbacks.entry = entry;
} else {
throw new Error("Could not find a page for " + fragmentTag + ".");
}
}
function startActivity(activity, frameId) {
var intent = new android.content.Intent(activity, activity.getClass());
intent.setAction(android.content.Intent.ACTION_DEFAULT);
intent.putExtra(INTENT_EXTRA, frameId);
activity.startActivity(intent);
}
function getFrameById(frameId) {
for (var i = 0; i < framesCache.length; i++) {
var aliveFrame = framesCache[i].get();
if (aliveFrame && aliveFrame.frameId === frameId) {
return aliveFrame.owner;
}
}
return null;
}
var animationFixed;
function ensureAnimationFixed() {
if (!animationFixed) {
animationFixed = android.os.Build.VERSION.SDK_INT >= 19 ? 1 : -1;
}
}
function ensureFragmentClass() {
if (fragmentClass) {
return;
}
__webpack_require__(94);
if (!fragmentClass) {
throw new Error("Failed to initialize the extended android.app.Fragment class");
}
}
var fragmentClass;
function setFragmentClass(clazz) {
if (fragmentClass) {
throw new Error("Fragment class already initialized");
}
fragmentClass = clazz;
}
exports.setFragmentClass = setFragmentClass;
var FragmentCallbacksImplementation = function() {
function FragmentCallbacksImplementation() {}
FragmentCallbacksImplementation.prototype.onHiddenChanged = function(fragment, hidden, superFunc) {
if (trace.enabled) {
trace.write(fragment + ".onHiddenChanged(" + hidden + ")", trace.categories.NativeLifecycle);
}
superFunc.call(fragment, hidden);
if (hidden) {
onFragmentHidden(fragment, false);
} else {
onFragmentShown(fragment);
}
};
FragmentCallbacksImplementation.prototype.onCreateAnimator = function(fragment, transit, enter, nextAnim, superFunc) {
var nextAnimString;
switch (nextAnim) {
case -10:
nextAnimString = "enter";
break;

case -20:
nextAnimString = "exit";
break;

case -30:
nextAnimString = "popEnter";
break;

case -40:
nextAnimString = "popExit";
break;
}
var animator = transitionModule._onFragmentCreateAnimator(fragment, nextAnim);
if (!animator) {
animator = superFunc.call(fragment, transit, enter, nextAnim);
}
if (trace.enabled) {
trace.write(fragment + ".onCreateAnimator(" + transit + ", " + (enter ? "enter" : "exit") + ", " + nextAnimString + "): " + animator, trace.categories.NativeLifecycle);
}
return animator;
};
FragmentCallbacksImplementation.prototype.onCreate = function(fragment, savedInstanceState, superFunc) {
if (trace.enabled) {
trace.write(fragment + ".onCreate(" + savedInstanceState + ")", trace.categories.NativeLifecycle);
}
superFunc.call(fragment, savedInstanceState);
if (!this.entry) {
var frameId = fragment.getArguments().getInt(FRAMEID);
var frame = getFrameById(frameId);
if (frame) {
this.frame = frame;
} else {
throw new Error("Cannot find Frame for " + fragment);
}
findPageForFragment(fragment, this.frame);
}
};
FragmentCallbacksImplementation.prototype.onCreateView = function(fragment, inflater, container, savedInstanceState, superFunc) {
if (trace.enabled) {
trace.write(fragment + ".onCreateView(inflater, container, " + savedInstanceState + ")", trace.categories.NativeLifecycle);
}
var entry = this.entry;
var page = entry.resolvedPage;
if (savedInstanceState && savedInstanceState.getBoolean(HIDDEN, false)) {
fragment.getFragmentManager().beginTransaction().hide(fragment).commit();
page._onAttached(fragment.getActivity());
} else {
onFragmentShown(fragment);
}
return page._nativeView;
};
FragmentCallbacksImplementation.prototype.onSaveInstanceState = function(fragment, outState, superFunc) {
if (trace.enabled) {
trace.write(fragment + ".onSaveInstanceState(" + outState + ")", trace.categories.NativeLifecycle);
}
superFunc.call(fragment, outState);
if (fragment.isHidden()) {
outState.putBoolean(HIDDEN, true);
}
};
FragmentCallbacksImplementation.prototype.onDestroyView = function(fragment, superFunc) {
if (trace.enabled) {
trace.write(fragment + ".onDestroyView()", trace.categories.NativeLifecycle);
}
superFunc.call(fragment);
onFragmentHidden(fragment, true);
};
FragmentCallbacksImplementation.prototype.onDestroy = function(fragment, superFunc) {
if (trace.enabled) {
trace.write(fragment + ".onDestroy()", trace.categories.NativeLifecycle);
}
superFunc.call(fragment);
};
FragmentCallbacksImplementation.prototype.toStringOverride = function(fragment, superFunc) {
return fragment.getTag() + "<" + (this.entry ? this.entry.resolvedPage : "") + ">";
};
return FragmentCallbacksImplementation;
}();
var ActivityCallbacksImplementation = function() {
function ActivityCallbacksImplementation() {}
ActivityCallbacksImplementation.prototype.onCreate = function(activity, savedInstanceState, superFunc) {
if (trace.enabled) {
trace.write("Activity.onCreate(" + savedInstanceState + ")", trace.categories.NativeLifecycle);
}
var app = application.android;
var intent = activity.getIntent();
if (application.onLaunch) {
application.onLaunch(intent);
}
var launchArgs = {
eventName: application.launchEvent,
object: app,
android: intent
};
application.notify(launchArgs);
var frameId = -1;
var rootView = launchArgs.root;
var extras = intent.getExtras();
if (extras) {
frameId = extras.getInt(INTENT_EXTRA, -1);
}
if (savedInstanceState && frameId < 0) {
frameId = savedInstanceState.getInt(INTENT_EXTRA, -1);
}
var frame;
var navParam;
if (frameId >= 0) {
rootView = getFrameById(frameId);
}
if (!rootView) {
navParam = application.mainEntry;
if (!navParam) {
navParam = application.mainModule;
}
if (navParam) {
frame = new Frame();
} else {
throw new Error("A Frame must be used to navigate to a Page.");
}
rootView = frame;
}
var isRestart = !!savedInstanceState && activityInitialized;
superFunc.call(activity, isRestart ? savedInstanceState : null);
this._rootView = rootView;
rootView._onAttached(activity);
activity.setContentView(rootView._nativeView, new org.nativescript.widgets.CommonLayoutParams());
if (frame) {
frame.navigate(navParam);
}
activityInitialized = true;
};
ActivityCallbacksImplementation.prototype.onSaveInstanceState = function(activity, outState, superFunc) {
superFunc.call(activity, outState);
var view = this._rootView;
if (view instanceof Frame) {
outState.putInt(INTENT_EXTRA, view.android.frameId);
}
};
ActivityCallbacksImplementation.prototype.onStart = function(activity, superFunc) {
superFunc.call(activity);
if (trace.enabled) {
trace.write("NativeScriptActivity.onStart();", trace.categories.NativeLifecycle);
}
var rootView = this._rootView;
if (rootView && !rootView.isLoaded) {
rootView.onLoaded();
}
};
ActivityCallbacksImplementation.prototype.onStop = function(activity, superFunc) {
superFunc.call(activity);
if (trace.enabled) {
trace.write("NativeScriptActivity.onStop();", trace.categories.NativeLifecycle);
}
var rootView = this._rootView;
if (rootView && rootView.isLoaded) {
rootView.onUnloaded();
}
};
ActivityCallbacksImplementation.prototype.onDestroy = function(activity, superFunc) {
var rootView = this._rootView;
if (rootView && rootView._context) {
rootView._onDetached(true);
}
superFunc.call(activity);
if (trace.enabled) {
trace.write("NativeScriptActivity.onDestroy();", trace.categories.NativeLifecycle);
}
var exitArgs = {
eventName: application.exitEvent,
object: application.android,
android: activity
};
application.notify(exitArgs);
if (application.onExit) {
application.onExit();
}
};
ActivityCallbacksImplementation.prototype.onBackPressed = function(activity, superFunc) {
if (trace.enabled) {
trace.write("NativeScriptActivity.onBackPressed;", trace.categories.NativeLifecycle);
}
var args = {
eventName: "activityBackPressed",
object: application.android,
activity: activity,
cancel: false
};
application.android.notify(args);
if (args.cancel) {
return;
}
if (!frameCommon.goBack()) {
superFunc.call(activity);
}
};
ActivityCallbacksImplementation.prototype.onRequestPermissionsResult = function(activity, requestCode, permissions, grantResults, superFunc) {
if (trace.enabled) {
trace.write("NativeScriptActivity.onRequestPermissionsResult;", trace.categories.NativeLifecycle);
}
application.android.notify({
eventName: "activityRequestPermissions",
object: application.android,
activity: activity,
requestCode: requestCode,
permissions: permissions,
grantResults: grantResults
});
};
ActivityCallbacksImplementation.prototype.onActivityResult = function(activity, requestCode, resultCode, data, superFunc) {
superFunc.call(activity, requestCode, resultCode, data);
if (trace.enabled) {
trace.write("NativeScriptActivity.onActivityResult(" + requestCode + ", " + resultCode + ", " + data + ")", trace.categories.NativeLifecycle);
}
var result = application.android.onActivityResult;
if (result) {
result(requestCode, resultCode, data);
}
application.android.notify({
eventName: "activityResult",
object: application.android,
activity: activity,
requestCode: requestCode,
resultCode: resultCode,
intent: data
});
};
return ActivityCallbacksImplementation;
}();
function setActivityCallbacks(activity) {
activity[CALLBACKS] = new ActivityCallbacksImplementation();
}
exports.setActivityCallbacks = setActivityCallbacks;
function setFragmentCallbacks(fragment) {
fragment[CALLBACKS] = new FragmentCallbacksImplementation();
}
exports.setFragmentCallbacks = setFragmentCallbacks;
}, function(module, exports, __webpack_require__) {
var view_1 = __webpack_require__(12);
var page_1 = __webpack_require__(73);
var types_1 = __webpack_require__(14);
var trace = __webpack_require__(16);
var file_name_resolver_1 = __webpack_require__(81);
var fs = __webpack_require__(32);
var platform = __webpack_require__(35);
var builder;
function ensureBuilder() {
if (!builder) {
builder = __webpack_require__(82);
}
}
var frameStack = [];
function buildEntryFromArgs(arg) {
var entry;
if (arg instanceof page_1.Page) {
throw new Error("Navigating to a Page instance is no longer supported. Please navigate by using either a module name or a page factory function.");
} else if (types_1.isString(arg)) {
entry = {
moduleName: arg
};
} else if (types_1.isFunction(arg)) {
entry = {
create: arg
};
} else {
entry = arg;
}
return entry;
}
function reloadPage() {
var frame = exports.topmost();
if (frame) {
if (frame.currentPage && frame.currentPage.modal) {
frame.currentPage.modal.closeModal();
}
var currentEntry = frame._currentEntry.entry;
var newEntry = {
animated: false,
clearHistory: true,
context: currentEntry.context,
create: currentEntry.create,
moduleName: currentEntry.moduleName,
backstackVisible: currentEntry.backstackVisible
};
frame.navigate(newEntry);
}
}
exports.reloadPage = reloadPage;
function resolvePageFromEntry(entry) {
var page;
if (entry.create) {
page = entry.create();
if (!(page && page instanceof page_1.Page)) {
throw new Error("Failed to create Page with entry.create() function.");
}
} else if (entry.moduleName) {
var currentAppPath = fs.knownFolders.currentApp().path;
var moduleNamePath = fs.path.join(currentAppPath, entry.moduleName);
var moduleExports;
if (global.moduleExists(entry.moduleName)) {
if (trace.enabled) {
trace.write("Loading pre-registered JS module: " + entry.moduleName, trace.categories.Navigation);
}
moduleExports = global.loadModule(entry.moduleName);
} else {
var moduleExportsResolvedPath = file_name_resolver_1.resolveFileName(moduleNamePath, "js");
if (moduleExportsResolvedPath) {
if (trace.enabled) {
trace.write("Loading JS file: " + moduleExportsResolvedPath, trace.categories.Navigation);
}
moduleExportsResolvedPath = moduleExportsResolvedPath.substr(0, moduleExportsResolvedPath.length - 3);
moduleExports = global.loadModule(moduleExportsResolvedPath);
}
}
if (moduleExports && moduleExports.createPage) {
if (trace.enabled) {
trace.write("Calling createPage()", trace.categories.Navigation);
}
page = moduleExports.createPage();
} else {
page = pageFromBuilder(moduleNamePath, moduleExports);
}
if (!(page && page instanceof page_1.Page)) {
throw new Error("Failed to load Page from entry.moduleName: " + entry.moduleName);
}
var cssFileName = file_name_resolver_1.resolveFileName(moduleNamePath, "css");
if (cssFileName && !page["cssFile"]) {
page.addCssFile(cssFileName);
}
}
return page;
}
exports.resolvePageFromEntry = resolvePageFromEntry;
function pageFromBuilder(moduleNamePath, moduleExports) {
var page;
var element;
var fileName = file_name_resolver_1.resolveFileName(moduleNamePath, "xml");
if (fileName) {
if (trace.enabled) {
trace.write("Loading XML file: " + fileName, trace.categories.Navigation);
}
ensureBuilder();
element = builder.load(fileName, moduleExports);
if (element instanceof page_1.Page) {
page = element;
}
}
return page;
}
var Frame = function(_super) {
__extends(Frame, _super);
function Frame() {
_super.call(this);
this._isInFrameStack = false;
this._backStack = new Array();
this._navigationQueue = new Array();
}
Frame.prototype.canGoBack = function() {
return this._backStack.length > 0;
};
Frame.prototype.goBack = function(backstackEntry) {
if (trace.enabled) {
trace.write("GO BACK", trace.categories.Navigation);
}
if (!this.canGoBack()) {
return;
}
if (!backstackEntry) {
backstackEntry = this._backStack.pop();
} else {
var backIndex = this._backStack.indexOf(backstackEntry);
if (backIndex < 0) {
return;
}
this._backStack.splice(backIndex);
}
var navigationContext = {
entry: backstackEntry,
isBackNavigation: true
};
this._navigationQueue.push(navigationContext);
if (this._navigationQueue.length === 1) {
this._processNavigationContext(navigationContext);
} else {
if (trace.enabled) {
trace.write("Going back scheduled", trace.categories.Navigation);
}
}
};
Frame.prototype.navigate = function(param) {
if (trace.enabled) {
trace.write("NAVIGATE", trace.categories.Navigation);
}
var entry = buildEntryFromArgs(param);
var page = resolvePageFromEntry(entry);
this._pushInFrameStack();
var backstackEntry = {
entry: entry,
resolvedPage: page,
navDepth: undefined,
fragmentTag: undefined,
isBack: undefined,
isNavigation: true
};
var navigationContext = {
entry: backstackEntry,
isBackNavigation: false
};
this._navigationQueue.push(navigationContext);
if (this._navigationQueue.length === 1) {
this._processNavigationContext(navigationContext);
} else {
if (trace.enabled) {
trace.write("Navigation scheduled", trace.categories.Navigation);
}
}
};
Frame.prototype._processNavigationQueue = function(page) {
if (this._navigationQueue.length === 0) {
return;
}
var entry = this._navigationQueue[0].entry;
var currentNavigationPage = entry.resolvedPage;
if (page !== currentNavigationPage) {
throw new Error("Corrupted navigation stack; page: " + page + "; currentNavigationPage: " + currentNavigationPage);
}
this._navigationQueue.shift();
if (this._navigationQueue.length > 0) {
var navigationContext = this._navigationQueue[0];
this._processNavigationContext(navigationContext);
}
this._updateActionBar();
};
Frame.prototype.navigationQueueIsEmpty = function() {
return this._navigationQueue.length === 0;
};
Frame._isEntryBackstackVisible = function(entry) {
if (!entry) {
return false;
}
var backstackVisibleValue = entry.entry.backstackVisible;
var backstackHidden = types_1.isDefined(backstackVisibleValue) && !backstackVisibleValue;
return !backstackHidden;
};
Frame.prototype._updateActionBar = function(page, disableNavBarAnimation) {};
Frame.prototype._processNavigationContext = function(navigationContext) {
if (navigationContext.isBackNavigation) {
this.performGoBack(navigationContext);
} else {
this.performNavigation(navigationContext);
}
};
Frame.prototype.performNavigation = function(navigationContext) {
var navContext = navigationContext.entry;
if (navigationContext.entry.entry.clearHistory) {
this._backStack.length = 0;
} else if (Frame._isEntryBackstackVisible(this._currentEntry)) {
this._backStack.push(this._currentEntry);
}
this._onNavigatingTo(navContext, navigationContext.isBackNavigation);
this._navigateCore(navContext);
};
Frame.prototype.performGoBack = function(navigationContext) {
var navContext = navigationContext.entry;
this._onNavigatingTo(navContext, navigationContext.isBackNavigation);
this._goBackCore(navContext);
};
Frame.prototype._goBackCore = function(backstackEntry) {
if (trace.enabled) {
trace.write("GO BACK CORE(" + this._backstackEntryTrace(backstackEntry) + "); currentPage: " + this.currentPage, trace.categories.Navigation);
}
};
Frame.prototype._navigateCore = function(backstackEntry) {
if (trace.enabled) {
trace.write("NAVIGATE CORE(" + this._backstackEntryTrace(backstackEntry) + "); currentPage: " + this.currentPage, trace.categories.Navigation);
}
};
Frame.prototype._onNavigatingTo = function(backstackEntry, isBack) {
if (this.currentPage) {
this.currentPage.onNavigatingFrom(isBack);
}
backstackEntry.resolvedPage.onNavigatingTo(backstackEntry.entry.context, isBack, backstackEntry.entry.bindingContext);
};
Object.defineProperty(Frame.prototype, "animated", {
get: function() {
return this._animated;
},
set: function(value) {
this._animated = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(Frame.prototype, "transition", {
get: function() {
return this._transition;
},
set: function(value) {
this._transition = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(Frame.prototype, "backStack", {
get: function() {
return this._backStack.slice();
},
enumerable: true,
configurable: true
});
Object.defineProperty(Frame.prototype, "currentPage", {
get: function() {
if (this._currentEntry) {
return this._currentEntry.resolvedPage;
}
return null;
},
enumerable: true,
configurable: true
});
Object.defineProperty(Frame.prototype, "currentEntry", {
get: function() {
if (this._currentEntry) {
return this._currentEntry.entry;
}
return null;
},
enumerable: true,
configurable: true
});
Frame.prototype._pushInFrameStack = function() {
if (this._isInFrameStack) {
return;
}
frameStack.push(this);
this._isInFrameStack = true;
};
Frame.prototype._popFromFrameStack = function() {
if (!this._isInFrameStack) {
return;
}
var top = _topmost();
if (top !== this) {
throw new Error("Cannot pop a Frame which is not at the top of the navigation stack.");
}
frameStack.pop();
this._isInFrameStack = false;
};
Object.defineProperty(Frame.prototype, "_childrenCount", {
get: function() {
if (this.currentPage) {
return 1;
}
return 0;
},
enumerable: true,
configurable: true
});
Frame.prototype._eachChildView = function(callback) {
if (this.currentPage) {
callback(this.currentPage);
}
};
Frame.prototype._getIsAnimatedNavigation = function(entry) {
if (entry && types_1.isDefined(entry.animated)) {
return entry.animated;
}
if (types_1.isDefined(this.animated)) {
return this.animated;
}
return Frame.defaultAnimatedNavigation;
};
Frame.prototype._getNavigationTransition = function(entry) {
if (entry) {
if (platform.device.os === platform.platformNames.ios && types_1.isDefined(entry.transitioniOS)) {
return entry.transitioniOS;
}
if (platform.device.os === platform.platformNames.android && types_1.isDefined(entry.transitionAndroid)) {
return entry.transitionAndroid;
}
if (types_1.isDefined(entry.transition)) {
return entry.transition;
}
}
if (types_1.isDefined(this.transition)) {
return this.transition;
}
return Frame.defaultTransition;
};
Object.defineProperty(Frame.prototype, "navigationBarHeight", {
get: function() {
return 0;
},
enumerable: true,
configurable: true
});
Frame.prototype._getNavBarVisible = function(page) {
throw new Error();
};
Frame.prototype._addViewToNativeVisualTree = function(child) {
return true;
};
Frame.prototype._removeViewFromNativeVisualTree = function(child) {
child._isAddedToNativeVisualTree = false;
};
Frame.prototype._printFrameBackStack = function() {
var length = this.backStack.length;
var i = length - 1;
console.log("Frame Back Stack: ");
while (i >= 0) {
var backstackEntry = this.backStack[i--];
console.log("\t" + backstackEntry.resolvedPage);
}
};
Frame.prototype._backstackEntryTrace = function(b) {
var result = "" + b.resolvedPage;
var backstackVisible = Frame._isEntryBackstackVisible(b);
if (!backstackVisible) {
result += " | INVISIBLE";
}
if (b.entry.clearHistory) {
result += " | CLEAR HISTORY";
}
var animated = this._getIsAnimatedNavigation(b.entry);
if (!animated) {
result += " | NOT ANIMATED";
}
var t = this._getNavigationTransition(b.entry);
if (t) {
result += " | Transition[" + JSON.stringify(t) + "]";
}
return result;
};
Frame.androidOptionSelectedEvent = "optionSelected";
Frame.defaultAnimatedNavigation = true;
return Frame;
}(view_1.CustomLayoutView);
exports.Frame = Frame;
var _topmost = function() {
if (frameStack.length > 0) {
return frameStack[frameStack.length - 1];
}
return undefined;
};
exports.topmost = _topmost;
function goBack() {
var top = _topmost();
if (top.canGoBack()) {
top.goBack();
return true;
}
if (frameStack.length > 1) {
top._popFromFrameStack();
}
return false;
}
exports.goBack = goBack;
function stack() {
return frameStack;
}
exports.stack = stack;
}, function(module, exports, __webpack_require__) {
var viewCommon = __webpack_require__(13);
var trace = __webpack_require__(16);
var utils = __webpack_require__(27);
var types = __webpack_require__(14);
var style = __webpack_require__(15);
var enums = __webpack_require__(24);
var background = __webpack_require__(36);
var platform_1 = __webpack_require__(35);
var flexbox;
global.moduleMerge(viewCommon, exports);
var ANDROID = "_android";
var NATIVE_VIEW = "_nativeView";
var VIEW_GROUP = "_viewGroup";
function onAutomationTextPropertyChanged(data) {
var view = data.object;
view._nativeView.setContentDescription(data.newValue + "");
}
viewCommon.View.automationTextProperty.metadata.onSetNativeValue = onAutomationTextPropertyChanged;
function onIdPropertyChanged(data) {
var view = data.object;
view._nativeView.setTag(data.newValue + "");
}
viewCommon.View.idProperty.metadata.onSetNativeValue = onIdPropertyChanged;
function onOriginXPropertyChanged(data) {
org.nativescript.widgets.OriginPoint.setX(data.object._nativeView, data.newValue);
}
viewCommon.View.originXProperty.metadata.onSetNativeValue = onOriginXPropertyChanged;
function onOriginYPropertyChanged(data) {
org.nativescript.widgets.OriginPoint.setY(data.object._nativeView, data.newValue);
}
viewCommon.View.originYProperty.metadata.onSetNativeValue = onOriginYPropertyChanged;
function onIsEnabledPropertyChanged(data) {
var view = data.object;
view._nativeView.setEnabled(data.newValue);
}
viewCommon.View.isEnabledProperty.metadata.onSetNativeValue = onIsEnabledPropertyChanged;
function onIsUserInteractionEnabledPropertyChanged(data) {
var view = data.object;
view._updateOnTouchListener(data.newValue);
}
viewCommon.View.isUserInteractionEnabledProperty.metadata.onSetNativeValue = onIsUserInteractionEnabledPropertyChanged;
var styleHandlersInitialized;
var View = function(_super) {
__extends(View, _super);
function View() {
_super.call(this);
this._disableUserInteractionListener = new android.view.View.OnTouchListener({
onTouch: function(view, event) {
return true;
}
});
if (!styleHandlersInitialized) {
styleHandlersInitialized = true;
ViewStyler.registerHandlers();
}
}
View.prototype._updateOnTouchListener = function(isUserInteractionEnabled) {
if (!isUserInteractionEnabled) {
this._nativeView.setOnTouchListener(this._disableUserInteractionListener);
return;
}
if (this._gesturesListener) {
this._nativeView.setOnTouchListener(this._gesturesListener);
return;
}
this._nativeView.setOnTouchListener(null);
};
Object.defineProperty(View.prototype, "gesturesListener", {
set: function(value) {
this._gesturesListener = value;
this._updateOnTouchListener(this.isUserInteractionEnabled);
},
enumerable: true,
configurable: true
});
View.prototype.observe = function(type, callback, thisArg) {
_super.prototype.observe.call(this, type, callback, thisArg);
if (this.isLoaded && !this.touchListenerIsSet) {
this.setOnTouchListener();
}
};
View.prototype.onLoaded = function() {
_super.prototype.onLoaded.call(this);
this.setOnTouchListener();
};
View.prototype.onUnloaded = function() {
_super.prototype.onUnloaded.call(this);
this._unregisterAllAnimations();
if (this._nativeView && this._nativeView.setOnTouchListener) {
this._nativeView.setOnTouchListener(null);
this.touchListenerIsSet = false;
}
};
View.prototype.hasGestureObservers = function() {
return this._gestureObservers && Object.keys(this._gestureObservers).length > 0;
};
View.prototype.setOnTouchListener = function() {
if (this._nativeView && this._nativeView.setOnTouchListener && this.hasGestureObservers()) {
this.touchListenerIsSet = true;
var that = new WeakRef(this);
if (this._nativeView.setClickable) {
this._nativeView.setClickable(true);
}
this._nativeView.setOnTouchListener(new android.view.View.OnTouchListener({
onTouch: function(view, motionEvent) {
var owner = that.get();
if (!owner) {
return false;
}
for (var type in owner._gestureObservers) {
var list = owner._gestureObservers[type];
for (var i = 0; i < list.length; i++) {
list[i].androidOnTouchEvent(motionEvent);
}
}
if (!owner._nativeView || !owner._nativeView.onTouchEvent) {
return false;
}
return owner._nativeView.onTouchEvent(motionEvent);
}
}));
}
};
View.prototype._addViewCore = function(view, atIndex) {
if (this._context) {
view._onAttached(this._context);
}
_super.prototype._addViewCore.call(this, view, atIndex);
if (this._context) {
view._syncNativeProperties();
}
};
View.prototype._removeViewCore = function(view) {
_super.prototype._removeViewCore.call(this, view);
if (view._context) {
view._onDetached();
}
};
View.prototype._onAttached = function(context) {
if (!context) {
throw new Error("Expected valid android.content.Context instance.");
}
if (trace.enabled) {
trace.write(this + "._onAttached(context)", trace.categories.VisualTreeEvents);
}
if (this._context === context) {
return;
}
if (this._context) {
this._onDetached(true);
}
this._context = context;
this._onContextChanged();
trace.notifyEvent(this, "_onAttached");
if (this._childrenCount > 0) {
var that = this;
var eachChild = function(child) {
child._onAttached(context);
if (!child._isAddedToNativeVisualTree) {
child._isAddedToNativeVisualTree = that._addViewToNativeVisualTree(child);
}
child._syncNativeProperties();
return true;
};
this._eachChildView(eachChild);
}
};
View.prototype._onDetached = function(force) {
if (trace.enabled) {
trace.write(this + "._onDetached(force)", trace.categories.VisualTreeEvents);
}
if (this._childrenCount > 0) {
var that = this;
var eachChild = function(child) {
if (child._isAddedToNativeVisualTree) {
that._removeViewFromNativeVisualTree(child);
}
if (child._context) {
child._onDetached(force);
}
return true;
};
this._eachChildView(eachChild);
}
this._clearAndroidReference();
this._context = undefined;
trace.notifyEvent(this, "_onDetached");
};
View.prototype._clearAndroidReference = function() {
if (this[NATIVE_VIEW] === this[ANDROID]) {
this[NATIVE_VIEW] = undefined;
}
if (this[VIEW_GROUP] === this[ANDROID]) {
this[VIEW_GROUP] = undefined;
}
this[ANDROID] = undefined;
};
View.prototype._onContextChanged = function() {
if (trace.enabled) {
trace.write(this + "._onContextChanged", trace.categories.VisualTreeEvents);
}
this._createUI();
if (this._nativeView && !this._nativeView.getLayoutParams()) {
this._nativeView.setLayoutParams(new org.nativescript.widgets.CommonLayoutParams());
}
var padding = this.style.paddingLeft;
padding = this.style.paddingTop;
padding = this.style.paddingRight;
padding = this.style.paddingBottom;
trace.notifyEvent(this, "_onContextChanged");
};
Object.defineProperty(View.prototype, "_nativeView", {
get: function() {
return this.android;
},
enumerable: true,
configurable: true
});
Object.defineProperty(View.prototype, "isLayoutRequired", {
get: function() {
return !this.isLayoutValid;
},
enumerable: true,
configurable: true
});
Object.defineProperty(View.prototype, "isLayoutValid", {
get: function() {
if (this._nativeView) {
return !this._nativeView.isLayoutRequested();
}
return false;
},
enumerable: true,
configurable: true
});
View.prototype.layoutNativeView = function(left, top, right, bottom) {
if (this._nativeView) {
this._nativeView.layout(left, top, right, bottom);
}
};
View.prototype.requestLayout = function() {
_super.prototype.requestLayout.call(this);
if (this._nativeView) {
return this._nativeView.requestLayout();
}
};
View.prototype.measure = function(widthMeasureSpec, heightMeasureSpec) {
_super.prototype.measure.call(this, widthMeasureSpec, heightMeasureSpec);
this.onMeasure(widthMeasureSpec, heightMeasureSpec);
};
View.prototype.layout = function(left, top, right, bottom) {
_super.prototype.layout.call(this, left, top, right, bottom);
this.onLayout(left, top, right, bottom);
};
View.prototype.onMeasure = function(widthMeasureSpec, heightMeasureSpec) {
var view = this._nativeView;
if (view) {
view.measure(widthMeasureSpec, heightMeasureSpec);
this.setMeasuredDimension(view.getMeasuredWidth(), view.getMeasuredHeight());
}
};
View.prototype.onLayout = function(left, top, right, bottom) {
var view = this._nativeView;
if (view) {
this.layoutNativeView(left, top, right, bottom);
}
};
View.prototype._getCurrentLayoutBounds = function() {
if (this._nativeView) {
return {
left: this._nativeView.getLeft(),
top: this._nativeView.getTop(),
right: this._nativeView.getRight(),
bottom: this._nativeView.getBottom()
};
}
return _super.prototype._getCurrentLayoutBounds.call(this);
};
View.prototype.getMeasuredWidth = function() {
if (this._nativeView) {
return this._nativeView.getMeasuredWidth();
}
return _super.prototype.getMeasuredWidth.call(this);
};
View.prototype.getMeasuredHeight = function() {
if (this._nativeView) {
return this._nativeView.getMeasuredHeight();
}
return _super.prototype.getMeasuredHeight.call(this);
};
View.prototype.focus = function() {
if (this._nativeView) {
return this._nativeView.requestFocus();
}
return false;
};
View.prototype.getLocationInWindow = function() {
if (!this._nativeView || !this._nativeView.getWindowToken()) {
return undefined;
}
var nativeArray = Array.create("int", 2);
this._nativeView.getLocationInWindow(nativeArray);
return {
x: utils.layout.toDeviceIndependentPixels(nativeArray[0]),
y: utils.layout.toDeviceIndependentPixels(nativeArray[1])
};
};
View.prototype.getLocationOnScreen = function() {
if (!this._nativeView || !this._nativeView.getWindowToken()) {
return undefined;
}
var nativeArray = Array.create("int", 2);
this._nativeView.getLocationOnScreen(nativeArray);
return {
x: utils.layout.toDeviceIndependentPixels(nativeArray[0]),
y: utils.layout.toDeviceIndependentPixels(nativeArray[1])
};
};
View.prototype.getLocationRelativeTo = function(otherView) {
if (!this._nativeView || !this._nativeView.getWindowToken() || !otherView._nativeView || !otherView._nativeView.getWindowToken() || this._nativeView.getWindowToken() !== otherView._nativeView.getWindowToken()) {
return undefined;
}
var myArray = Array.create("int", 2);
this._nativeView.getLocationOnScreen(myArray);
var otherArray = Array.create("int", 2);
otherView._nativeView.getLocationOnScreen(otherArray);
return {
x: utils.layout.toDeviceIndependentPixels(myArray[0] - otherArray[0]),
y: utils.layout.toDeviceIndependentPixels(myArray[1] - otherArray[1])
};
};
View.resolveSizeAndState = function(size, specSize, specMode, childMeasuredState) {
var result = size;
switch (specMode) {
case utils.layout.UNSPECIFIED:
result = size;
break;

case utils.layout.AT_MOST:
if (specSize < size) {
result = specSize | utils.layout.MEASURED_STATE_TOO_SMALL;
}
break;

case utils.layout.EXACTLY:
result = specSize;
break;
}
return result | childMeasuredState & utils.layout.MEASURED_STATE_MASK;
};
return View;
}(viewCommon.View);
exports.View = View;
var CustomLayoutView = function(_super) {
__extends(CustomLayoutView, _super);
function CustomLayoutView() {
_super.apply(this, arguments);
}
Object.defineProperty(CustomLayoutView.prototype, "android", {
get: function() {
return this._viewGroup;
},
enumerable: true,
configurable: true
});
Object.defineProperty(CustomLayoutView.prototype, "_nativeView", {
get: function() {
return this._viewGroup;
},
enumerable: true,
configurable: true
});
CustomLayoutView.prototype._createUI = function() {
this._viewGroup = new org.nativescript.widgets.ContentLayout(this._context);
};
CustomLayoutView.prototype._addViewToNativeVisualTree = function(child, atIndex) {
_super.prototype._addViewToNativeVisualTree.call(this, child);
if (this._nativeView && child._nativeView) {
if (types.isNullOrUndefined(atIndex) || atIndex >= this._nativeView.getChildCount()) {
if (trace.enabled) {
trace.write(this + "._nativeView.addView(" + child + "._nativeView)", trace.categories.VisualTreeEvents);
}
this._nativeView.addView(child._nativeView);
} else {
if (trace.enabled) {
trace.write(this + "._nativeView.addView(" + child + "._nativeView, " + atIndex + ")", trace.categories.VisualTreeEvents);
}
this._nativeView.addView(child._nativeView, atIndex);
}
return true;
}
return false;
};
CustomLayoutView.prototype._removeViewFromNativeVisualTree = function(child) {
_super.prototype._removeViewFromNativeVisualTree.call(this, child);
if (this._nativeView && child._nativeView) {
if (trace.enabled) {
trace.write(this + "._nativeView.removeView(" + child + "._nativeView)", trace.categories.VisualTreeEvents);
}
this._nativeView.removeView(child._nativeView);
trace.notifyEvent(child, "childInLayoutRemovedFromNativeVisualTree");
}
};
return CustomLayoutView;
}(View);
exports.CustomLayoutView = CustomLayoutView;
var ViewStyler = function() {
function ViewStyler() {}
ViewStyler.setBackgroundAndBorder = function(view, newValue, defaultValue) {
background.ad.onBackgroundOrBorderPropertyChanged(view);
};
ViewStyler.resetBackgroundAndBorder = function(view, nativeValue) {
background.ad.onBackgroundOrBorderPropertyChanged(view);
};
ViewStyler.setVisibilityProperty = function(view, newValue) {
var androidValue = newValue === enums.Visibility.visible ? android.view.View.VISIBLE : android.view.View.GONE;
view._nativeView.setVisibility(androidValue);
};
ViewStyler.resetVisibilityProperty = function(view, nativeValue) {
view._nativeView.setVisibility(android.view.View.VISIBLE);
};
ViewStyler.setOpacityProperty = function(view, newValue) {
view._nativeView.setAlpha(float(newValue));
};
ViewStyler.resetOpacityProperty = function(view, nativeValue) {
view._nativeView.setAlpha(float(1));
};
ViewStyler.setMinWidthProperty = function(view, newValue) {
view._nativeView.setMinimumWidth(Math.round(newValue * utils.layout.getDisplayDensity()));
};
ViewStyler.resetMinWidthProperty = function(view, nativeValue) {
view._nativeView.setMinimumWidth(0);
};
ViewStyler.setMinHeightProperty = function(view, newValue) {
view._nativeView.setMinimumHeight(Math.round(newValue * utils.layout.getDisplayDensity()));
};
ViewStyler.resetMinHeightProperty = function(view, nativeValue) {
view._nativeView.setMinimumHeight(0);
};
ViewStyler.setNativeLayoutParamsProperty = function(view, params) {
var nativeView = view._nativeView;
var width = params.width * utils.layout.getDisplayDensity();
var height = params.height * utils.layout.getDisplayDensity();
if (width < 0) {
width = -2;
}
if (height < 0) {
height = -2;
}
var gravity = 0;
switch (params.horizontalAlignment) {
case enums.HorizontalAlignment.left:
gravity |= android.view.Gravity.LEFT;
break;

case enums.HorizontalAlignment.center:
gravity |= android.view.Gravity.CENTER_HORIZONTAL;
break;

case enums.HorizontalAlignment.right:
gravity |= android.view.Gravity.RIGHT;
break;

case enums.HorizontalAlignment.stretch:
gravity |= android.view.Gravity.FILL_HORIZONTAL;
if (width < 0) {
width = -1;
}
break;

default:
throw new Error("Invalid horizontalAlignment value: " + params.horizontalAlignment);
}
switch (params.verticalAlignment) {
case enums.VerticalAlignment.top:
gravity |= android.view.Gravity.TOP;
break;

case enums.VerticalAlignment.center:
case enums.VerticalAlignment.middle:
gravity |= android.view.Gravity.CENTER_VERTICAL;
break;

case enums.VerticalAlignment.bottom:
gravity |= android.view.Gravity.BOTTOM;
break;

case enums.VerticalAlignment.stretch:
gravity |= android.view.Gravity.FILL_VERTICAL;
if (height < 0) {
height = -1;
}
break;

default:
throw new Error("Invalid verticalAlignment value: " + params.verticalAlignment);
}
var lp = nativeView.getLayoutParams();
lp.width = Math.round(width);
lp.height = Math.round(height);
if (lp instanceof org.nativescript.widgets.CommonLayoutParams) {
lp.widthPercent = params.widthPercent;
lp.heightPercent = params.heightPercent;
lp.leftMarginPercent = params.leftMarginPercent;
lp.topMarginPercent = params.topMarginPercent;
lp.rightMarginPercent = params.rightMarginPercent;
lp.bottomMarginPercent = params.bottomMarginPercent;
lp.leftMargin = Math.round(params.leftMargin * utils.layout.getDisplayDensity());
lp.topMargin = Math.round(params.topMargin * utils.layout.getDisplayDensity());
lp.rightMargin = Math.round(params.rightMargin * utils.layout.getDisplayDensity());
lp.bottomMargin = Math.round(params.bottomMargin * utils.layout.getDisplayDensity());
lp.gravity = gravity;
if (lp instanceof org.nativescript.widgets.FlexboxLayout.LayoutParams) {
if (!flexbox) {
flexbox = __webpack_require__(69);
}
flexbox._setAndroidLayoutParams(lp, view);
}
} else {
var layoutParams = lp;
if (types.isDefined(layoutParams.widthPercent)) {
layoutParams.widthPercent = params.widthPercent;
}
if (types.isDefined(layoutParams.heightPercent)) {
layoutParams.heightPercent = params.heightPercent;
}
if (types.isDefined(layoutParams.leftMarginPercent)) {
layoutParams.leftMarginPercent = params.leftMarginPercent;
}
if (types.isDefined(layoutParams.topMarginPercent)) {
layoutParams.topMarginPercent = params.topMarginPercent;
}
if (types.isDefined(layoutParams.rightMarginPercent)) {
layoutParams.rightMarginPercent = params.rightMarginPercent;
}
if (types.isDefined(layoutParams.bottomMarginPercent)) {
layoutParams.bottomMarginPercent = params.bottomMarginPercent;
}
if (types.isDefined(layoutParams.leftMargin)) {
layoutParams.leftMargin = Math.round(params.leftMargin * utils.layout.getDisplayDensity());
}
if (types.isDefined(layoutParams.topMargin)) {
layoutParams.topMargin = Math.round(params.topMargin * utils.layout.getDisplayDensity());
}
if (types.isDefined(layoutParams.rightMargin)) {
layoutParams.rightMargin = Math.round(params.rightMargin * utils.layout.getDisplayDensity());
}
if (types.isDefined(layoutParams.bottomMargin)) {
layoutParams.bottomMargin = Math.round(params.bottomMargin * utils.layout.getDisplayDensity());
}
if (types.isDefined(layoutParams.gravity)) {
layoutParams.gravity = gravity;
}
}
nativeView.setLayoutParams(lp);
};
ViewStyler.resetNativeLayoutParamsProperty = function(view, nativeValue) {
ViewStyler.setNativeLayoutParamsProperty(view, style.nativeLayoutParamsProperty.defaultValue);
};
ViewStyler.getNativePaddingLeft = function(view) {
var density = utils.layout.getDisplayDensity();
return view._nativeView.getPaddingLeft() / density;
};
ViewStyler.getNativePaddingTop = function(view) {
var density = utils.layout.getDisplayDensity();
return view._nativeView.getPaddingTop() / density;
};
ViewStyler.getNativePaddingRight = function(view) {
var density = utils.layout.getDisplayDensity();
return view._nativeView.getPaddingRight() / density;
};
ViewStyler.getNativePaddingBottom = function(view) {
var density = utils.layout.getDisplayDensity();
return view._nativeView.getPaddingBottom() / density;
};
ViewStyler.setNativePaddingLeft = function(view, value) {
var nativeView = view._nativeView;
var density = utils.layout.getDisplayDensity();
var left = (value + view.borderLeftWidth) * density;
var top = nativeView.getPaddingTop();
var right = nativeView.getPaddingRight();
var bottom = nativeView.getPaddingBottom();
nativeView.setPadding(left, top, right, bottom);
};
ViewStyler.setNativePaddingTop = function(view, value) {
var nativeView = view._nativeView;
var density = utils.layout.getDisplayDensity();
var left = nativeView.getPaddingLeft();
var top = (value + view.borderTopWidth) * density;
var right = nativeView.getPaddingRight();
var bottom = nativeView.getPaddingBottom();
nativeView.setPadding(left, top, right, bottom);
};
ViewStyler.setNativePaddingRight = function(view, value) {
var nativeView = view._nativeView;
var density = utils.layout.getDisplayDensity();
var left = nativeView.getPaddingLeft();
var top = nativeView.getPaddingTop();
var right = (value + view.borderRightWidth) * density;
var bottom = nativeView.getPaddingBottom();
nativeView.setPadding(left, top, right, bottom);
};
ViewStyler.setNativePaddingBottom = function(view, value) {
var nativeView = view._nativeView;
var density = utils.layout.getDisplayDensity();
var left = nativeView.getPaddingLeft();
var top = nativeView.getPaddingTop();
var right = nativeView.getPaddingRight();
var bottom = (value + view.borderBottomWidth) * density;
nativeView.setPadding(left, top, right, bottom);
};
ViewStyler.setRotateProperty = function(view, newValue) {
view._nativeView.setRotation(newValue);
};
ViewStyler.resetRotateProperty = function(view, nativeValue) {
view._nativeView.setRotation(float(0));
};
ViewStyler.setScaleXProperty = function(view, newValue) {
view._nativeView.setScaleX(newValue);
};
ViewStyler.resetScaleXProperty = function(view, nativeValue) {
view._nativeView.setScaleX(float(1));
};
ViewStyler.setScaleYProperty = function(view, newValue) {
view._nativeView.setScaleY(newValue);
};
ViewStyler.resetScaleYProperty = function(view, nativeValue) {
view._nativeView.setScaleY(float(1));
};
ViewStyler.setTranslateXProperty = function(view, newValue) {
view._nativeView.setTranslationX(newValue * utils.layout.getDisplayDensity());
};
ViewStyler.resetTranslateXProperty = function(view, nativeValue) {
view._nativeView.setTranslationX(float(0));
};
ViewStyler.setTranslateYProperty = function(view, newValue) {
view._nativeView.setTranslationY(newValue * utils.layout.getDisplayDensity());
};
ViewStyler.resetTranslateYProperty = function(view, nativeValue) {
view._nativeView.setTranslationY(float(0));
};
ViewStyler.getZIndexProperty = function(view) {
return view.android.getZ ? view.android.getZ() : 0;
};
ViewStyler.setZIndexProperty = function(view, newValue) {
if (view.android.setZ) {
view.android.setZ(newValue);
if (view.android instanceof android.widget.Button) {
view.android.setStateListAnimator(null);
}
}
};
ViewStyler.resetZIndexProperty = function(view, nativeValue) {
if (view.android.setZ) {
view.android.setZ(nativeValue);
}
};
ViewStyler.registerHandlers = function() {
style.registerHandler(style.visibilityProperty, new style.StylePropertyChangedHandler(ViewStyler.setVisibilityProperty, ViewStyler.resetVisibilityProperty));
style.registerHandler(style.opacityProperty, new style.StylePropertyChangedHandler(ViewStyler.setOpacityProperty, ViewStyler.resetOpacityProperty));
style.registerHandler(style.minWidthProperty, new style.StylePropertyChangedHandler(ViewStyler.setMinWidthProperty, ViewStyler.resetMinWidthProperty));
style.registerHandler(style.minHeightProperty, new style.StylePropertyChangedHandler(ViewStyler.setMinHeightProperty, ViewStyler.resetMinHeightProperty));
style.registerHandler(style.backgroundInternalProperty, new style.StylePropertyChangedHandler(ViewStyler.setBackgroundAndBorder, ViewStyler.resetBackgroundAndBorder));
style.registerHandler(style.nativeLayoutParamsProperty, new style.StylePropertyChangedHandler(ViewStyler.setNativeLayoutParamsProperty, ViewStyler.resetNativeLayoutParamsProperty));
style.registerHandler(style.paddingLeftProperty, new style.StylePropertyChangedHandler(ViewStyler.setNativePaddingLeft, ViewStyler.setNativePaddingLeft, ViewStyler.getNativePaddingLeft), "TextBase");
style.registerHandler(style.paddingTopProperty, new style.StylePropertyChangedHandler(ViewStyler.setNativePaddingTop, ViewStyler.setNativePaddingTop, ViewStyler.getNativePaddingTop), "TextBase");
style.registerHandler(style.paddingRightProperty, new style.StylePropertyChangedHandler(ViewStyler.setNativePaddingRight, ViewStyler.setNativePaddingRight, ViewStyler.getNativePaddingRight), "TextBase");
style.registerHandler(style.paddingBottomProperty, new style.StylePropertyChangedHandler(ViewStyler.setNativePaddingBottom, ViewStyler.setNativePaddingBottom, ViewStyler.getNativePaddingBottom), "TextBase");
style.registerHandler(style.paddingLeftProperty, new style.StylePropertyChangedHandler(ViewStyler.setNativePaddingLeft, ViewStyler.setNativePaddingLeft, ViewStyler.getNativePaddingLeft), "Button");
style.registerHandler(style.paddingTopProperty, new style.StylePropertyChangedHandler(ViewStyler.setNativePaddingTop, ViewStyler.setNativePaddingTop, ViewStyler.getNativePaddingTop), "Button");
style.registerHandler(style.paddingRightProperty, new style.StylePropertyChangedHandler(ViewStyler.setNativePaddingRight, ViewStyler.setNativePaddingRight, ViewStyler.getNativePaddingRight), "Button");
style.registerHandler(style.paddingBottomProperty, new style.StylePropertyChangedHandler(ViewStyler.setNativePaddingBottom, ViewStyler.setNativePaddingBottom, ViewStyler.getNativePaddingBottom), "Button");
style.registerHandler(style.paddingLeftProperty, new style.StylePropertyChangedHandler(ViewStyler.setNativePaddingLeft, ViewStyler.setNativePaddingLeft, ViewStyler.getNativePaddingLeft), "LayoutBase");
style.registerHandler(style.paddingTopProperty, new style.StylePropertyChangedHandler(ViewStyler.setNativePaddingTop, ViewStyler.setNativePaddingTop, ViewStyler.getNativePaddingTop), "LayoutBase");
style.registerHandler(style.paddingRightProperty, new style.StylePropertyChangedHandler(ViewStyler.setNativePaddingRight, ViewStyler.setNativePaddingRight, ViewStyler.getNativePaddingRight), "LayoutBase");
style.registerHandler(style.paddingBottomProperty, new style.StylePropertyChangedHandler(ViewStyler.setNativePaddingBottom, ViewStyler.setNativePaddingBottom, ViewStyler.getNativePaddingBottom), "LayoutBase");
style.registerHandler(style.rotateProperty, new style.StylePropertyChangedHandler(ViewStyler.setRotateProperty, ViewStyler.resetRotateProperty));
style.registerHandler(style.scaleXProperty, new style.StylePropertyChangedHandler(ViewStyler.setScaleXProperty, ViewStyler.resetScaleXProperty));
style.registerHandler(style.scaleYProperty, new style.StylePropertyChangedHandler(ViewStyler.setScaleYProperty, ViewStyler.resetScaleYProperty));
style.registerHandler(style.translateXProperty, new style.StylePropertyChangedHandler(ViewStyler.setTranslateXProperty, ViewStyler.resetTranslateXProperty));
style.registerHandler(style.translateYProperty, new style.StylePropertyChangedHandler(ViewStyler.setTranslateYProperty, ViewStyler.resetTranslateYProperty));
if (parseInt(platform_1.device.sdkVersion, 10) >= 21) {
style.registerHandler(style.zIndexProperty, new style.StylePropertyChangedHandler(ViewStyler.setZIndexProperty, ViewStyler.resetZIndexProperty, ViewStyler.getZIndexProperty));
}
};
return ViewStyler;
}();
exports.ViewStyler = ViewStyler;
}, function(module, exports, __webpack_require__) {
var types = __webpack_require__(14);
var style = __webpack_require__(15);
var styling = __webpack_require__(59);
var trace = __webpack_require__(16);
var gestures = __webpack_require__(53);
var styleScope = __webpack_require__(60);
var enums = __webpack_require__(24);
var utils = __webpack_require__(27);
var proxy_1 = __webpack_require__(41);
var dependency_observable_1 = __webpack_require__(17);
var special_properties_1 = __webpack_require__(48);
var style_1 = __webpack_require__(15);
var debug_1 = __webpack_require__(67);
special_properties_1.registerSpecialProperty("class", function(instance, propertyValue) {
instance.className = propertyValue;
});
special_properties_1.registerSpecialProperty("text", function(instance, propertyValue) {
instance.set("text", propertyValue);
});
function getEventOrGestureName(name) {
return name.indexOf("on") === 0 ? name.substr(2, name.length - 2) : name;
}
function isEventOrGesture(name, view) {
if (types.isString(name)) {
var eventOrGestureName = getEventOrGestureName(name);
var evt = eventOrGestureName + "Event";
return view.constructor && evt in view.constructor || gestures.fromString(eventOrGestureName.toLowerCase()) !== undefined;
}
return false;
}
exports.isEventOrGesture = isEventOrGesture;
function getViewById(view, id) {
if (!view) {
return undefined;
}
if (view.id === id) {
return view;
}
var retVal;
var descendantsCallback = function(child) {
if (child.id === id) {
retVal = child;
return false;
}
return true;
};
eachDescendant(view, descendantsCallback);
return retVal;
}
exports.getViewById = getViewById;
function eachDescendant(view, callback) {
if (!callback || !view) {
return;
}
var continueIteration;
var localCallback = function(child) {
continueIteration = callback(child);
if (continueIteration) {
child._eachChildView(localCallback);
}
return continueIteration;
};
view._eachChildView(localCallback);
}
exports.eachDescendant = eachDescendant;
function getAncestor(view, criterion) {
var matcher = null;
if (typeof criterion === "string") {
matcher = function(view) {
return view.typeName === criterion;
};
} else {
matcher = function(view) {
return view instanceof criterion;
};
}
for (var parent = view.parent; parent != null; parent = parent.parent) {
if (matcher(parent)) {
return parent;
}
}
return null;
}
exports.getAncestor = getAncestor;
function PseudoClassHandler() {
var pseudoClasses = [];
for (var _i = 0; _i < arguments.length; _i++) {
pseudoClasses[_i - 0] = arguments[_i];
}
var stateEventNames = pseudoClasses.map(function(s) {
return ":" + s;
});
var listeners = Symbol("listeners");
return function(target, propertyKey, descriptor) {
function update(change) {
var prev = this[listeners] || 0;
var next = prev + change;
if (prev <= 0 && next > 0) {
this[propertyKey](true);
} else if (prev > 0 && next <= 0) {
this[propertyKey](false);
}
}
stateEventNames.forEach(function(s) {
return target[s] = update;
});
};
}
exports.PseudoClassHandler = PseudoClassHandler;
var viewIdCounter = 0;
function onCssClassPropertyChanged(data) {
var view = data.object;
var classes = view.cssClasses;
classes.clear();
if (types.isString(data.newValue)) {
data.newValue.split(" ").forEach(function(c) {
return classes.add(c);
});
}
}
var cssClassProperty = new dependency_observable_1.Property("cssClass", "View", new proxy_1.PropertyMetadata(undefined, dependency_observable_1.PropertyMetadataSettings.AffectsStyle, onCssClassPropertyChanged));
var classNameProperty = new dependency_observable_1.Property("className", "View", new proxy_1.PropertyMetadata(undefined, dependency_observable_1.PropertyMetadataSettings.AffectsStyle, onCssClassPropertyChanged));
var idProperty = new dependency_observable_1.Property("id", "View", new proxy_1.PropertyMetadata(undefined, dependency_observable_1.PropertyMetadataSettings.AffectsStyle));
var automationTextProperty = new dependency_observable_1.Property("automationText", "View", new proxy_1.PropertyMetadata(undefined));
var originXProperty = new dependency_observable_1.Property("originX", "View", new proxy_1.PropertyMetadata(.5));
var originYProperty = new dependency_observable_1.Property("originY", "View", new proxy_1.PropertyMetadata(.5));
var isEnabledProperty = new dependency_observable_1.Property("isEnabled", "View", new proxy_1.PropertyMetadata(true));
var isUserInteractionEnabledProperty = new dependency_observable_1.Property("isUserInteractionEnabled", "View", new proxy_1.PropertyMetadata(true));
var View = function(_super) {
__extends(View, _super);
function View() {
_super.call(this, {});
this._isVisibleCache = true;
this._measuredWidth = Number.NaN;
this._measuredHeight = Number.NaN;
this._oldWidthMeasureSpec = Number.NaN;
this._oldHeightMeasureSpec = Number.NaN;
this._oldLeft = 0;
this._oldTop = 0;
this._oldRight = 0;
this._oldBottom = 0;
this._isLayoutValid = false;
this._isAddedToNativeVisualTree = false;
this._gestureObservers = {};
this.cssClasses = new Set();
this.cssPseudoClasses = new Set();
this.pseudoClassAliases = {
highlighted: [ "active", "pressed" ]
};
this._style = new style.Style(this);
this._domId = viewIdCounter++;
this._goToVisualState("normal");
}
View.prototype.getGestureObservers = function(type) {
return this._gestureObservers[type];
};
View.prototype.observe = function(type, callback, thisArg) {
if (!this._gestureObservers[type]) {
this._gestureObservers[type] = [];
}
this._gestureObservers[type].push(gestures.observe(this, type, callback, thisArg));
};
View.prototype.addEventListener = function(arg, callback, thisArg) {
if (types.isString(arg)) {
arg = getEventOrGestureName(arg);
var gesture = gestures.fromString(arg);
if (gesture && !this._isEvent(arg)) {
this.observe(gesture, callback, thisArg);
} else {
var events = arg.split(",");
if (events.length > 0) {
for (var i = 0; i < events.length; i++) {
var evt = events[i].trim();
var gst = gestures.fromString(evt);
if (gst && !this._isEvent(arg)) {
this.observe(gst, callback, thisArg);
} else {
_super.prototype.addEventListener.call(this, evt, callback, thisArg);
}
}
} else {
_super.prototype.addEventListener.call(this, arg, callback, thisArg);
}
}
} else if (types.isNumber(arg)) {
this.observe(arg, callback, thisArg);
}
};
View.prototype.removeEventListener = function(arg, callback, thisArg) {
if (types.isString(arg)) {
var gesture = gestures.fromString(arg);
if (gesture && !this._isEvent(arg)) {
this._disconnectGestureObservers(gesture);
} else {
var events = arg.split(",");
if (events.length > 0) {
for (var i = 0; i < events.length; i++) {
var evt = events[i].trim();
var gst = gestures.fromString(evt);
if (gst && !this._isEvent(arg)) {
this._disconnectGestureObservers(gst);
} else {
_super.prototype.removeEventListener.call(this, evt, callback, thisArg);
}
}
} else {
_super.prototype.removeEventListener.call(this, arg, callback, thisArg);
}
}
} else if (types.isNumber(arg)) {
this._disconnectGestureObservers(arg);
}
};
View.prototype._isEvent = function(name) {
return this.constructor && name + "Event" in this.constructor;
};
View.prototype._disconnectGestureObservers = function(type) {
var observers = this.getGestureObservers(type);
if (observers) {
for (var i = 0; i < observers.length; i++) {
observers[i].disconnect();
}
}
};
View.prototype.getViewById = function(id) {
return getViewById(this, id);
};
Object.defineProperty(View.prototype, "automationText", {
get: function() {
return this._getValue(View.automationTextProperty);
},
set: function(value) {
this._setValue(View.automationTextProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(View.prototype, "borderColor", {
get: function() {
return this.style.borderColor;
},
set: function(value) {
this.style.borderColor = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(View.prototype, "borderTopColor", {
get: function() {
return this.style.borderTopColor;
},
set: function(value) {
this.style.borderTopColor = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(View.prototype, "borderRightColor", {
get: function() {
return this.style.borderRightColor;
},
set: function(value) {
this.style.borderRightColor = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(View.prototype, "borderBottomColor", {
get: function() {
return this.style.borderBottomColor;
},
set: function(value) {
this.style.borderBottomColor = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(View.prototype, "borderLeftColor", {
get: function() {
return this.style.borderLeftColor;
},
set: function(value) {
this.style.borderLeftColor = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(View.prototype, "borderWidth", {
get: function() {
return this.style.borderWidth;
},
set: function(value) {
this.style.borderWidth = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(View.prototype, "borderTopWidth", {
get: function() {
return this.style.borderTopWidth;
},
set: function(value) {
this.style.borderTopWidth = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(View.prototype, "borderRightWidth", {
get: function() {
return this.style.borderRightWidth;
},
set: function(value) {
this.style.borderRightWidth = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(View.prototype, "borderBottomWidth", {
get: function() {
return this.style.borderBottomWidth;
},
set: function(value) {
this.style.borderBottomWidth = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(View.prototype, "borderLeftWidth", {
get: function() {
return this.style.borderLeftWidth;
},
set: function(value) {
this.style.borderLeftWidth = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(View.prototype, "borderRadius", {
get: function() {
return this.style.borderRadius;
},
set: function(value) {
this.style.borderRadius = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(View.prototype, "borderTopLeftRadius", {
get: function() {
return this.style.borderTopLeftRadius;
},
set: function(value) {
this.style.borderTopLeftRadius = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(View.prototype, "borderTopRightRadius", {
get: function() {
return this.style.borderTopRightRadius;
},
set: function(value) {
this.style.borderTopRightRadius = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(View.prototype, "borderBottomRightRadius", {
get: function() {
return this.style.borderBottomRightRadius;
},
set: function(value) {
this.style.borderBottomRightRadius = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(View.prototype, "borderBottomLeftRadius", {
get: function() {
return this.style.borderBottomLeftRadius;
},
set: function(value) {
this.style.borderBottomLeftRadius = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(View.prototype, "color", {
get: function() {
return this.style.color;
},
set: function(value) {
this.style.color = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(View.prototype, "backgroundColor", {
get: function() {
return this.style.backgroundColor;
},
set: function(value) {
this.style.backgroundColor = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(View.prototype, "backgroundImage", {
get: function() {
return this.style.backgroundImage;
},
set: function(value) {
this.style.backgroundImage = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(View.prototype, "minWidth", {
get: function() {
return this.style.minWidth;
},
set: function(value) {
this.style.minWidth = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(View.prototype, "minHeight", {
get: function() {
return this.style.minHeight;
},
set: function(value) {
this.style.minHeight = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(View.prototype, "width", {
get: function() {
return this.style.width;
},
set: function(value) {
this.style.width = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(View.prototype, "height", {
get: function() {
return this.style.height;
},
set: function(value) {
this.style.height = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(View.prototype, "margin", {
get: function() {
return this.style.margin;
},
set: function(value) {
this.style.margin = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(View.prototype, "marginLeft", {
get: function() {
return this.style.marginLeft;
},
set: function(value) {
this.style.marginLeft = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(View.prototype, "marginTop", {
get: function() {
return this.style.marginTop;
},
set: function(value) {
this.style.marginTop = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(View.prototype, "marginRight", {
get: function() {
return this.style.marginRight;
},
set: function(value) {
this.style.marginRight = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(View.prototype, "marginBottom", {
get: function() {
return this.style.marginBottom;
},
set: function(value) {
this.style.marginBottom = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(View.prototype, "horizontalAlignment", {
get: function() {
return this.style.horizontalAlignment;
},
set: function(value) {
this.style.horizontalAlignment = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(View.prototype, "verticalAlignment", {
get: function() {
return this.style.verticalAlignment;
},
set: function(value) {
this.style.verticalAlignment = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(View.prototype, "visibility", {
get: function() {
return this.style.visibility;
},
set: function(value) {
this.style.visibility = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(View.prototype, "opacity", {
get: function() {
return this.style.opacity;
},
set: function(value) {
this.style.opacity = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(View.prototype, "translateX", {
get: function() {
return this.style.translateX;
},
set: function(value) {
this.style.translateX = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(View.prototype, "translateY", {
get: function() {
return this.style.translateY;
},
set: function(value) {
this.style.translateY = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(View.prototype, "scaleX", {
get: function() {
return this.style.scaleX;
},
set: function(value) {
this.style.scaleX = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(View.prototype, "scaleY", {
get: function() {
return this.style.scaleY;
},
set: function(value) {
this.style.scaleY = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(View.prototype, "originX", {
get: function() {
return this._getValue(View.originXProperty);
},
set: function(value) {
this._setValue(View.originXProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(View.prototype, "originY", {
get: function() {
return this._getValue(View.originYProperty);
},
set: function(value) {
this._setValue(View.originYProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(View.prototype, "rotate", {
get: function() {
return this.style.rotate;
},
set: function(value) {
this.style.rotate = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(View.prototype, "isEnabled", {
get: function() {
return this._getValue(View.isEnabledProperty);
},
set: function(value) {
this._setValue(View.isEnabledProperty, value);
if (value === false) {
this._goToVisualState("disabled");
} else {
this._goToVisualState("normal");
}
},
enumerable: true,
configurable: true
});
Object.defineProperty(View.prototype, "page", {
get: function() {
if (this.parent) {
return this.parent.page;
}
return null;
},
enumerable: true,
configurable: true
});
Object.defineProperty(View.prototype, "isUserInteractionEnabled", {
get: function() {
return this._getValue(View.isUserInteractionEnabledProperty);
},
set: function(value) {
this._setValue(View.isUserInteractionEnabledProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(View.prototype, "id", {
get: function() {
return this._getValue(View.idProperty);
},
set: function(value) {
this._setValue(View.idProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(View.prototype, "cssClass", {
get: function() {
return this._getValue(View.cssClassProperty);
},
set: function(value) {
this._setValue(View.cssClassProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(View.prototype, "className", {
get: function() {
return this._getValue(View.cssClassProperty);
},
set: function(value) {
this._setValue(View.cssClassProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(View.prototype, "style", {
get: function() {
return this._style;
},
set: function(value) {
throw new Error("View.style property is read-only.");
},
enumerable: true,
configurable: true
});
Object.defineProperty(View.prototype, "isLayoutRequired", {
get: function() {
return true;
},
enumerable: true,
configurable: true
});
Object.defineProperty(View.prototype, "isLayoutValid", {
get: function() {
return this._isLayoutValid;
},
set: function(value) {
throw new Error("isLayoutValid is read-only property.");
},
enumerable: true,
configurable: true
});
Object.defineProperty(View.prototype, "cssType", {
get: function() {
if (!this._cssType) {
this._cssType = this.typeName.toLowerCase();
}
return this._cssType;
},
enumerable: true,
configurable: true
});
Object.defineProperty(View.prototype, "parent", {
get: function() {
return this._parent;
},
enumerable: true,
configurable: true
});
Object.defineProperty(View.prototype, "isLoaded", {
get: function() {
return this._isLoaded;
},
enumerable: true,
configurable: true
});
View.prototype.onLoaded = function() {
this._isLoaded = true;
this._loadEachChildView();
this._applyStyleFromScope();
this._emit("loaded");
};
View.prototype._loadEachChildView = function() {
if (this._childrenCount > 0) {
var eachChild = function(child) {
child.onLoaded();
return true;
};
this._eachChildView(eachChild);
}
};
View.prototype.onUnloaded = function() {
this._setCssState(null);
this._unloadEachChildView();
this._isLoaded = false;
this._emit("unloaded");
};
View.prototype._unloadEachChildView = function() {
if (this._childrenCount > 0) {
this._eachChildView(function(child) {
if (child.isLoaded) {
child.onUnloaded();
}
return true;
});
}
};
View.prototype._onPropertyChanged = function(property, oldValue, newValue) {
var _this = this;
_super.prototype._onPropertyChanged.call(this, property, oldValue, newValue);
if (this._childrenCount > 0) {
var shouldUpdateInheritableProps = property.inheritable && !(property instanceof styling.Property);
if (shouldUpdateInheritableProps) {
this._updatingInheritedProperties = true;
this._eachChildView(function(child) {
child._setValue(property, _this._getValue(property), dependency_observable_1.ValueSource.Inherited);
return true;
});
this._updatingInheritedProperties = false;
}
}
this._checkMetadataOnPropertyChanged(property.metadata);
};
View.prototype._isInheritedChange = function() {
if (this._updatingInheritedProperties) {
return true;
}
var parentView;
parentView = this.parent;
while (parentView) {
if (parentView._updatingInheritedProperties) {
return true;
}
parentView = parentView.parent;
}
return false;
};
View.prototype._checkMetadataOnPropertyChanged = function(metadata) {
if (metadata.affectsLayout) {
this.requestLayout();
}
if (metadata.affectsStyle) {
this.style._resetCssValues();
this._applyStyleFromScope();
this._eachChildView(function(v) {
v._checkMetadataOnPropertyChanged(metadata);
return true;
});
}
};
View.prototype.measure = function(widthMeasureSpec, heightMeasureSpec) {
this._setCurrentMeasureSpecs(widthMeasureSpec, heightMeasureSpec);
};
View.prototype.layout = function(left, top, right, bottom) {
this._setCurrentLayoutBounds(left, top, right, bottom);
};
View.prototype.getMeasuredWidth = function() {
return this._measuredWidth & utils.layout.MEASURED_SIZE_MASK;
};
View.prototype.getMeasuredHeight = function() {
return this._measuredHeight & utils.layout.MEASURED_SIZE_MASK;
};
View.prototype.getMeasuredState = function() {
return this._measuredWidth & utils.layout.MEASURED_STATE_MASK | this._measuredHeight >> utils.layout.MEASURED_HEIGHT_STATE_SHIFT & utils.layout.MEASURED_STATE_MASK >> utils.layout.MEASURED_HEIGHT_STATE_SHIFT;
};
View.prototype.setMeasuredDimension = function(measuredWidth, measuredHeight) {
this._measuredWidth = measuredWidth;
this._measuredHeight = measuredHeight;
if (trace.enabled) {
trace.write(this + " :setMeasuredDimension: " + measuredWidth + ", " + measuredHeight, trace.categories.Layout);
}
};
View.prototype.requestLayout = function() {
this._isLayoutValid = false;
};
View.prototype.onMeasure = function(widthMeasureSpec, heightMeasureSpec) {};
View.prototype.onLayout = function(left, top, right, bottom) {};
View.prototype.layoutNativeView = function(left, top, right, bottom) {};
View.prototype.getAllAliasedStates = function(name) {
var allStates = [];
allStates.push(name);
if (name in this.pseudoClassAliases) {
for (var i = 0; i < this.pseudoClassAliases[name].length; i++) {
allStates.push(this.pseudoClassAliases[name][i]);
}
}
return allStates;
};
View.prototype.addPseudoClass = function(name) {
var allStates = this.getAllAliasedStates(name);
for (var i = 0; i < allStates.length; i++) {
if (!this.cssPseudoClasses.has(allStates[i])) {
this.cssPseudoClasses.add(allStates[i]);
this.notifyPseudoClassChanged(allStates[i]);
}
}
};
View.prototype.deletePseudoClass = function(name) {
var allStates = this.getAllAliasedStates(name);
for (var i = 0; i < allStates.length; i++) {
if (this.cssPseudoClasses.has(allStates[i])) {
this.cssPseudoClasses.delete(allStates[i]);
this.notifyPseudoClassChanged(allStates[i]);
}
}
};
View.resolveSizeAndState = function(size, specSize, specMode, childMeasuredState) {
var result = size;
switch (specMode) {
case utils.layout.UNSPECIFIED:
result = size;
break;

case utils.layout.AT_MOST:
if (specSize < size) {
result = Math.round(specSize + .499) | utils.layout.MEASURED_STATE_TOO_SMALL;
}
break;

case utils.layout.EXACTLY:
result = specSize;
break;
}
return Math.round(result + .499) | childMeasuredState & utils.layout.MEASURED_STATE_MASK;
};
View.combineMeasuredStates = function(curState, newState) {
return curState | newState;
};
View.layoutChild = function(parent, child, left, top, right, bottom) {
if (!child || !child._isVisible) {
return;
}
var density = utils.layout.getDisplayDensity();
var lp = child.style._getValue(style_1.nativeLayoutParamsProperty);
var childTop;
var childLeft;
var childWidth = child.getMeasuredWidth();
var childHeight = child.getMeasuredHeight();
var vAlignment;
if (lp.height >= 0 && lp.verticalAlignment === enums.VerticalAlignment.stretch) {
vAlignment = enums.VerticalAlignment.center;
} else {
vAlignment = lp.verticalAlignment;
}
var marginTop = lp.topMargin;
var marginBottom = lp.bottomMargin;
var marginLeft = lp.leftMargin;
var marginRight = lp.rightMargin;
switch (vAlignment) {
case enums.VerticalAlignment.top:
childTop = top + marginTop * density;
break;

case enums.VerticalAlignment.center:
case enums.VerticalAlignment.middle:
childTop = top + (bottom - top - childHeight + (marginTop - marginBottom) * density) / 2;
break;

case enums.VerticalAlignment.bottom:
childTop = bottom - childHeight - marginBottom * density;
break;

case enums.VerticalAlignment.stretch:
default:
childTop = top + marginTop * density;
childHeight = bottom - top - (marginTop + marginBottom) * density;
break;
}
var hAlignment;
if (lp.width >= 0 && lp.horizontalAlignment === enums.HorizontalAlignment.stretch) {
hAlignment = enums.HorizontalAlignment.center;
} else {
hAlignment = lp.horizontalAlignment;
}
switch (hAlignment) {
case enums.HorizontalAlignment.left:
childLeft = left + marginLeft * density;
break;

case enums.HorizontalAlignment.center:
childLeft = left + (right - left - childWidth + (marginLeft - marginRight) * density) / 2;
break;

case enums.HorizontalAlignment.right:
childLeft = right - childWidth - marginRight * density;
break;

case enums.HorizontalAlignment.stretch:
default:
childLeft = left + marginLeft * density;
childWidth = right - left - (marginLeft + marginRight) * density;
break;
}
var childRight = Math.round(childLeft + childWidth);
var childBottom = Math.round(childTop + childHeight);
childLeft = Math.round(childLeft);
childTop = Math.round(childTop);
if (trace.enabled) {
trace.write(child.parent + " :layoutChild: " + child + " " + childLeft + ", " + childTop + ", " + childRight + ", " + childBottom, trace.categories.Layout);
}
child.layout(childLeft, childTop, childRight, childBottom);
};
View.measureChild = function(parent, child, widthMeasureSpec, heightMeasureSpec) {
var measureWidth = 0;
var measureHeight = 0;
if (child && child._isVisible) {
var width = utils.layout.getMeasureSpecSize(widthMeasureSpec);
var widthMode = utils.layout.getMeasureSpecMode(widthMeasureSpec);
var height = utils.layout.getMeasureSpecSize(heightMeasureSpec);
var heightMode = utils.layout.getMeasureSpecMode(heightMeasureSpec);
var childWidthMeasureSpec = View.getMeasureSpec(child, width, widthMode, true);
var childHeightMeasureSpec = View.getMeasureSpec(child, height, heightMode, false);
if (trace.enabled) {
trace.write(child.parent + " :measureChild: " + child + " " + utils.layout.measureSpecToString(childWidthMeasureSpec) + ", " + utils.layout.measureSpecToString(childHeightMeasureSpec), trace.categories.Layout);
}
child.measure(childWidthMeasureSpec, childHeightMeasureSpec);
measureWidth = child.getMeasuredWidth();
measureHeight = child.getMeasuredHeight();
var density = utils.layout.getDisplayDensity();
var lp = child.style._getValue(style.nativeLayoutParamsProperty);
measureWidth = Math.round(measureWidth + (lp.leftMargin + lp.rightMargin) * density);
measureHeight = Math.round(measureHeight + (lp.topMargin + lp.bottomMargin) * density);
}
return {
measuredWidth: measureWidth,
measuredHeight: measureHeight
};
};
View.getMeasureSpec = function(view, parentLength, parentSpecMode, horizontal) {
var lp = view.style._getValue(style.nativeLayoutParamsProperty);
var density = utils.layout.getDisplayDensity();
var margins = horizontal ? lp.leftMargin + lp.rightMargin : lp.topMargin + lp.bottomMargin;
margins = Math.round(margins * density);
var resultSize = 0;
var resultMode = 0;
var measureLength = Math.max(0, parentLength - margins);
var childLength = Math.round((horizontal ? lp.width : lp.height) * density);
if (childLength >= 0) {
if (parentSpecMode !== utils.layout.UNSPECIFIED) {
resultSize = Math.min(parentLength, childLength);
} else {
resultSize = childLength;
}
resultMode = utils.layout.EXACTLY;
} else {
switch (parentSpecMode) {
case utils.layout.EXACTLY:
resultSize = measureLength;
var stretched = horizontal ? lp.horizontalAlignment === enums.HorizontalAlignment.stretch : lp.verticalAlignment === enums.VerticalAlignment.stretch;
resultMode = stretched ? utils.layout.EXACTLY : utils.layout.AT_MOST;
break;

case utils.layout.AT_MOST:
resultSize = measureLength;
resultMode = utils.layout.AT_MOST;
break;

case utils.layout.UNSPECIFIED:
resultSize = 0;
resultMode = utils.layout.UNSPECIFIED;
break;
}
}
return utils.layout.makeMeasureSpec(resultSize, resultMode);
};
View.prototype._setCurrentMeasureSpecs = function(widthMeasureSpec, heightMeasureSpec) {
var changed = this._oldWidthMeasureSpec !== widthMeasureSpec || this._oldHeightMeasureSpec !== heightMeasureSpec;
this._oldWidthMeasureSpec = widthMeasureSpec;
this._oldHeightMeasureSpec = heightMeasureSpec;
return changed;
};
View.adjustChildLayoutParams = function(view, widthMeasureSpec, heightMeasureSpec) {
if (!view) {
return;
}
var availableWidth = utils.layout.getMeasureSpecSize(widthMeasureSpec);
var widthSpec = utils.layout.getMeasureSpecMode(widthMeasureSpec);
var availableHeight = utils.layout.getMeasureSpecSize(heightMeasureSpec);
var heightSpec = utils.layout.getMeasureSpecMode(heightMeasureSpec);
var lp = view.style._getValue(style.nativeLayoutParamsProperty);
if (widthSpec !== utils.layout.UNSPECIFIED) {
if (lp.widthPercent > 0) {
lp.width = Math.round(availableWidth * lp.widthPercent);
}
if (lp.leftMarginPercent > 0) {
lp.leftMargin = Math.round(availableWidth * lp.leftMarginPercent);
}
if (lp.rightMarginPercent > 0) {
lp.rightMargin = Math.round(availableWidth * lp.rightMarginPercent);
}
}
if (heightSpec !== utils.layout.UNSPECIFIED) {
if (lp.heightPercent > 0) {
lp.height = Math.round(availableHeight * lp.heightPercent);
}
if (lp.topMarginPercent > 0) {
lp.topMargin = Math.round(availableHeight * lp.topMarginPercent);
}
if (lp.bottomMarginPercent > 0) {
lp.bottomMargin = Math.round(availableHeight * lp.bottomMarginPercent);
}
}
};
View.restoreChildOriginalParams = function(view) {
if (!view) {
return;
}
var lp = view.style._getValue(style.nativeLayoutParamsProperty);
if (lp.widthPercent > 0) {
lp.width = -1;
}
if (lp.heightPercent > 0) {
lp.height = -1;
}
if (lp.leftMarginPercent > 0) {
lp.leftMargin = 0;
}
if (lp.topMarginPercent > 0) {
lp.topMargin = 0;
}
if (lp.rightMarginPercent > 0) {
lp.rightMargin = 0;
}
if (lp.bottomMarginPercent > 0) {
lp.bottomMargin = 0;
}
};
View.prototype._getCurrentLayoutBounds = function() {
return {
left: this._oldLeft,
top: this._oldTop,
right: this._oldRight,
bottom: this._oldBottom
};
};
View.prototype._setCurrentLayoutBounds = function(left, top, right, bottom) {
this._isLayoutValid = true;
var boundsChanged = this._oldLeft !== left || this._oldTop !== top || this._oldRight !== right || this._oldBottom !== bottom;
var sizeChanged = this._oldRight - this._oldLeft !== right - left || this._oldBottom - this._oldTop !== bottom - top;
this._oldLeft = left;
this._oldTop = top;
this._oldRight = right;
this._oldBottom = bottom;
return {
boundsChanged: boundsChanged,
sizeChanged: sizeChanged
};
};
View.prototype._applyStyleFromScope = function() {
var rootPage = this.page;
if (!rootPage || !rootPage.isLoaded) {
return;
}
var scope = rootPage._getStyleScope();
scope.applySelectors(this);
};
View.prototype._applyInlineStyle = function(inlineStyle) {
if (types.isString(inlineStyle)) {
try {
this.style._beginUpdate();
styleScope.applyInlineSyle(this, inlineStyle);
} finally {
this.style._endUpdate();
}
}
};
View.prototype._onAttached = function(context) {};
View.prototype._onDetached = function(force) {};
View.prototype._createUI = function() {};
View.prototype._onContextChanged = function() {};
Object.defineProperty(View.prototype, "_childrenCount", {
get: function() {
return 0;
},
enumerable: true,
configurable: true
});
View.prototype._eachChildView = function(callback) {};
View.prototype._childIndexToNativeChildIndex = function(index) {
return index;
};
View.prototype._getNativeViewsCount = function() {
return this._isAddedToNativeVisualTree ? 1 : 0;
};
View.prototype._eachLayoutView = function(callback) {
return callback(this);
};
View.prototype._addToSuperview = function(superview, index) {
return false;
};
View.prototype._removeFromSuperview = function() {};
View.prototype._addView = function(view, atIndex) {
if (trace.enabled) {
trace.write(this + "._addView(" + view + ", " + atIndex + ")", trace.categories.ViewHierarchy);
}
if (!view) {
throw new Error("Expecting a valid View instance.");
}
if (!(view instanceof View)) {
throw new Error(view + " is not a valid View instance.");
}
if (view._parent) {
throw new Error("View already has a parent. View: " + view + " Parent: " + view._parent);
}
view._parent = this;
this._addViewCore(view, atIndex);
view._parentChanged(null);
};
View.prototype._addViewCore = function(view, atIndex) {
this._propagateInheritableProperties(view);
if (!view._isAddedToNativeVisualTree) {
var nativeIndex = this._childIndexToNativeChildIndex(atIndex);
view._isAddedToNativeVisualTree = this._addViewToNativeVisualTree(view, nativeIndex);
}
if (this._isLoaded) {
view.onLoaded();
}
};
View.prototype._propagateInheritableProperties = function(view) {
view._inheritProperties(this);
view.style._inheritStyleProperties(this);
};
View.prototype._inheritProperties = function(parentView) {
var _this = this;
parentView._eachSetProperty(function(property) {
if (!(property instanceof styling.Property) && property.inheritable) {
var baseValue = parentView._getValue(property);
_this._setValue(property, baseValue, dependency_observable_1.ValueSource.Inherited);
}
return true;
});
};
View.prototype._removeView = function(view) {
if (trace.enabled) {
trace.write(this + "._removeView(" + view + ")", trace.categories.ViewHierarchy);
}
if (view._parent !== this) {
throw new Error("View not added to this instance. View: " + view + " CurrentParent: " + view._parent + " ExpectedParent: " + this);
}
this._removeViewCore(view);
view._parent = undefined;
view._parentChanged(this);
};
View.prototype._removeViewCore = function(view) {
this._removeViewFromNativeVisualTree(view);
if (view.isLoaded) {
view.onUnloaded();
}
view.unsetInheritedProperties();
};
View.prototype.unsetInheritedProperties = function() {
var _this = this;
this._setValue(proxy_1.ProxyObject.bindingContextProperty, undefined, dependency_observable_1.ValueSource.Inherited);
this._eachSetProperty(function(property) {
if (!(property instanceof styling.Property) && property.inheritable) {
_this._resetValue(property, dependency_observable_1.ValueSource.Inherited);
}
return true;
});
};
View.prototype._parentChanged = function(oldParent) {};
View.prototype._addViewToNativeVisualTree = function(view, atIndex) {
if (view._isAddedToNativeVisualTree) {
throw new Error("Child already added to the native visual tree.");
}
return true;
};
View.prototype._removeViewFromNativeVisualTree = function(view) {
view._isAddedToNativeVisualTree = false;
};
View.prototype._syncNativeProperties = function() {
_super.prototype._syncNativeProperties.call(this);
this.style._syncNativeProperties();
};
View.prototype._goToVisualState = function(state) {
if (trace.enabled) {
trace.write(this + " going to state: " + state, trace.categories.Style);
}
if (state === this._visualState) {
return;
}
this.deletePseudoClass(this._visualState);
this._visualState = state;
this.addPseudoClass(state);
};
View.prototype._applyXmlAttribute = function(attribute, value) {
if (attribute === "style") {
this._applyInlineStyle(value);
return true;
}
return false;
};
View.prototype.setInlineStyle = function(style) {
if (!types.isString(style)) {
throw new Error("Parameter should be valid CSS string!");
}
this._applyInlineStyle(style);
};
View.prototype._updateLayout = function() {};
Object.defineProperty(View.prototype, "_nativeView", {
get: function() {
return undefined;
},
enumerable: true,
configurable: true
});
Object.defineProperty(View.prototype, "_isVisible", {
get: function() {
return this._isVisibleCache;
},
enumerable: true,
configurable: true
});
View.prototype._shouldApplyStyleHandlers = function() {
return !!this._nativeView;
};
View.prototype.focus = function() {
return undefined;
};
View.prototype.getLocationInWindow = function() {
return undefined;
};
View.prototype.getLocationOnScreen = function() {
return undefined;
};
View.prototype.getLocationRelativeTo = function(otherView) {
return undefined;
};
View.prototype.getActualSize = function() {
var currentBounds = this._getCurrentLayoutBounds();
if (!currentBounds) {
return undefined;
}
return {
width: utils.layout.toDeviceIndependentPixels(currentBounds.right - currentBounds.left),
height: utils.layout.toDeviceIndependentPixels(currentBounds.bottom - currentBounds.top)
};
};
View.prototype.animate = function(animation) {
return this.createAnimation(animation).play();
};
View.prototype.createAnimation = function(animation) {
var animationModule = __webpack_require__(25);
var that = this;
animation.target = that;
return new animationModule.Animation([ animation ]);
};
View.prototype._registerAnimation = function(animation) {
if (this._registeredAnimations === undefined) {
this._registeredAnimations = new Array();
}
this._registeredAnimations.push(animation);
};
View.prototype._unregisterAnimation = function(animation) {
if (this._registeredAnimations) {
var index_1 = this._registeredAnimations.indexOf(animation);
if (index_1 >= 0) {
this._registeredAnimations.splice(index_1, 1);
}
}
};
View.prototype._unregisterAllAnimations = function() {
if (this._registeredAnimations) {
for (var _i = 0, _a = this._registeredAnimations; _i < _a.length; _i++) {
var animation = _a[_i];
animation.cancel();
}
}
};
View.prototype.toString = function() {
var str = this.typeName;
if (this.id) {
str += "<" + this.id + ">";
} else {
str += "(" + this._domId + ")";
}
var source = debug_1.Source.get(this);
if (source) {
str += "@" + source + ";";
}
return str;
};
View.prototype._setNativeViewFrame = function(nativeView, frame) {};
View.prototype._onStylePropertyChanged = function(property) {};
View.prototype._canApplyNativeProperty = function() {
return !!this._nativeView;
};
View.prototype.notifyPseudoClassChanged = function(pseudoClass) {
this.notify({
eventName: ":" + pseudoClass,
object: this
});
};
View.prototype._setCssState = function(next) {
var _this = this;
var previous = this._cssState;
this._cssState = next;
if (!this._invalidateCssHandler) {
this._invalidateCssHandler = function() {
if (_this._invalidateCssHandlerSuspended) {
return;
}
_this.applyCssState();
};
}
try {
this._invalidateCssHandlerSuspended = true;
if (next) {
next.changeMap.forEach(function(changes, view) {
if (changes.attributes) {
changes.attributes.forEach(function(attribute) {
view.addEventListener(attribute + "Change", _this._invalidateCssHandler);
});
}
if (changes.pseudoClasses) {
changes.pseudoClasses.forEach(function(pseudoClass) {
var eventName = ":" + pseudoClass;
view.addEventListener(":" + pseudoClass, _this._invalidateCssHandler);
if (view[eventName]) {
view[eventName](+1);
}
});
}
});
}
if (previous) {
previous.changeMap.forEach(function(changes, view) {
if (changes.attributes) {
changes.attributes.forEach(function(attribute) {
view.removeEventListener("onPropertyChanged:" + attribute, _this._invalidateCssHandler);
});
}
if (changes.pseudoClasses) {
changes.pseudoClasses.forEach(function(pseudoClass) {
var eventName = ":" + pseudoClass;
view.removeEventListener(eventName, _this._invalidateCssHandler);
if (view[eventName]) {
view[eventName](-1);
}
});
}
});
}
} finally {
this._invalidateCssHandlerSuspended = false;
}
this.applyCssState();
};
View.prototype.applyCssState = function() {
if (!this._cssState) {
return;
}
this.style._beginUpdate();
this._cssState.apply();
this.style._endUpdate();
};
View.loadedEvent = "loaded";
View.unloadedEvent = "unloaded";
View.automationTextProperty = automationTextProperty;
View.idProperty = idProperty;
View.cssClassProperty = cssClassProperty;
View.classNameProperty = classNameProperty;
View.originXProperty = originXProperty;
View.originYProperty = originYProperty;
View.isEnabledProperty = isEnabledProperty;
View.isUserInteractionEnabledProperty = isUserInteractionEnabledProperty;
return View;
}(proxy_1.ProxyObject);
exports.View = View;
}, function(module, exports) {
function isString(value) {
return typeof value === "string" || value instanceof String;
}
exports.isString = isString;
function isNumber(value) {
return typeof value === "number" || value instanceof Number;
}
exports.isNumber = isNumber;
function isBoolean(value) {
return typeof value === "boolean" || value instanceof Boolean;
}
exports.isBoolean = isBoolean;
function isFunction(value) {
if (!value) {
return false;
}
return typeof value === "function";
}
exports.isFunction = isFunction;
function isObject(value) {
if (!value) {
return false;
}
return typeof value === "object";
}
exports.isObject = isObject;
function isUndefined(value) {
return typeof value === "undefined";
}
exports.isUndefined = isUndefined;
function isDefined(value) {
return typeof value !== "undefined";
}
exports.isDefined = isDefined;
function isNullOrUndefined(value) {
return typeof value === "undefined" || value === null;
}
exports.isNullOrUndefined = isNullOrUndefined;
function verifyCallback(value) {
if (value && !isFunction(value)) {
throw new TypeError("Callback must be a valid function.");
}
}
exports.verifyCallback = verifyCallback;
var classInfosMap = new Map();
var funcNameRegex = /function ([_a-zA-Z0-9]{1,})\(/;
function getClass(object) {
return getClassInfo(object).name;
}
exports.getClass = getClass;
function getClassInfo(object) {
var constructor = object.constructor;
var result = classInfosMap.get(constructor);
if (!result) {
result = new ClassInfo(constructor);
classInfosMap.set(constructor, result);
}
return result;
}
exports.getClassInfo = getClassInfo;
function getBaseClasses(object) {
var result = [];
var info = getClassInfo(object);
while (info) {
result.push(info.name);
info = info.baseClassInfo;
}
return result;
}
exports.getBaseClasses = getBaseClasses;
var ClassInfo = function() {
function ClassInfo(typeCosntructor) {
this._typeCosntructor = typeCosntructor;
}
Object.defineProperty(ClassInfo.prototype, "name", {
get: function() {
if (!this._name) {
var results = funcNameRegex.exec(this._typeCosntructor.toString());
this._name = results && results.length > 1 ? results[1] : "";
}
return this._name;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ClassInfo.prototype, "baseClassInfo", {
get: function() {
if (isUndefined(this._baseClassInfo)) {
this._baseClassInfo = ClassInfo._getBase(this);
if (this._baseClassInfo && this._baseClassInfo.name === this.name) {
this._baseClassInfo = ClassInfo._getBase(this._baseClassInfo);
}
}
return this._baseClassInfo;
},
enumerable: true,
configurable: true
});
ClassInfo._getBase = function(info) {
var result = null;
var constructorProto = info._typeCosntructor.prototype;
if (constructorProto.__proto__) {
result = getClassInfo(constructorProto.__proto__);
}
return result;
};
return ClassInfo;
}();
exports.ClassInfo = ClassInfo;
function toUIString(obj) {
return isNullOrUndefined(obj) ? "" : obj + "";
}
exports.toUIString = toUIString;
}, function(module, exports, __webpack_require__) {
var application = __webpack_require__(3);
var types = __webpack_require__(14);
var trace = __webpack_require__(16);
var dependency_observable_1 = __webpack_require__(17);
var color_1 = __webpack_require__(19);
var styleProperty = __webpack_require__(22);
var converters = __webpack_require__(23);
var enums = __webpack_require__(24);
var utils = __webpack_require__(27);
var font = __webpack_require__(30);
var background = __webpack_require__(36);
var platform = __webpack_require__(35);
var imageSource;
function ensureImageSource() {
if (!imageSource) {
imageSource = __webpack_require__(55);
}
}
var _registeredHandlers = Array();
var _handlersCache = {};
var noStylingClasses = {};
var AffectsLayout = platform.device.os === platform.platformNames.android ? dependency_observable_1.PropertyMetadataSettings.None : dependency_observable_1.PropertyMetadataSettings.AffectsLayout;
function parseMargin(value) {
if (types.isString(value)) {
var arr = value.split(/[ ,]+/);
var top = void 0;
var right = void 0;
var bottom = void 0;
var left = void 0;
if (arr.length === 1) {
top = right = bottom = left = arr[0];
} else if (arr.length === 2) {
top = bottom = arr[0];
right = left = arr[1];
} else if (arr.length === 3) {
top = arr[0];
right = left = arr[1];
bottom = arr[2];
} else if (arr.length === 4) {
top = arr[0];
right = arr[1];
bottom = arr[2];
left = arr[3];
} else {
throw new Error("Invalid value for margin: " + value);
}
return {
top: top,
right: right,
bottom: bottom,
left: left
};
} else if (types.isNumber(value)) {
return {
top: value,
right: value,
bottom: value,
left: value
};
} else {
return value;
}
}
function layoutParamsComparer(x, y) {
return x.width === y.width && x.height === y.height && x.leftMargin === y.leftMargin && x.topMargin === y.topMargin && x.rightMargin === y.rightMargin && x.bottomMargin === y.bottomMargin && x.horizontalAlignment === y.horizontalAlignment && x.verticalAlignment === y.verticalAlignment && x.widthPercent === y.widthPercent && x.heightPercent === y.heightPercent && x.leftMarginPercent === y.leftMarginPercent && x.topMarginPercent === y.topMarginPercent && x.rightMarginPercent === y.rightMarginPercent && x.bottomMarginPercent === y.bottomMarginPercent;
}
function onLayoutParamsChanged(data) {
var style = data.object;
var widthValue = convertToPercentHelper(style.width);
var width;
var widthPercent;
if (widthValue.isPercent) {
width = style.horizontalAlignment === enums.HorizontalAlignment.stretch ? -1 : -2;
widthPercent = widthValue.value / 100;
} else {
width = isNaN(widthValue.value) ? -1 : widthValue.value;
widthPercent = -1;
}
var heightValue = convertToPercentHelper(style.height);
var height;
var heightPercent;
if (heightValue.isPercent) {
height = style.verticalAlignment === enums.VerticalAlignment.stretch ? -1 : -2;
heightPercent = heightValue.value / 100;
} else {
height = isNaN(heightValue.value) ? -1 : heightValue.value;
heightPercent = -1;
}
var marginLeftValue = convertToPercentHelper(style.marginLeft);
var marginTopValue = convertToPercentHelper(style.marginTop);
var marginRightValue = convertToPercentHelper(style.marginRight);
var marginBottomValue = convertToPercentHelper(style.marginBottom);
var layoutParams = {
width: width,
height: height,
widthPercent: widthPercent,
heightPercent: heightPercent,
leftMargin: marginLeftValue.isPercent ? 0 : marginLeftValue.value,
leftMarginPercent: marginLeftValue.isPercent ? marginLeftValue.value / 100 : -1,
topMargin: marginTopValue.isPercent ? 0 : marginTopValue.value,
topMarginPercent: marginTopValue.isPercent ? marginTopValue.value / 100 : -1,
rightMargin: marginRightValue.isPercent ? 0 : marginRightValue.value,
rightMarginPercent: marginRightValue.isPercent ? marginRightValue.value / 100 : -1,
bottomMargin: marginBottomValue.isPercent ? 0 : marginBottomValue.value,
bottomMarginPercent: marginBottomValue.isPercent ? marginBottomValue.value / 100 : -1,
horizontalAlignment: style.horizontalAlignment,
verticalAlignment: style.verticalAlignment
};
style._setValue(exports.nativeLayoutParamsProperty, layoutParams);
}
function onPaddingValueChanged(data) {
var style = data.object;
var thickness = {
top: style.paddingTop,
right: style.paddingRight,
bottom: style.paddingBottom,
left: style.paddingLeft
};
style._setValue(exports.nativePaddingsProperty, thickness);
}
function thicknessComparer(x, y) {
if (x && y) {
return x.left === y.left && x.top === y.top && x.right === y.right && x.bottom === y.bottom;
}
return !x === !y;
}
function convertToPercentHelper(value) {
var numberValue = 0;
var isPercent = false;
var isError = true;
if (types.isString(value)) {
var stringValue = value.trim();
var percentIndex = stringValue.indexOf("%");
if (percentIndex !== -1) {
if (percentIndex !== stringValue.length - 1 || percentIndex === 0) {
numberValue = 0;
} else {
isPercent = true;
numberValue = converters.numberConverter(stringValue.substring(0, stringValue.length - 1).trim());
isError = numberValue === 0;
}
} else {
isError = false;
isPercent = false;
numberValue = converters.numberConverter(stringValue);
}
} else if (types.isNumber(value)) {
isError = false;
isPercent = false;
numberValue = value;
}
return {
isError: isError,
isPercent: isPercent,
value: numberValue
};
}
function numberOrPercentConverter(value) {
var result = convertToPercentHelper(value);
if (result.isError) {
throw new Error("Invalid value: " + value);
}
return result.isPercent ? value : result.value;
}
function isWidthHeightValid(value) {
var result = convertToPercentHelper(value);
if (result.isError) {
return false;
}
return isNaN(result.value) || result.value >= 0 && isFinite(result.value);
}
function isMinWidthHeightValid(value) {
return !isNaN(value) && value >= 0 && isFinite(value);
}
function getHandlerInternal(propertyId, classInfo) {
var className = classInfo ? classInfo.name : "default";
var handlerKey = className + propertyId;
var result = _handlersCache[handlerKey];
if (types.isDefined(result)) {
return result;
}
var propertyHandlers = _registeredHandlers[propertyId];
if (noStylingClasses.hasOwnProperty(className) || !propertyHandlers) {
result = null;
} else if (propertyHandlers.hasOwnProperty(className)) {
result = propertyHandlers[className];
} else if (classInfo) {
result = getHandlerInternal(propertyId, classInfo.baseClassInfo);
} else {
result = null;
}
_handlersCache[handlerKey] = result;
return result;
}
function isVisibilityValid(value) {
return value === enums.Visibility.visible || value === enums.Visibility.collapse || value === enums.Visibility.collapsed;
}
function isTextDecorationValid(value) {
var values = (value + "").split(" ");
return values.indexOf(enums.TextDecoration.none) !== -1 || values.indexOf(enums.TextDecoration.underline) !== -1 || values.indexOf(enums.TextDecoration.lineThrough) !== -1;
}
function isTextTransformValid(value) {
return value === enums.TextTransform.none || value === enums.TextTransform.uppercase || value === enums.TextTransform.lowercase || value === enums.TextTransform.capitalize;
}
function isWhiteSpaceValid(value) {
return value === enums.WhiteSpace.nowrap || value === enums.WhiteSpace.normal;
}
function isNonNegativeFiniteNumber(value) {
return isFinite(value) && !isNaN(value) && value >= 0;
}
var supportedPaths = [ "rect", "circle", "ellipse", "polygon", "inset" ];
function isClipPathValid(value) {
if (!value) {
return true;
}
var functionName = value.substring(0, value.indexOf("(")).trim();
return supportedPaths.indexOf(functionName) !== -1;
}
function isMarginValid(value) {
var result = convertToPercentHelper(value);
if (result.isError) {
return false;
}
return isFinite(result.value) && !isNaN(result.value);
}
function isOpacityValid(value) {
var parsedValue = parseFloat(value);
return !isNaN(parsedValue) && 0 <= parsedValue && parsedValue <= 1;
}
function isFloatValueValid(value) {
var parsedValue = parseFloat(value);
return !isNaN(parsedValue);
}
function isFontWeightValid(value) {
if (!value) {
console.trace();
}
return value === enums.FontWeight.thin || value === enums.FontWeight.extraLight || value === enums.FontWeight.light || value === enums.FontWeight.normal || value === "400" || value === enums.FontWeight.medium || value === enums.FontWeight.semiBold || value === enums.FontWeight.bold || value === "700" || value === enums.FontWeight.extraBold || value === enums.FontWeight.black;
}
function isFontStyleValid(value) {
return value === enums.FontStyle.normal || value === enums.FontStyle.italic;
}
function onVisibilityChanged(data) {
data.object._view._isVisibleCache = data.newValue === enums.Visibility.visible;
}
function onFontFamilyChanged(data) {
var style = data.object;
var currentFont = style._getValue(exports.fontInternalProperty);
if (currentFont.fontFamily !== data.newValue) {
style._setValue(exports.fontInternalProperty, currentFont.withFontFamily(data.newValue));
}
}
function onFontStyleChanged(data) {
var style = data.object;
var currentFont = style._getValue(exports.fontInternalProperty);
if (currentFont.fontStyle !== data.newValue) {
style._setValue(exports.fontInternalProperty, currentFont.withFontStyle(data.newValue));
}
}
function onFontWeightChanged(data) {
var style = data.object;
var currentFont = style._getValue(exports.fontInternalProperty);
if (currentFont.fontWeight !== data.newValue) {
style._setValue(exports.fontInternalProperty, currentFont.withFontWeight(data.newValue));
}
}
function onFontSizeChanged(data) {
var style = data.object;
var currentFont = style._getValue(exports.fontInternalProperty);
if (currentFont.fontSize !== data.newValue) {
style._setValue(exports.fontInternalProperty, currentFont.withFontSize(data.newValue));
}
}
var Style = function(_super) {
__extends(Style, _super);
function Style(parentView) {
_super.call(this);
this._updateCounter = 0;
this._nativeSetters = new Map();
this._view = parentView;
}
Object.defineProperty(Style.prototype, "rotate", {
get: function() {
return this._getValue(exports.rotateProperty);
},
set: function(value) {
this._setValue(exports.rotateProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(Style.prototype, "scaleX", {
get: function() {
return this._getValue(exports.scaleXProperty);
},
set: function(value) {
this._setValue(exports.scaleXProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(Style.prototype, "scaleY", {
get: function() {
return this._getValue(exports.scaleYProperty);
},
set: function(value) {
this._setValue(exports.scaleYProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(Style.prototype, "translateX", {
get: function() {
return this._getValue(exports.translateXProperty);
},
set: function(value) {
this._setValue(exports.translateXProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(Style.prototype, "translateY", {
get: function() {
return this._getValue(exports.translateYProperty);
},
set: function(value) {
this._setValue(exports.translateYProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(Style.prototype, "color", {
get: function() {
return this._getValue(exports.colorProperty);
},
set: function(value) {
this._setValue(exports.colorProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(Style.prototype, "tintColor", {
get: function() {
return this._getValue(exports.tintColorProperty);
},
set: function(value) {
this._setValue(exports.tintColorProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(Style.prototype, "placeholderColor", {
get: function() {
return this._getValue(exports.placeholderColorProperty);
},
set: function(value) {
this._setValue(exports.placeholderColorProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(Style.prototype, "backgroundColor", {
get: function() {
return this._getValue(exports.backgroundColorProperty);
},
set: function(value) {
this._setValue(exports.backgroundColorProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(Style.prototype, "backgroundImage", {
get: function() {
return this._getValue(exports.backgroundImageProperty);
},
set: function(value) {
this._setValue(exports.backgroundImageProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(Style.prototype, "backgroundRepeat", {
get: function() {
return this._getValue(exports.backgroundRepeatProperty);
},
set: function(value) {
this._setValue(exports.backgroundRepeatProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(Style.prototype, "backgroundSize", {
get: function() {
return this._getValue(exports.backgroundSizeProperty);
},
set: function(value) {
this._setValue(exports.backgroundSizeProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(Style.prototype, "backgroundPosition", {
get: function() {
return this._getValue(exports.backgroundPositionProperty);
},
set: function(value) {
this._setValue(exports.backgroundPositionProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(Style.prototype, "borderColor", {
get: function() {
if (color_1.Color.equals(this.borderTopColor, this.borderRightColor) && color_1.Color.equals(this.borderTopColor, this.borderBottomColor) && color_1.Color.equals(this.borderTopColor, this.borderLeftColor)) {
return this.borderTopColor;
} else {
return this.borderTopColor + " " + this.borderRightColor + " " + this.borderBottomColor + " " + this.borderLeftColor;
}
},
set: function(value) {
if (value instanceof color_1.Color) {
value = value.hex;
}
this._setShorthandProperty("border-color", value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(Style.prototype, "borderTopColor", {
get: function() {
return this._getValue(exports.borderTopColorProperty);
},
set: function(value) {
this._setValue(exports.borderTopColorProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(Style.prototype, "borderRightColor", {
get: function() {
return this._getValue(exports.borderRightColorProperty);
},
set: function(value) {
this._setValue(exports.borderRightColorProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(Style.prototype, "borderBottomColor", {
get: function() {
return this._getValue(exports.borderBottomColorProperty);
},
set: function(value) {
this._setValue(exports.borderBottomColorProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(Style.prototype, "borderLeftColor", {
get: function() {
return this._getValue(exports.borderLeftColorProperty);
},
set: function(value) {
this._setValue(exports.borderLeftColorProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(Style.prototype, "borderWidth", {
get: function() {
if (this.borderTopWidth === this.borderRightWidth && this.borderTopWidth === this.borderBottomWidth && this.borderTopWidth === this.borderLeftWidth) {
return this.borderTopWidth;
} else {
return this.borderTopWidth + " " + this.borderRightWidth + " " + this.borderBottomWidth + " " + this.borderLeftWidth;
}
},
set: function(value) {
this._setShorthandProperty("border-width", value.toString());
},
enumerable: true,
configurable: true
});
Object.defineProperty(Style.prototype, "borderTopWidth", {
get: function() {
return this._getValue(exports.borderTopWidthProperty);
},
set: function(value) {
this._setValue(exports.borderTopWidthProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(Style.prototype, "borderRightWidth", {
get: function() {
return this._getValue(exports.borderRightWidthProperty);
},
set: function(value) {
this._setValue(exports.borderRightWidthProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(Style.prototype, "borderBottomWidth", {
get: function() {
return this._getValue(exports.borderBottomWidthProperty);
},
set: function(value) {
this._setValue(exports.borderBottomWidthProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(Style.prototype, "borderLeftWidth", {
get: function() {
return this._getValue(exports.borderLeftWidthProperty);
},
set: function(value) {
this._setValue(exports.borderLeftWidthProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(Style.prototype, "borderRadius", {
get: function() {
if (this.borderTopLeftRadius === this.borderTopRightRadius && this.borderTopLeftRadius === this.borderBottomRightRadius && this.borderTopLeftRadius === this.borderBottomLeftRadius) {
return this.borderTopLeftRadius;
} else {
return this.borderTopLeftRadius + " " + this.borderTopRightRadius + " " + this.borderBottomRightRadius + " " + this.borderBottomLeftRadius;
}
},
set: function(value) {
this._setShorthandProperty("border-radius", value.toString());
},
enumerable: true,
configurable: true
});
Object.defineProperty(Style.prototype, "borderTopLeftRadius", {
get: function() {
return this._getValue(exports.borderTopLeftRadiusProperty);
},
set: function(value) {
this._setValue(exports.borderTopLeftRadiusProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(Style.prototype, "borderTopRightRadius", {
get: function() {
return this._getValue(exports.borderTopRightRadiusProperty);
},
set: function(value) {
this._setValue(exports.borderTopRightRadiusProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(Style.prototype, "borderBottomRightRadius", {
get: function() {
return this._getValue(exports.borderBottomRightRadiusProperty);
},
set: function(value) {
this._setValue(exports.borderBottomRightRadiusProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(Style.prototype, "borderBottomLeftRadius", {
get: function() {
return this._getValue(exports.borderBottomLeftRadiusProperty);
},
set: function(value) {
this._setValue(exports.borderBottomLeftRadiusProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(Style.prototype, "clipPath", {
get: function() {
return this._getValue(exports.clipPathProperty);
},
set: function(value) {
this._setValue(exports.clipPathProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(Style.prototype, "fontSize", {
get: function() {
return this._getValue(exports.fontSizeProperty);
},
set: function(value) {
this._setValue(exports.fontSizeProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(Style.prototype, "fontFamily", {
get: function() {
return this._getValue(exports.fontFamilyProperty);
},
set: function(value) {
this._setValue(exports.fontFamilyProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(Style.prototype, "fontStyle", {
get: function() {
return this._getValue(exports.fontStyleProperty);
},
set: function(value) {
this._setValue(exports.fontStyleProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(Style.prototype, "fontWeight", {
get: function() {
return this._getValue(exports.fontWeightProperty);
},
set: function(value) {
var stringValue = value ? value.toString() : undefined;
this._setValue(exports.fontWeightProperty, stringValue);
},
enumerable: true,
configurable: true
});
Object.defineProperty(Style.prototype, "font", {
get: function() {
return this.fontStyle + " " + this.fontWeight + " " + this.fontSize + " " + this.fontFamily;
},
set: function(value) {
this._setShorthandProperty("font", value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(Style.prototype, "_fontInternal", {
get: function() {
return this._getValue(exports.fontInternalProperty);
},
set: function(value) {
this._setValue(exports.fontInternalProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(Style.prototype, "textAlignment", {
get: function() {
return this._getValue(exports.textAlignmentProperty);
},
set: function(value) {
this._setValue(exports.textAlignmentProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(Style.prototype, "minWidth", {
get: function() {
return this._getValue(exports.minWidthProperty);
},
set: function(value) {
this._setValue(exports.minWidthProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(Style.prototype, "minHeight", {
get: function() {
return this._getValue(exports.minHeightProperty);
},
set: function(value) {
this._setValue(exports.minHeightProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(Style.prototype, "width", {
get: function() {
return this._getValue(exports.widthProperty);
},
set: function(value) {
this._setValue(exports.widthProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(Style.prototype, "height", {
get: function() {
return this._getValue(exports.heightProperty);
},
set: function(value) {
this._setValue(exports.heightProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(Style.prototype, "margin", {
get: function() {
return this.marginTop + " " + this.marginRight + " " + this.marginBottom + " " + this.marginLeft;
},
set: function(value) {
this._setShorthandProperty("margin", value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(Style.prototype, "marginLeft", {
get: function() {
return this._getValue(exports.marginLeftProperty);
},
set: function(value) {
this._setValue(exports.marginLeftProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(Style.prototype, "marginTop", {
get: function() {
return this._getValue(exports.marginTopProperty);
},
set: function(value) {
this._setValue(exports.marginTopProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(Style.prototype, "marginRight", {
get: function() {
return this._getValue(exports.marginRightProperty);
},
set: function(value) {
this._setValue(exports.marginRightProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(Style.prototype, "marginBottom", {
get: function() {
return this._getValue(exports.marginBottomProperty);
},
set: function(value) {
this._setValue(exports.marginBottomProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(Style.prototype, "padding", {
get: function() {
return this.paddingTop + " " + this.paddingRight + " " + this.paddingBottom + " " + this.paddingLeft;
},
set: function(value) {
this._setShorthandProperty("padding", value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(Style.prototype, "paddingLeft", {
get: function() {
return this._getValue(exports.paddingLeftProperty);
},
set: function(value) {
this._setValue(exports.paddingLeftProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(Style.prototype, "paddingTop", {
get: function() {
return this._getValue(exports.paddingTopProperty);
},
set: function(value) {
this._setValue(exports.paddingTopProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(Style.prototype, "paddingRight", {
get: function() {
return this._getValue(exports.paddingRightProperty);
},
set: function(value) {
this._setValue(exports.paddingRightProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(Style.prototype, "paddingBottom", {
get: function() {
return this._getValue(exports.paddingBottomProperty);
},
set: function(value) {
this._setValue(exports.paddingBottomProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(Style.prototype, "horizontalAlignment", {
get: function() {
return this._getValue(exports.horizontalAlignmentProperty);
},
set: function(value) {
this._setValue(exports.horizontalAlignmentProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(Style.prototype, "verticalAlignment", {
get: function() {
return this._getValue(exports.verticalAlignmentProperty);
},
set: function(value) {
this._setValue(exports.verticalAlignmentProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(Style.prototype, "visibility", {
get: function() {
return this._getValue(exports.visibilityProperty);
},
set: function(value) {
this._setValue(exports.visibilityProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(Style.prototype, "opacity", {
get: function() {
return this._getValue(exports.opacityProperty);
},
set: function(value) {
this._setValue(exports.opacityProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(Style.prototype, "textDecoration", {
get: function() {
return this._getValue(exports.textDecorationProperty);
},
set: function(value) {
this._setValue(exports.textDecorationProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(Style.prototype, "textTransform", {
get: function() {
return this._getValue(exports.textTransformProperty);
},
set: function(value) {
this._setValue(exports.textTransformProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(Style.prototype, "whiteSpace", {
get: function() {
return this._getValue(exports.whiteSpaceProperty);
},
set: function(value) {
this._setValue(exports.whiteSpaceProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(Style.prototype, "letterSpacing", {
get: function() {
return this._getValue(exports.letterSpacingProperty);
},
set: function(value) {
this._setValue(exports.letterSpacingProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(Style.prototype, "zIndex", {
get: function() {
return this._getValue(exports.zIndexProperty);
},
set: function(value) {
this._setValue(exports.zIndexProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(Style.prototype, "statusBarStyle", {
get: function() {
return this._getValue(exports.statusBarStyleProperty);
},
set: function(value) {
this._setValue(exports.statusBarStyleProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(Style.prototype, "androidStatusBarBackground", {
get: function() {
return this._getValue(exports.androidStatusBarBackgroundProperty);
},
set: function(value) {
this._setValue(exports.androidStatusBarBackgroundProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(Style.prototype, "tabTextColor", {
get: function() {
return this._getValue(exports.tabTextColorProperty);
},
set: function(value) {
this._setValue(exports.tabTextColorProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(Style.prototype, "tabBackgroundColor", {
get: function() {
return this._getValue(exports.tabBackgroundColorProperty);
},
set: function(value) {
this._setValue(exports.tabBackgroundColorProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(Style.prototype, "selectedTabTextColor", {
get: function() {
return this._getValue(exports.selectedTabTextColorProperty);
},
set: function(value) {
this._setValue(exports.selectedTabTextColorProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(Style.prototype, "androidSelectedTabHighlightColor", {
get: function() {
return this._getValue(exports.androidSelectedTabHighlightColorProperty);
},
set: function(value) {
this._setValue(exports.androidSelectedTabHighlightColorProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(Style.prototype, "selectedBackgroundColor", {
get: function() {
return this._getValue(exports.selectedBackgroundColorProperty);
},
set: function(value) {
this._setValue(exports.selectedBackgroundColorProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(Style.prototype, "separatorColor", {
get: function() {
return this._getValue(exports.separatorColorProperty);
},
set: function(value) {
this._setValue(exports.separatorColorProperty, value);
},
enumerable: true,
configurable: true
});
Style.prototype._updateTextDecoration = function() {
if (this._getValue(exports.textDecorationProperty) !== enums.TextDecoration.none) {
this._applyProperty(exports.textDecorationProperty, this._getValue(exports.textDecorationProperty));
}
};
Style.prototype._updateTextTransform = function() {
if (this._getValue(exports.textTransformProperty) !== enums.TextTransform.none) {
this._applyProperty(exports.textTransformProperty, this._getValue(exports.textTransformProperty));
}
};
Style.prototype._beginUpdate = function() {
this._updateCounter++;
};
Style.prototype._endUpdate = function() {
var _this = this;
this._updateCounter--;
if (this._updateCounter < 0) {
throw new Error("style._endUpdate() called, but no update is in progress.");
}
if (this._updateCounter === 0) {
this._nativeSetters.forEach(function(newValue, property, map) {
_this._applyStyleProperty(property, newValue);
});
this._nativeSetters.clear();
}
};
Style.prototype._resetCssValues = function() {
this._view._unregisterAllAnimations();
this._resetValues(dependency_observable_1.ValueSource.Css);
};
Style.prototype._resetLocalValues = function() {
this._resetValues(dependency_observable_1.ValueSource.Local);
};
Style.prototype._inheritStyleProperties = function(parent) {
var _this = this;
parent.style._eachSetPropertyValue(function(property, value) {
if (property.inheritable) {
_this._setValue(property, value, dependency_observable_1.ValueSource.Inherited);
}
return true;
});
};
Style.prototype._onPropertyChanged = function(property, oldValue, newValue) {
if (trace.enabled) {
trace.write("Style._onPropertyChanged view:" + this._view + ", property: " + property.name + ", oldValue: " + oldValue + ", newValue: " + newValue, trace.categories.Style);
}
_super.prototype._onPropertyChanged.call(this, property, oldValue, newValue);
this._view._checkMetadataOnPropertyChanged(property.metadata);
this._applyProperty(property, newValue);
};
Style.prototype._sizeChanged = function() {
if (!this._getValue(exports.backgroundInternalProperty).isEmpty()) {
this._applyStyleProperty(exports.backgroundInternalProperty, this._getValue(exports.backgroundInternalProperty));
}
var clipPathPropertyValue = this._getValue(exports.clipPathProperty);
if (types.isString(clipPathPropertyValue) && clipPathPropertyValue !== "") {
this._applyStyleProperty(exports.clipPathProperty, clipPathPropertyValue);
}
};
Style.prototype._syncNativeProperties = function() {
var _this = this;
this._eachSetPropertyValue(function(property, value) {
_this._applyStyleProperty(property, value);
return true;
});
};
Style.prototype._applyProperty = function(property, newValue) {
this._applyStyleProperty(property, newValue);
if (property.inheritable && this._view._childrenCount > 0) {
this._view._eachChildView(function(child) {
child.style._setValue(property, newValue, dependency_observable_1.ValueSource.Inherited);
return true;
});
}
};
Style.prototype._applyStyleProperty = function(property, newValue) {
if (!this._view._shouldApplyStyleHandlers()) {
return;
}
if (this._updateCounter > 0) {
this._nativeSetters.set(property, newValue);
return;
}
var handler = getHandler(property, this._view);
if (!handler) {
if (trace.enabled) {
trace.write("No handler for property: " + property.name + " with id: " + property.id + ", view:" + this._view, trace.categories.Style);
}
} else {
if (trace.enabled) {
trace.write("Found handler for property: " + property.name + ", view:" + this._view, trace.categories.Style);
}
var shouldReset = false;
if (property.equalityComparer) {
shouldReset = property.equalityComparer(newValue, property.defaultValue);
} else {
shouldReset = newValue === property.defaultValue;
}
if (shouldReset) {
handler.resetProperty(property, this._view);
} else {
handler.applyProperty(property, this._view, newValue);
}
this._view._onStylePropertyChanged(property);
}
};
Object.defineProperty(Style.prototype, "_nativeView", {
get: function() {
return this._view._nativeView;
},
enumerable: true,
configurable: true
});
Style.prototype._setShorthandProperty = function(name, value) {
var pairs = styleProperty.getShorthandPairs(name, value);
if (pairs) {
this._beginUpdate();
for (var j = 0; j < pairs.length; j++) {
var pair = pairs[j];
this._setValue(pair.property, pair.value, dependency_observable_1.ValueSource.Local);
}
this._endUpdate();
}
};
return Style;
}(dependency_observable_1.DependencyObservable);
exports.Style = Style;
function registerHandler(property, handler, className) {
var realClassName = className ? className : "default";
var handlerRecord = _registeredHandlers[property.id];
if (!handlerRecord) {
handlerRecord = {};
_registeredHandlers[property.id] = handlerRecord;
}
handlerRecord[realClassName] = handler;
}
exports.registerHandler = registerHandler;
function registerNoStylingClass(className) {
noStylingClasses[className] = 1;
}
exports.registerNoStylingClass = registerNoStylingClass;
function getHandler(property, view) {
return getHandlerInternal(property.id, types.getClassInfo(view));
}
exports.getHandler = getHandler;
exports.rotateProperty = new styleProperty.Property("rotate", "rotate", new dependency_observable_1.PropertyMetadata(undefined, dependency_observable_1.PropertyMetadataSettings.None, null));
exports.scaleXProperty = new styleProperty.Property("scaleX", "scaleX", new dependency_observable_1.PropertyMetadata(undefined, dependency_observable_1.PropertyMetadataSettings.None, null));
exports.scaleYProperty = new styleProperty.Property("scaleY", "scaleY", new dependency_observable_1.PropertyMetadata(undefined, dependency_observable_1.PropertyMetadataSettings.None, null));
exports.translateXProperty = new styleProperty.Property("translateX", "translateX", new dependency_observable_1.PropertyMetadata(undefined, dependency_observable_1.PropertyMetadataSettings.None, null));
exports.translateYProperty = new styleProperty.Property("translateY", "translateY", new dependency_observable_1.PropertyMetadata(undefined, dependency_observable_1.PropertyMetadataSettings.None, null));
exports.colorProperty = new styleProperty.Property("color", "color", new dependency_observable_1.PropertyMetadata(undefined, dependency_observable_1.PropertyMetadataSettings.Inheritable, undefined, color_1.Color.isValid, color_1.Color.equals), converters.colorConverter);
exports.tintColorProperty = new styleProperty.Property("tintColor", "tint-color", new dependency_observable_1.PropertyMetadata(undefined, dependency_observable_1.PropertyMetadataSettings.Inheritable, undefined, color_1.Color.isValid, color_1.Color.equals), converters.colorConverter);
exports.placeholderColorProperty = new styleProperty.Property("placeholderColor", "placeholder-color", new dependency_observable_1.PropertyMetadata(undefined, dependency_observable_1.PropertyMetadataSettings.None, undefined, color_1.Color.isValid, color_1.Color.equals), converters.colorConverter);
exports.fontSizeProperty = new styleProperty.Property("fontSize", "font-size", new dependency_observable_1.PropertyMetadata(undefined, dependency_observable_1.PropertyMetadataSettings.Inheritable, onFontSizeChanged), converters.fontSizeConverter);
exports.fontFamilyProperty = new styleProperty.Property("fontFamily", "font-family", new dependency_observable_1.PropertyMetadata(undefined, dependency_observable_1.PropertyMetadataSettings.Inheritable, onFontFamilyChanged));
exports.fontStyleProperty = new styleProperty.Property("fontStyle", "font-style", new dependency_observable_1.PropertyMetadata(enums.FontStyle.normal, dependency_observable_1.PropertyMetadataSettings.Inheritable, onFontStyleChanged, isFontStyleValid));
exports.fontWeightProperty = new styleProperty.Property("fontWeight", "font-weight", new dependency_observable_1.PropertyMetadata(enums.FontWeight.normal, dependency_observable_1.PropertyMetadataSettings.Inheritable, onFontWeightChanged, isFontWeightValid));
exports.fontInternalProperty = new styleProperty.Property("_fontInternal", "_fontInternal", new dependency_observable_1.PropertyMetadata(font.Font.default, AffectsLayout, null, null, font.Font.equals), font.Font.parse);
exports.textAlignmentProperty = new styleProperty.Property("textAlignment", "text-align", new dependency_observable_1.PropertyMetadata(undefined, AffectsLayout | dependency_observable_1.PropertyMetadataSettings.Inheritable), converters.textAlignConverter);
exports.minWidthProperty = new styleProperty.Property("minWidth", "min-width", new dependency_observable_1.PropertyMetadata(0, AffectsLayout, null, isMinWidthHeightValid), converters.numberConverter);
exports.minHeightProperty = new styleProperty.Property("minHeight", "min-height", new dependency_observable_1.PropertyMetadata(0, AffectsLayout, null, isMinWidthHeightValid), converters.numberConverter);
exports.visibilityProperty = new styleProperty.Property("visibility", "visibility", new dependency_observable_1.PropertyMetadata(enums.Visibility.visible, AffectsLayout, onVisibilityChanged, isVisibilityValid), converters.visibilityConverter);
exports.opacityProperty = new styleProperty.Property("opacity", "opacity", new dependency_observable_1.PropertyMetadata(1, dependency_observable_1.PropertyMetadataSettings.None, undefined, isOpacityValid), converters.opacityConverter);
exports.textDecorationProperty = new styleProperty.Property("textDecoration", "text-decoration", new dependency_observable_1.PropertyMetadata(enums.TextDecoration.none, dependency_observable_1.PropertyMetadataSettings.None, undefined, isTextDecorationValid), converters.textDecorationConverter);
exports.textTransformProperty = new styleProperty.Property("textTransform", "text-transform", new dependency_observable_1.PropertyMetadata(enums.TextTransform.none, dependency_observable_1.PropertyMetadataSettings.None, undefined, isTextTransformValid), converters.textTransformConverter);
exports.whiteSpaceProperty = new styleProperty.Property("whiteSpace", "white-space", new dependency_observable_1.PropertyMetadata(undefined, AffectsLayout, undefined, isWhiteSpaceValid), converters.whiteSpaceConverter);
exports.letterSpacingProperty = new styleProperty.Property("letterSpacing", "letter-spacing", new dependency_observable_1.PropertyMetadata(Number.NaN, AffectsLayout, undefined, isFloatValueValid), converters.floatConverter);
exports.zIndexProperty = new styleProperty.Property("zIndex", "z-index", new dependency_observable_1.PropertyMetadata(Number.NaN, AffectsLayout, undefined, isFloatValueValid), converters.floatConverter);
exports.tabTextColorProperty = new styleProperty.Property("tabTextColor", "tab-text-color", new dependency_observable_1.PropertyMetadata(undefined, dependency_observable_1.PropertyMetadataSettings.None, undefined, color_1.Color.isValid, color_1.Color.equals), converters.colorConverter);
exports.tabBackgroundColorProperty = new styleProperty.Property("tabBackgroundColor", "tab-background-color", new dependency_observable_1.PropertyMetadata(undefined, dependency_observable_1.PropertyMetadataSettings.None, undefined, color_1.Color.isValid, color_1.Color.equals), converters.colorConverter);
exports.selectedTabTextColorProperty = new styleProperty.Property("selectedTabTextColor", "selected-tab-text-color", new dependency_observable_1.PropertyMetadata(undefined, dependency_observable_1.PropertyMetadataSettings.None, undefined, color_1.Color.isValid, color_1.Color.equals), converters.colorConverter);
exports.androidSelectedTabHighlightColorProperty = new styleProperty.Property("androidSelectedTabHighlightColor", "android-selected-tab-highlight-color", new dependency_observable_1.PropertyMetadata(undefined, dependency_observable_1.PropertyMetadataSettings.None, undefined, color_1.Color.isValid, color_1.Color.equals), converters.colorConverter);
exports.statusBarStyleProperty = new styleProperty.Property("statusBarStyle", "status-bar-style", new dependency_observable_1.PropertyMetadata(undefined));
exports.androidStatusBarBackgroundProperty = new styleProperty.Property("androidStatusBarBackground", "android-status-bar-background", new dependency_observable_1.PropertyMetadata(undefined, dependency_observable_1.PropertyMetadataSettings.None, undefined, color_1.Color.isValid, color_1.Color.equals), converters.colorConverter);
exports.selectedBackgroundColorProperty = new styleProperty.Property("selectedBackgroundColor", "selected-background-color", new dependency_observable_1.PropertyMetadata(undefined, dependency_observable_1.PropertyMetadataSettings.None, undefined, color_1.Color.isValid, color_1.Color.equals), converters.colorConverter);
exports.separatorColorProperty = new styleProperty.Property("separatorColor", "separator-color", new dependency_observable_1.PropertyMetadata(undefined, dependency_observable_1.PropertyMetadataSettings.None, undefined, color_1.Color.isValid, color_1.Color.equals), converters.colorConverter);
exports.nativeLayoutParamsProperty = new styleProperty.Property("nativeLayoutParams", "nativeLayoutParams", new dependency_observable_1.PropertyMetadata({
width: -1,
widthPercent: -1,
height: -1,
heightPercent: -1,
leftMargin: 0,
leftMarginPercent: -1,
topMargin: 0,
topMarginPercent: -1,
rightMargin: 0,
rightMarginPercent: -1,
bottomMargin: 0,
bottomMarginPercent: -1,
horizontalAlignment: enums.HorizontalAlignment.stretch,
verticalAlignment: enums.VerticalAlignment.stretch
}, null, null, null, layoutParamsComparer));
exports.widthProperty = new styleProperty.Property("width", "width", new dependency_observable_1.PropertyMetadata(Number.NaN, AffectsLayout, onLayoutParamsChanged, isWidthHeightValid), numberOrPercentConverter);
exports.heightProperty = new styleProperty.Property("height", "height", new dependency_observable_1.PropertyMetadata(Number.NaN, AffectsLayout, onLayoutParamsChanged, isWidthHeightValid), numberOrPercentConverter);
exports.marginLeftProperty = new styleProperty.Property("marginLeft", "margin-left", new dependency_observable_1.PropertyMetadata(0, AffectsLayout, onLayoutParamsChanged, isMarginValid), numberOrPercentConverter);
exports.marginRightProperty = new styleProperty.Property("marginRight", "margin-right", new dependency_observable_1.PropertyMetadata(0, AffectsLayout, onLayoutParamsChanged, isMarginValid), numberOrPercentConverter);
exports.marginTopProperty = new styleProperty.Property("marginTop", "margin-top", new dependency_observable_1.PropertyMetadata(0, AffectsLayout, onLayoutParamsChanged, isMarginValid), numberOrPercentConverter);
exports.marginBottomProperty = new styleProperty.Property("marginBottom", "margin-bottom", new dependency_observable_1.PropertyMetadata(0, AffectsLayout, onLayoutParamsChanged, isMarginValid), numberOrPercentConverter);
exports.verticalAlignmentProperty = new styleProperty.Property("verticalAlignment", "vertical-align", new dependency_observable_1.PropertyMetadata(enums.VerticalAlignment.stretch, AffectsLayout, onLayoutParamsChanged));
exports.horizontalAlignmentProperty = new styleProperty.Property("horizontalAlignment", "horizontal-align", new dependency_observable_1.PropertyMetadata(enums.HorizontalAlignment.stretch, AffectsLayout, onLayoutParamsChanged));
function getNativePadding(nativeView, callback) {
return {
result: nativeView ? callback(nativeView) / utils.layout.getDisplayDensity() : 0,
cacheable: !!nativeView
};
}
function getNativePaddingLeft(instance) {
var nativeView = instance._nativeView;
return getNativePadding(nativeView, function(view) {
return view.getPaddingLeft();
});
}
function getNativePaddingTop(instance) {
var nativeView = instance._nativeView;
return getNativePadding(nativeView, function(view) {
return view.getPaddingTop();
});
}
function getNativePaddingRight(instance) {
var nativeView = instance._nativeView;
return getNativePadding(nativeView, function(view) {
return view.getPaddingRight();
});
}
function getNativePaddingBottom(instance) {
var nativeView = instance._nativeView;
return getNativePadding(nativeView, function(view) {
return view.getPaddingBottom();
});
}
exports.nativePaddingsProperty = new styleProperty.Property("paddingNative", "paddingNative", new dependency_observable_1.PropertyMetadata(undefined, null, null, null, thicknessComparer));
var defaultPadding = platform.isAndroid ? undefined : 0;
exports.paddingLeftProperty = new styleProperty.Property("paddingLeft", "padding-left", new dependency_observable_1.PropertyMetadata(defaultPadding, AffectsLayout, onPaddingValueChanged, isNonNegativeFiniteNumber), converters.numberConverter);
exports.paddingRightProperty = new styleProperty.Property("paddingRight", "padding-right", new dependency_observable_1.PropertyMetadata(defaultPadding, AffectsLayout, onPaddingValueChanged, isNonNegativeFiniteNumber), converters.numberConverter);
exports.paddingTopProperty = new styleProperty.Property("paddingTop", "padding-top", new dependency_observable_1.PropertyMetadata(defaultPadding, AffectsLayout, onPaddingValueChanged, isNonNegativeFiniteNumber), converters.numberConverter);
exports.paddingBottomProperty = new styleProperty.Property("paddingBottom", "padding-bottom", new dependency_observable_1.PropertyMetadata(defaultPadding, AffectsLayout, onPaddingValueChanged, isNonNegativeFiniteNumber), converters.numberConverter);
if (platform.device.os === platform.platformNames.android) {
exports.paddingTopProperty.defaultValueGetter = getNativePaddingTop;
exports.paddingLeftProperty.defaultValueGetter = getNativePaddingLeft;
exports.paddingRightProperty.defaultValueGetter = getNativePaddingRight;
exports.paddingBottomProperty.defaultValueGetter = getNativePaddingBottom;
}
function onPaddingChanged(value) {
var thickness = parseThickness(value);
var array = new Array();
array.push({
property: exports.paddingTopProperty,
value: thickness.top
});
array.push({
property: exports.paddingRightProperty,
value: thickness.right
});
array.push({
property: exports.paddingBottomProperty,
value: thickness.bottom
});
array.push({
property: exports.paddingLeftProperty,
value: thickness.left
});
return array;
}
function onMarginChanged(value) {
var thickness = parseMargin(value);
var array = new Array();
array.push({
property: exports.marginTopProperty,
value: thickness.top
});
array.push({
property: exports.marginRightProperty,
value: thickness.right
});
array.push({
property: exports.marginBottomProperty,
value: thickness.bottom
});
array.push({
property: exports.marginLeftProperty,
value: thickness.left
});
return array;
}
function onFontChanged(value) {
var newFont = font.Font.parse(value);
var array = new Array();
array.push({
property: exports.fontFamilyProperty,
value: newFont.fontFamily
});
array.push({
property: exports.fontStyleProperty,
value: newFont.fontStyle
});
array.push({
property: exports.fontWeightProperty,
value: newFont.fontWeight
});
array.push({
property: exports.fontSizeProperty,
value: newFont.fontSize
});
return array;
}
function onTransformChanged(value) {
var newTransform = converters.transformConverter(value);
var array = new Array();
var values = undefined;
for (var transform in newTransform) {
switch (transform) {
case "scaleX":
array.push({
property: exports.scaleXProperty,
value: parseFloat(newTransform[transform])
});
break;

case "scaleY":
array.push({
property: exports.scaleYProperty,
value: parseFloat(newTransform[transform])
});
break;

case "scale":
case "scale3d":
values = newTransform[transform].split(",");
if (values.length >= 2) {
array.push({
property: exports.scaleXProperty,
value: parseFloat(values[0])
});
array.push({
property: exports.scaleYProperty,
value: parseFloat(values[1])
});
} else if (values.length === 1) {
array.push({
property: exports.scaleXProperty,
value: parseFloat(values[0])
});
array.push({
property: exports.scaleYProperty,
value: parseFloat(values[0])
});
}
break;

case "translateX":
array.push({
property: exports.translateXProperty,
value: parseFloat(newTransform[transform])
});
break;

case "translateY":
array.push({
property: exports.translateYProperty,
value: parseFloat(newTransform[transform])
});
break;

case "translate":
case "translate3d":
values = newTransform[transform].split(",");
if (values.length >= 2) {
array.push({
property: exports.translateXProperty,
value: parseFloat(values[0])
});
array.push({
property: exports.translateYProperty,
value: parseFloat(values[1])
});
} else if (values.length === 1) {
array.push({
property: exports.translateXProperty,
value: parseFloat(values[0])
});
array.push({
property: exports.translateYProperty,
value: parseFloat(values[0])
});
}
break;

case "rotate":
var text = newTransform[transform];
var val = parseFloat(text);
if (text.slice(-3) === "rad") {
val = val * (180 / Math.PI);
}
array.push({
property: exports.rotateProperty,
value: val
});
break;

case "none":
array.push({
property: exports.scaleXProperty,
value: 1
});
array.push({
property: exports.scaleYProperty,
value: 1
});
array.push({
property: exports.translateXProperty,
value: 0
});
array.push({
property: exports.translateYProperty,
value: 0
});
array.push({
property: exports.rotateProperty,
value: 0
});
break;
}
}
return array;
}
styleProperty.registerShorthandCallback("font", onFontChanged);
styleProperty.registerShorthandCallback("margin", onMarginChanged);
styleProperty.registerShorthandCallback("padding", onPaddingChanged);
styleProperty.registerShorthandCallback("transform", onTransformChanged);
var _defaultNativeValuesCache = {};
var StylePropertyChangedHandler = function() {
function StylePropertyChangedHandler(applyCallback, resetCallback, getNativeValue) {
this._applyProperty = applyCallback;
this._resetProperty = resetCallback;
this._getNativeValue = getNativeValue;
}
StylePropertyChangedHandler.prototype.applyProperty = function(property, view, newValue) {
var className = types.getClass(view);
if (!_defaultNativeValuesCache.hasOwnProperty(className + property.id) && this._getNativeValue) {
_defaultNativeValuesCache[className + property.id] = this._getNativeValue(view);
}
if (application.android) {
newValue = types.isDefined(newValue.android) ? newValue.android : newValue;
} else if (application.ios) {
newValue = types.isDefined(newValue.ios) ? newValue.ios : newValue;
}
this._applyProperty(view, newValue, _defaultNativeValuesCache[className + property.id]);
};
StylePropertyChangedHandler.prototype.resetProperty = function(property, view) {
var className = types.getClass(view);
this._resetProperty(view, _defaultNativeValuesCache[className + property.id]);
};
return StylePropertyChangedHandler;
}();
exports.StylePropertyChangedHandler = StylePropertyChangedHandler;
exports.ignorePropertyHandler = new StylePropertyChangedHandler(function(view, val) {}, function(view, val) {});
registerNoStylingClass("Frame");
function onBackgroundColorPropertyChanged(data) {
var style = data.object;
var currentBackground = style._getValue(exports.backgroundInternalProperty);
if (!color_1.Color.equals(currentBackground.color, data.newValue)) {
style._setValue(exports.backgroundInternalProperty, currentBackground.withColor(data.newValue));
}
}
function onBackgroundImagePropertyChanged(data) {
var style = data.object;
var url = data.newValue;
var currentBackground = style._getValue(exports.backgroundInternalProperty);
var isValid = false;
if (types.isString(data.newValue)) {
var pattern = /url\(('|")(.*?)\1\)/;
var match = url.match(pattern);
if (match && match[2]) {
url = match[2];
}
ensureImageSource();
if (utils.isDataURI(url)) {
var base64Data = url.split(",")[1];
if (types.isDefined(base64Data)) {
style._setValue(exports.backgroundInternalProperty, currentBackground.withImage(imageSource.fromBase64(base64Data)));
isValid = true;
}
} else if (utils.isFileOrResourcePath(url)) {
style._setValue(exports.backgroundInternalProperty, currentBackground.withImage(imageSource.fromFileOrResource(url)));
isValid = true;
} else if (url.indexOf("http") !== -1) {
style["_url"] = url;
style._setValue(exports.backgroundInternalProperty, currentBackground.withImage(undefined));
imageSource.fromUrl(url).then(function(r) {
if (style && style["_url"] === url) {
currentBackground = style._getValue(exports.backgroundInternalProperty);
style._setValue(exports.backgroundInternalProperty, currentBackground.withImage(r));
}
});
isValid = true;
}
}
if (!isValid) {
style._setValue(exports.backgroundInternalProperty, currentBackground.withImage(undefined));
}
}
function onBackgroundRepeatPropertyChanged(data) {
var style = data.object;
var currentBackground = style._getValue(exports.backgroundInternalProperty);
if (data.newValue !== currentBackground.repeat) {
style._setValue(exports.backgroundInternalProperty, currentBackground.withRepeat(data.newValue));
}
}
function onBackgroundPositionPropertyChanged(data) {
var style = data.object;
var currentBackground = style._getValue(exports.backgroundInternalProperty);
if (data.newValue !== currentBackground.position) {
style._setValue(exports.backgroundInternalProperty, currentBackground.withPosition(data.newValue));
}
}
function onBackgroundSizePropertyChanged(data) {
var style = data.object;
var currentBackground = style._getValue(exports.backgroundInternalProperty);
if (data.newValue !== currentBackground.size) {
style._setValue(exports.backgroundInternalProperty, currentBackground.withSize(data.newValue));
}
}
function onBorderTopColorPropertyChanged(data) {
var style = data.object;
var currentBackground = style._getValue(exports.backgroundInternalProperty);
if (data.newValue !== currentBackground.borderTopColor) {
style._setValue(exports.backgroundInternalProperty, currentBackground.withBorderTopColor(data.newValue));
}
}
function onBorderRightColorPropertyChanged(data) {
var style = data.object;
var currentBackground = style._getValue(exports.backgroundInternalProperty);
if (data.newValue !== currentBackground.borderRightColor) {
style._setValue(exports.backgroundInternalProperty, currentBackground.withBorderRightColor(data.newValue));
}
}
function onBorderBottomColorPropertyChanged(data) {
var style = data.object;
var currentBackground = style._getValue(exports.backgroundInternalProperty);
if (data.newValue !== currentBackground.borderBottomColor) {
style._setValue(exports.backgroundInternalProperty, currentBackground.withBorderBottomColor(data.newValue));
}
}
function onBorderLeftColorPropertyChanged(data) {
var style = data.object;
var currentBackground = style._getValue(exports.backgroundInternalProperty);
if (data.newValue !== currentBackground.borderLeftColor) {
style._setValue(exports.backgroundInternalProperty, currentBackground.withBorderLeftColor(data.newValue));
}
}
function onBorderTopWidthPropertyChanged(data) {
var style = data.object;
var currentBackground = style._getValue(exports.backgroundInternalProperty);
if (data.newValue !== currentBackground.borderTopWidth) {
style._setValue(exports.backgroundInternalProperty, currentBackground.withBorderTopWidth(data.newValue));
}
}
function onBorderRightWidthPropertyChanged(data) {
var style = data.object;
var currentBackground = style._getValue(exports.backgroundInternalProperty);
if (data.newValue !== currentBackground.borderRightWidth) {
style._setValue(exports.backgroundInternalProperty, currentBackground.withBorderRightWidth(data.newValue));
}
}
function onBorderBottomWidthPropertyChanged(data) {
var style = data.object;
var currentBackground = style._getValue(exports.backgroundInternalProperty);
if (data.newValue !== currentBackground.borderBottomWidth) {
style._setValue(exports.backgroundInternalProperty, currentBackground.withBorderBottomWidth(data.newValue));
}
}
function onBorderLeftWidthPropertyChanged(data) {
var style = data.object;
var currentBackground = style._getValue(exports.backgroundInternalProperty);
if (data.newValue !== currentBackground.borderLeftWidth) {
style._setValue(exports.backgroundInternalProperty, currentBackground.withBorderLeftWidth(data.newValue));
}
}
function onBorderTopLeftRadiusPropertyChanged(data) {
var style = data.object;
var currentBackground = style._getValue(exports.backgroundInternalProperty);
if (data.newValue !== currentBackground.borderTopLeftRadius) {
style._setValue(exports.backgroundInternalProperty, currentBackground.withBorderTopLeftRadius(data.newValue));
}
}
function onBorderTopRightRadiusPropertyChanged(data) {
var style = data.object;
var currentBackground = style._getValue(exports.backgroundInternalProperty);
if (data.newValue !== currentBackground.borderTopRightRadius) {
style._setValue(exports.backgroundInternalProperty, currentBackground.withBorderTopRightRadius(data.newValue));
}
}
function onBorderBottomRightRadiusPropertyChanged(data) {
var style = data.object;
var currentBackground = style._getValue(exports.backgroundInternalProperty);
if (data.newValue !== currentBackground.borderBottomRightRadius) {
style._setValue(exports.backgroundInternalProperty, currentBackground.withBorderBottomRightRadius(data.newValue));
}
}
function onBorderBottomLeftRadiusPropertyChanged(data) {
var style = data.object;
var currentBackground = style._getValue(exports.backgroundInternalProperty);
if (data.newValue !== currentBackground.borderBottomLeftRadius) {
style._setValue(exports.backgroundInternalProperty, currentBackground.withBorderBottomLeftRadius(data.newValue));
}
}
function onClipPathPropertyChanged(data) {
var style = data.object;
var currentBackground = style._getValue(exports.backgroundInternalProperty);
if (data.newValue !== currentBackground.clipPath) {
style._setValue(exports.backgroundInternalProperty, currentBackground.withClipPath(data.newValue));
}
}
exports.backgroundInternalProperty = new styleProperty.Property("_backgroundInternal", "_backgroundInternal", new dependency_observable_1.PropertyMetadata(background.Background.default, dependency_observable_1.PropertyMetadataSettings.None, undefined, undefined, background.Background.equals));
exports.backgroundImageProperty = new styleProperty.Property("backgroundImage", "background-image", new dependency_observable_1.PropertyMetadata(undefined, dependency_observable_1.PropertyMetadataSettings.None, onBackgroundImagePropertyChanged));
exports.backgroundColorProperty = new styleProperty.Property("backgroundColor", "background-color", new dependency_observable_1.PropertyMetadata(undefined, dependency_observable_1.PropertyMetadataSettings.None, onBackgroundColorPropertyChanged, color_1.Color.isValid, color_1.Color.equals), converters.colorConverter);
exports.backgroundRepeatProperty = new styleProperty.Property("backgroundRepeat", "background-repeat", new dependency_observable_1.PropertyMetadata(undefined, dependency_observable_1.PropertyMetadataSettings.None, onBackgroundRepeatPropertyChanged));
exports.backgroundSizeProperty = new styleProperty.Property("backgroundSize", "background-size", new dependency_observable_1.PropertyMetadata(undefined, dependency_observable_1.PropertyMetadataSettings.None, onBackgroundSizePropertyChanged));
exports.backgroundPositionProperty = new styleProperty.Property("backgroundPosition", "background-position", new dependency_observable_1.PropertyMetadata(undefined, dependency_observable_1.PropertyMetadataSettings.None, onBackgroundPositionPropertyChanged));
exports.borderTopColorProperty = new styleProperty.Property("borderTopColor", "border-top-color", new dependency_observable_1.PropertyMetadata(undefined, dependency_observable_1.PropertyMetadataSettings.None, onBorderTopColorPropertyChanged, color_1.Color.isValid, color_1.Color.equals), converters.colorConverter);
exports.borderRightColorProperty = new styleProperty.Property("borderRightColor", "border-right-color", new dependency_observable_1.PropertyMetadata(undefined, dependency_observable_1.PropertyMetadataSettings.None, onBorderRightColorPropertyChanged, color_1.Color.isValid, color_1.Color.equals), converters.colorConverter);
exports.borderBottomColorProperty = new styleProperty.Property("borderBottomColor", "border-bottom-color", new dependency_observable_1.PropertyMetadata(undefined, dependency_observable_1.PropertyMetadataSettings.None, onBorderBottomColorPropertyChanged, color_1.Color.isValid, color_1.Color.equals), converters.colorConverter);
exports.borderLeftColorProperty = new styleProperty.Property("borderLeftColor", "border-left-color", new dependency_observable_1.PropertyMetadata(undefined, dependency_observable_1.PropertyMetadataSettings.None, onBorderLeftColorPropertyChanged, color_1.Color.isValid, color_1.Color.equals), converters.colorConverter);
exports.borderTopWidthProperty = new styleProperty.Property("borderTopWidth", "border-top-width", new dependency_observable_1.PropertyMetadata(0, AffectsLayout, onBorderTopWidthPropertyChanged, isNonNegativeFiniteNumber), converters.numberConverter);
exports.borderRightWidthProperty = new styleProperty.Property("borderRightWidth", "border-right-width", new dependency_observable_1.PropertyMetadata(0, AffectsLayout, onBorderRightWidthPropertyChanged, isNonNegativeFiniteNumber), converters.numberConverter);
exports.borderBottomWidthProperty = new styleProperty.Property("borderBottomWidth", "border-bottom-width", new dependency_observable_1.PropertyMetadata(0, AffectsLayout, onBorderBottomWidthPropertyChanged, isNonNegativeFiniteNumber), converters.numberConverter);
exports.borderLeftWidthProperty = new styleProperty.Property("borderLeftWidth", "border-left-width", new dependency_observable_1.PropertyMetadata(0, AffectsLayout, onBorderLeftWidthPropertyChanged, isNonNegativeFiniteNumber), converters.numberConverter);
exports.borderTopLeftRadiusProperty = new styleProperty.Property("borderTopLeftRadius", "border-top-left-radius", new dependency_observable_1.PropertyMetadata(0, AffectsLayout, onBorderTopLeftRadiusPropertyChanged, isNonNegativeFiniteNumber), converters.numberConverter);
exports.borderTopRightRadiusProperty = new styleProperty.Property("borderTopRightRadius", "border-top-right-radius", new dependency_observable_1.PropertyMetadata(0, AffectsLayout, onBorderTopRightRadiusPropertyChanged, isNonNegativeFiniteNumber), converters.numberConverter);
exports.borderBottomRightRadiusProperty = new styleProperty.Property("borderBottomRightRadius", "border-bottom-right-radius", new dependency_observable_1.PropertyMetadata(0, AffectsLayout, onBorderBottomRightRadiusPropertyChanged, isNonNegativeFiniteNumber), converters.numberConverter);
exports.borderBottomLeftRadiusProperty = new styleProperty.Property("borderBottomLeftRadius", "border-bottom-left-radius", new dependency_observable_1.PropertyMetadata(0, AffectsLayout, onBorderBottomLeftRadiusPropertyChanged, isNonNegativeFiniteNumber), converters.numberConverter);
exports.clipPathProperty = new styleProperty.Property("clipPath", "clip-path", new dependency_observable_1.PropertyMetadata(undefined, AffectsLayout, onClipPathPropertyChanged, isClipPathValid));
function parseThickness(value) {
var result = {
top: 0,
right: 0,
bottom: 0,
left: 0
};
if (types.isString(value)) {
var arr = value.split(/[ ,]+/);
if (arr.length === 1) {
var arr0 = parseInt(arr[0]);
result.top = arr0;
result.right = arr0;
result.bottom = arr0;
result.left = arr0;
} else if (arr.length === 2) {
var arr0 = parseInt(arr[0]);
var arr1 = parseInt(arr[1]);
result.top = arr0;
result.right = arr1;
result.bottom = arr0;
result.left = arr1;
} else if (arr.length === 3) {
var arr0 = parseInt(arr[0]);
var arr1 = parseInt(arr[1]);
var arr2 = parseInt(arr[2]);
result.top = arr0;
result.right = arr1;
result.bottom = arr2;
result.left = arr1;
} else if (arr.length === 4) {
var arr0 = parseInt(arr[0]);
var arr1 = parseInt(arr[1]);
var arr2 = parseInt(arr[2]);
var arr3 = parseInt(arr[3]);
result.top = arr0;
result.right = arr1;
result.bottom = arr2;
result.left = arr3;
}
} else if (types.isNumber(value)) {
result.top = result.right = result.bottom = result.left = value;
} else {
result = value;
}
return result;
}
function parseBorderColor(value) {
var result = {
top: undefined,
right: undefined,
bottom: undefined,
left: undefined
};
try {
if (types.isString(value)) {
if (value.indexOf("rgb") === 0) {
result.top = result.right = result.bottom = result.left = new color_1.Color(value);
return result;
}
var arr = value.split(/[ ,]+/);
if (arr.length === 1) {
var arr0 = new color_1.Color(arr[0]);
result.top = arr0;
result.right = arr0;
result.bottom = arr0;
result.left = arr0;
} else if (arr.length === 2) {
var arr0 = new color_1.Color(arr[0]);
var arr1 = new color_1.Color(arr[1]);
result.top = arr0;
result.right = arr1;
result.bottom = arr0;
result.left = arr1;
} else if (arr.length === 3) {
var arr0 = new color_1.Color(arr[0]);
var arr1 = new color_1.Color(arr[1]);
var arr2 = new color_1.Color(arr[2]);
result.top = arr0;
result.right = arr1;
result.bottom = arr2;
result.left = arr1;
} else if (arr.length === 4) {
var arr0 = new color_1.Color(arr[0]);
var arr1 = new color_1.Color(arr[1]);
var arr2 = new color_1.Color(arr[2]);
var arr3 = new color_1.Color(arr[3]);
result.top = arr0;
result.right = arr1;
result.bottom = arr2;
result.left = arr3;
}
} else if (value instanceof color_1.Color) {
result.top = result.right = result.bottom = result.left = value;
} else {
result = value;
}
} catch (ex) {
if (trace.enabled) {
trace.write("Error parsing border color " + value + ": " + ex + "'", trace.categories.Style, trace.messageType.error);
}
}
return result;
}
function onBorderColorChanged(value) {
var fourColors = parseBorderColor(value);
var array = new Array();
array.push({
property: exports.borderTopColorProperty,
value: fourColors.top
});
array.push({
property: exports.borderRightColorProperty,
value: fourColors.right
});
array.push({
property: exports.borderBottomColorProperty,
value: fourColors.bottom
});
array.push({
property: exports.borderLeftColorProperty,
value: fourColors.left
});
return array;
}
function onBorderWidthChanged(value) {
var thickness = parseThickness(value);
var array = new Array();
array.push({
property: exports.borderTopWidthProperty,
value: thickness.top
});
array.push({
property: exports.borderRightWidthProperty,
value: thickness.right
});
array.push({
property: exports.borderBottomWidthProperty,
value: thickness.bottom
});
array.push({
property: exports.borderLeftWidthProperty,
value: thickness.left
});
return array;
}
function onBorderRadiusChanged(value) {
var thickness = parseThickness(value);
var array = new Array();
array.push({
property: exports.borderTopLeftRadiusProperty,
value: thickness.top
});
array.push({
property: exports.borderTopRightRadiusProperty,
value: thickness.right
});
array.push({
property: exports.borderBottomRightRadiusProperty,
value: thickness.bottom
});
array.push({
property: exports.borderBottomLeftRadiusProperty,
value: thickness.left
});
return array;
}
styleProperty.registerShorthandCallback("border-color", onBorderColorChanged);
styleProperty.registerShorthandCallback("border-width", onBorderWidthChanged);
styleProperty.registerShorthandCallback("border-radius", onBorderRadiusChanged);
}, function(module, exports, __webpack_require__) {
var types = __webpack_require__(14);
exports.enabled = false;
var _categories = {};
var _writers = [];
var _eventListeners = [];
function enable() {
exports.enabled = true;
}
exports.enable = enable;
function disable() {
exports.enabled = false;
}
exports.disable = disable;
function isCategorySet(category) {
return category in _categories;
}
exports.isCategorySet = isCategorySet;
function addWriter(writer) {
_writers.push(writer);
}
exports.addWriter = addWriter;
function removeWriter(writer) {
var index = _writers.indexOf(writer);
if (index >= 0) {
_writers.splice(index, 1);
}
}
exports.removeWriter = removeWriter;
function clearWriters() {
if (_writers.length > 0) {
_writers.splice(0, _writers.length);
}
}
exports.clearWriters = clearWriters;
function setCategories(categories) {
_categories = {};
addCategories(categories);
}
exports.setCategories = setCategories;
function addCategories(categories) {
var split = categories.split(",");
for (var i = 0; i < split.length; i++) {
_categories[split[i].trim()] = true;
}
}
exports.addCategories = addCategories;
function write(message, category, type) {
var i;
if (type === messageType.error) {
for (i = 0; i < _writers.length; i++) {
_writers[i].write(message, category, type);
}
}
if (!exports.enabled) {
return;
}
if (!(category in _categories)) {
return;
}
for (i = 0; i < _writers.length; i++) {
_writers[i].write(message, category, type);
}
}
exports.write = write;
function notifyEvent(object, name, data) {
if (!exports.enabled) {
return;
}
var i, listener, filters;
for (i = 0; i < _eventListeners.length; i++) {
listener = _eventListeners[i];
if (listener.filter) {
filters = listener.filter.split(",");
filters.forEach(function(value) {
if (value.trim() === name) {
listener.on(object, name, data);
}
});
} else {
listener.on(object, name, data);
}
}
}
exports.notifyEvent = notifyEvent;
function addEventListener(listener) {
_eventListeners.push(listener);
}
exports.addEventListener = addEventListener;
function removeEventListener(listener) {
var index = _eventListeners.indexOf(listener);
if (index >= 0) {
_eventListeners.splice(index, 1);
}
}
exports.removeEventListener = removeEventListener;
var messageType;
(function(messageType) {
messageType.log = 0;
messageType.info = 1;
messageType.warn = 2;
messageType.error = 3;
})(messageType = exports.messageType || (exports.messageType = {}));
var categories;
(function(categories) {
categories.VisualTreeEvents = "VisualTreeEvents";
categories.Layout = "Layout";
categories.Style = "Style";
categories.ViewHierarchy = "ViewHierarchy";
categories.NativeLifecycle = "NativeLifecycle";
categories.Debug = "Debug";
categories.Navigation = "Navigation";
categories.Test = "Test";
categories.Binding = "Binding";
categories.BindingError = "BindingError";
categories.Error = "Error";
categories.Animation = "Animation";
categories.Transition = "Transition";
categories.All = categories.VisualTreeEvents + "," + categories.Layout + "," + categories.Style + "," + categories.ViewHierarchy + "," + categories.NativeLifecycle + "," + categories.Debug + "," + categories.Navigation + "," + categories.Test + "," + categories.Binding + "," + categories.Error + "," + categories.Animation + "," + categories.Transition;
categories.separator = ",";
function concat() {
var i;
var result;
for (i = 0; i < arguments.length; i++) {
if (!result) {
result = arguments[i];
continue;
}
result = result.concat(categories.separator, arguments[i]);
}
return result;
}
categories.concat = concat;
})(categories = exports.categories || (exports.categories = {}));
var ConsoleWriter = function() {
function ConsoleWriter() {}
ConsoleWriter.prototype.write = function(message, category, type) {
if (!console) {
return;
}
var msgType;
if (types.isUndefined(type)) {
msgType = messageType.log;
} else {
msgType = type;
}
switch (msgType) {
case messageType.log:
console.log(category + ": " + message);
break;

case messageType.info:
console.info(category + ": " + message);
break;

case messageType.warn:
console.warn(category + ": " + message);
break;

case messageType.error:
console.error(category + ": " + message);
break;
}
};
return ConsoleWriter;
}();
addWriter(new ConsoleWriter());
}, function(module, exports, __webpack_require__) {
var observable_1 = __webpack_require__(18);
var types = __webpack_require__(14);
var propertyFromKey = {};
var propertyIdCounter = 0;
exports.unsetValue = new Object();
function generatePropertyKey(name, ownerType, validate) {
if (validate) {
validateRegisterParameters(name, ownerType);
}
return ownerType + "." + name;
}
function validateRegisterParameters(name, ownerType) {
if (name == null || name.trim().length === 0) {
throw new Error("Name should not be null or empty string.");
}
if (ownerType == null || ownerType.trim().length === 0) {
throw new Error("OwnerType should not be null or empty string.");
}
}
function getPropertyByNameAndType(name, owner) {
var result;
var key;
var classInfo = types.getClassInfo(owner);
while (classInfo) {
key = generatePropertyKey(name, classInfo.name);
result = propertyFromKey[key];
if (result) {
break;
}
classInfo = classInfo.baseClassInfo;
}
return result;
}
var PropertyMetadataSettings;
(function(PropertyMetadataSettings) {
PropertyMetadataSettings.None = 0;
PropertyMetadataSettings.AffectsLayout = 1;
PropertyMetadataSettings.AffectsStyle = 1 << 1;
PropertyMetadataSettings.Inheritable = 1 << 2;
})(PropertyMetadataSettings = exports.PropertyMetadataSettings || (exports.PropertyMetadataSettings = {}));
var ValueSource;
(function(ValueSource) {
ValueSource.Default = 0;
ValueSource.Inherited = 1;
ValueSource.Css = 2;
ValueSource.Local = 3;
ValueSource.VisualState = 4;
})(ValueSource = exports.ValueSource || (exports.ValueSource = {}));
var PropertyMetadata = function() {
function PropertyMetadata(defaultValue, options, onChanged, onValidateValue, equalityComparer) {
if (options === void 0) {
options = PropertyMetadataSettings.None;
}
this.defaultValue = defaultValue;
this.options = options;
this.defaultValue = defaultValue;
this.options = options;
this.onValueChanged = onChanged;
this.onValidateValue = onValidateValue;
this.equalityComparer = equalityComparer;
this.inheritable = (options & PropertyMetadataSettings.Inheritable) === PropertyMetadataSettings.Inheritable;
this.affectsStyle = (options & PropertyMetadataSettings.AffectsStyle) === PropertyMetadataSettings.AffectsStyle;
this.affectsLayout = (options & PropertyMetadataSettings.AffectsLayout) === PropertyMetadataSettings.AffectsLayout;
}
return PropertyMetadata;
}();
exports.PropertyMetadata = PropertyMetadata;
var Property = function() {
function Property(name, ownerType, metadata, valueConverter) {
this.name = name;
this.ownerType = ownerType;
this.metadata = metadata;
this.key = generatePropertyKey(name, ownerType, true);
if (propertyFromKey[this.key]) {
throw new Error("Property " + name + " already registered for type " + ownerType + ".");
}
propertyFromKey[this.key] = this;
if (!metadata || !(metadata instanceof PropertyMetadata)) {
throw new Error("Expected valid PropertyMetadata instance.");
}
this.name = name;
this.nameEvent = name + "Change";
this.ownerType = ownerType;
this.metadata = metadata;
this.id = propertyIdCounter++;
this.valueConverter = valueConverter;
this.defaultValue = metadata.defaultValue;
this.onValueChanged = metadata.onValueChanged;
this.onValidateValue = metadata.onValidateValue;
this.equalityComparer = metadata.equalityComparer || function(x, y) {
return x === y;
};
this.inheritable = metadata.inheritable;
this.affectsStyle = metadata.affectsStyle;
this.affectsLayout = metadata.affectsLayout;
}
return Property;
}();
exports.Property = Property;
var PropertyEntry = function() {
function PropertyEntry(property) {
this.property = property;
this.valueSource = ValueSource.Default;
}
PropertyEntry.prototype.resetValue = function() {
this.valueSource = ValueSource.Default;
this.inheritedValue = this.cssValue = this.localValue = this.visualStateValue = this.effectiveValue = undefined;
};
return PropertyEntry;
}();
exports.PropertyEntry = PropertyEntry;
var DependencyObservable = function(_super) {
__extends(DependencyObservable, _super);
function DependencyObservable() {
_super.apply(this, arguments);
this._propertyEntries = {};
}
DependencyObservable.prototype.set = function(name, value) {
var property = getPropertyByNameAndType(name, this);
if (property) {
this._setValueInternal(property, value, ValueSource.Local);
} else {
_super.prototype.set.call(this, name, value);
}
};
DependencyObservable.prototype.get = function(name) {
var property = getPropertyByNameAndType(name, this);
if (property) {
return this._getValue(property);
} else {
return _super.prototype.get.call(this, name);
}
};
DependencyObservable.prototype._setValue = function(property, value, source) {
this._setValueInternal(property, value, source || ValueSource.Local);
};
DependencyObservable.prototype._getValueSource = function(property) {
var entry = this._propertyEntries[property.id];
if (entry) {
return entry.valueSource;
}
return ValueSource.Default;
};
DependencyObservable.prototype._getValue = function(property) {
var entry = this._propertyEntries[property.id];
if (entry) {
return entry.effectiveValue;
} else {
return this._getDefaultValue(property);
}
};
DependencyObservable.prototype._getDefaultValue = function(property) {
if (property.defaultValueGetter) {
var defaultValueResult = property.defaultValueGetter(this);
var defaultValue = defaultValueResult.result;
if (defaultValueResult.cacheable) {
var entry = new PropertyEntry(property);
entry.effectiveValue = entry.defaultValue = defaultValue;
this._propertyEntries[property.id] = entry;
}
return defaultValue;
}
return property.defaultValue;
};
DependencyObservable.prototype._resetValues = function(valueSource) {
for (var i = 0, keys = Object.keys(this._propertyEntries); i < keys.length; i++) {
var key = keys[i];
var entry = this._propertyEntries[key];
this._resetValueInternal(entry.property, entry, valueSource);
}
};
DependencyObservable.prototype._resetValue = function(property, valueSource) {
if (valueSource === void 0) {
valueSource = ValueSource.Local;
}
var entry = this._propertyEntries[property.id];
if (!entry) {
return;
}
this._resetValueInternal(property, entry, valueSource);
};
DependencyObservable.prototype._resetValueInternal = function(property, entry, valueSource) {
switch (valueSource) {
case ValueSource.Inherited:
entry.inheritedValue = undefined;
break;

case ValueSource.Css:
entry.cssValue = undefined;
break;

case ValueSource.Local:
entry.localValue = undefined;
break;

case ValueSource.VisualState:
entry.visualStateValue = undefined;
break;
}
var currentValueSource = entry.valueSource;
if (currentValueSource !== valueSource) {
return;
}
var currentValue = entry.effectiveValue;
var newValue = this.getEffectiveValueAndUpdateEntry(currentValueSource, entry, property);
if (!property.equalityComparer(currentValue, newValue)) {
if (entry.valueSource === ValueSource.Default && !property.defaultValueGetter) {
delete this._propertyEntries[property.id];
} else {
entry.effectiveValue = newValue;
}
this._onPropertyChanged(property, currentValue, newValue);
}
};
DependencyObservable.prototype._onPropertyChanged = function(property, oldValue, newValue) {
var valueChanged = property.onValueChanged;
if (valueChanged) {
valueChanged({
object: this,
property: property,
eventName: observable_1.Observable.propertyChangeEvent,
newValue: newValue,
oldValue: oldValue
});
}
var propName = property.name;
if (this.hasListeners(observable_1.Observable.propertyChangeEvent)) {
var changeData = _super.prototype._createPropertyChangeData.call(this, propName, newValue);
this.notify(changeData);
}
var eventName = property.nameEvent;
if (this.hasListeners(eventName)) {
var ngChangedData = {
eventName: eventName,
propertyName: propName,
object: this,
value: newValue
};
this.notify(ngChangedData);
}
};
DependencyObservable.prototype._eachSetProperty = function(callback) {
for (var i = 0, keys = Object.keys(this._propertyEntries); i < keys.length; i++) {
var key = keys[i];
var entry = this._propertyEntries[key];
if (!callback(entry.property)) {
break;
}
}
};
DependencyObservable.prototype._eachSetPropertyValue = function(callback) {
for (var i = 0, keys = Object.keys(this._propertyEntries); i < keys.length; i++) {
var key = keys[i];
var entry = this._propertyEntries[key];
if (entry.valueSource === ValueSource.Default) {
continue;
}
if (!callback(entry.property, entry.effectiveValue)) {
break;
}
}
};
DependencyObservable.prototype.toString = function() {
return this.typeName;
};
DependencyObservable.prototype._setValueInternal = function(property, value, source) {
if (value === exports.unsetValue) {
this._resetValue(property, source);
return;
}
var wrapped = value && value.wrapped;
var realValue = wrapped ? observable_1.WrappedValue.unwrap(value) : value;
var validate = property.onValidateValue;
if (validate && !validate(realValue)) {
throw new Error("Invalid value " + realValue + " for property " + property.name);
}
var converter = property.valueConverter;
if (converter && types.isString(realValue)) {
realValue = converter(realValue);
}
var entry = this._propertyEntries[property.id];
var currentValue;
if (!entry) {
entry = new PropertyEntry(property);
entry.effectiveValue = this._getDefaultValue(property);
this._propertyEntries[property.id] = entry;
}
currentValue = entry.effectiveValue;
switch (source) {
case ValueSource.Inherited:
entry.inheritedValue = realValue;
break;

case ValueSource.Css:
entry.cssValue = realValue;
break;

case ValueSource.Local:
entry.localValue = realValue;
break;

case ValueSource.VisualState:
entry.visualStateValue = realValue;
break;
}
var currentValueSource = entry.valueSource;
if (currentValueSource > source) {
return;
} else if (currentValueSource < source) {
entry.valueSource = source;
}
if (wrapped || !property.equalityComparer(currentValue, realValue)) {
entry.effectiveValue = realValue;
this._onPropertyChanged(property, currentValue, realValue);
}
};
DependencyObservable.prototype.getEffectiveValueAndUpdateEntry = function(currentValueSource, entry, property) {
var newValue;
switch (currentValueSource) {
case ValueSource.Inherited:
newValue = property.defaultValue;
entry.valueSource = ValueSource.Default;
break;

case ValueSource.Css:
if (entry.inheritedValue !== undefined) {
newValue = entry.inheritedValue;
entry.valueSource = ValueSource.Inherited;
} else {
newValue = entry.defaultValue !== undefined ? entry.defaultValue : property.defaultValue;
entry.valueSource = ValueSource.Default;
}
break;

case ValueSource.Local:
if (entry.cssValue !== undefined) {
newValue = entry.cssValue;
entry.valueSource = ValueSource.Css;
} else if (entry.inheritedValue !== undefined) {
newValue = entry.inheritedValue;
entry.valueSource = ValueSource.Inherited;
} else {
newValue = entry.defaultValue !== undefined ? entry.defaultValue : property.defaultValue;
entry.valueSource = ValueSource.Default;
}
break;

case ValueSource.VisualState:
if (entry.localValue !== undefined) {
newValue = entry.localValue;
entry.valueSource = ValueSource.Local;
} else if (entry.cssValue !== undefined) {
newValue = entry.cssValue;
entry.valueSource = ValueSource.Css;
} else if (entry.inheritedValue !== undefined) {
newValue = entry.inheritedValue;
entry.valueSource = ValueSource.Inherited;
} else {
newValue = entry.defaultValue !== undefined ? entry.defaultValue : property.defaultValue;
entry.valueSource = ValueSource.Default;
}
break;
}
return newValue;
};
return DependencyObservable;
}(observable_1.Observable);
exports.DependencyObservable = DependencyObservable;
}, function(module, exports, __webpack_require__) {
var types = __webpack_require__(14);
var _wrappedIndex = 0;
var WrappedValue = function() {
function WrappedValue(value) {
this._wrapped = value;
}
Object.defineProperty(WrappedValue.prototype, "wrapped", {
get: function() {
return this._wrapped;
},
set: function(value) {
this._wrapped = value;
},
enumerable: true,
configurable: true
});
WrappedValue.unwrap = function(value) {
if (value && value.wrapped) {
return value.wrapped;
}
return value;
};
WrappedValue.wrap = function(value) {
var w = _wrappedValues[_wrappedIndex++ % 5];
w.wrapped = value;
return w;
};
return WrappedValue;
}();
exports.WrappedValue = WrappedValue;
var _wrappedValues = [ new WrappedValue(null), new WrappedValue(null), new WrappedValue(null), new WrappedValue(null), new WrappedValue(null) ];
var Observable = function() {
function Observable(source) {
this._observers = {};
this.disableNotifications = {};
if (source) {
addPropertiesFromObject(this, source);
}
}
Observable.prototype._defineNewProperty = function(propertyName) {
Object.defineProperty(this, propertyName, {
get: function() {
return this._map.get(propertyName);
},
set: function(value) {
this._map.set(propertyName, value);
this.notify(this._createPropertyChangeData(propertyName, value));
},
enumerable: true,
configurable: true
});
};
Object.defineProperty(Observable.prototype, "typeName", {
get: function() {
return types.getClass(this);
},
enumerable: true,
configurable: true
});
Observable.prototype.on = function(eventNames, callback, thisArg) {
this.addEventListener(eventNames, callback, thisArg);
};
Observable.prototype.off = function(eventNames, callback, thisArg) {
this.removeEventListener(eventNames, callback, thisArg);
};
Observable.prototype.addEventListener = function(eventNames, callback, thisArg) {
if (!types.isString(eventNames)) {
throw new TypeError("Events name(s) must be string.");
}
types.verifyCallback(callback);
var events = eventNames.split(",");
for (var i = 0, l = events.length; i < l; i++) {
var event = events[i].trim();
var list = this._getEventList(event, true);
list.push({
callback: callback,
thisArg: thisArg
});
}
};
Observable.prototype.removeEventListener = function(eventNames, callback, thisArg) {
if (!types.isString(eventNames)) {
throw new TypeError("Events name(s) must be string.");
}
var events = eventNames.split(",");
for (var i = 0, l = events.length; i < l; i++) {
var event = events[i].trim();
if (callback) {
var list = this._getEventList(event, false);
if (list) {
var index = this._indexOfListener(list, callback, thisArg);
if (index >= 0) {
list.splice(index, 1);
}
if (list.length === 0) {
delete this._observers[event];
}
}
} else {
this._observers[event] = undefined;
delete this._observers[event];
}
}
};
Observable.prototype.notifyPropertyChange = function(propertyName, newValue) {
this.notify(this._createPropertyChangeData(propertyName, newValue));
};
Observable.prototype.set = function(name, value) {
if (this[name] === value) {
return;
}
var data = this._createPropertyChangeData(name, value);
this._setCore(data);
this.notify(data);
};
Observable.prototype.get = function(name) {
return this[name];
};
Observable.prototype._setCore = function(data) {
this.disableNotifications[data.propertyName] = true;
var newValue = WrappedValue.unwrap(data.value);
this[data.propertyName] = newValue;
delete this.disableNotifications[data.propertyName];
};
Observable.prototype.notify = function(data) {
if (this.disableNotifications[data.propertyName]) {
return;
}
var observers = this._getEventList(data.eventName);
if (!observers) {
return;
}
var i;
var entry;
var observersLength = observers.length;
for (i = observersLength - 1; i >= 0; i--) {
entry = observers[i];
if (entry.thisArg) {
entry.callback.apply(entry.thisArg, [ data ]);
} else {
entry.callback(data);
}
}
};
Observable.prototype.hasListeners = function(eventName) {
return eventName in this._observers;
};
Observable.prototype._createPropertyChangeData = function(name, value) {
return {
eventName: Observable.propertyChangeEvent,
propertyName: name,
object: this,
value: value
};
};
Observable.prototype._emit = function(eventNames) {
var events = eventNames.split(",");
for (var i = 0, l = events.length; i < l; i++) {
var event = events[i].trim();
this.notify({
eventName: event,
object: this
});
}
};
Observable.prototype._getEventList = function(eventName, createIfNeeded) {
if (!eventName) {
throw new TypeError("EventName must be valid string.");
}
var list = this._observers[eventName];
if (!list && createIfNeeded) {
list = [];
this._observers[eventName] = list;
}
return list;
};
Observable.prototype._indexOfListener = function(list, callback, thisArg) {
var i;
var entry;
for (i = 0; i < list.length; i++) {
entry = list[i];
if (thisArg) {
if (entry.callback === callback && entry.thisArg === thisArg) {
return i;
}
} else {
if (entry.callback === callback) {
return i;
}
}
}
return -1;
};
Observable.prototype.toString = function() {
return this.typeName;
};
Observable.propertyChangeEvent = "propertyChange";
return Observable;
}();
exports.Observable = Observable;
function addPropertiesFromObject(observable, source, recursive) {
var isRecursive = recursive || false;
observable._map = new Map();
for (var prop in source) {
if (source.hasOwnProperty(prop)) {
if (isRecursive) {
if (!Array.isArray(source[prop]) && source[prop] && typeof source[prop] === "object" && types.getClass(source[prop]) !== "ObservableArray") {
source[prop] = fromObjectRecursive(source[prop]);
}
}
observable._defineNewProperty(prop);
observable.set(prop, source[prop]);
}
}
}
function fromObject(source) {
var observable = new Observable();
addPropertiesFromObject(observable, source, false);
return observable;
}
exports.fromObject = fromObject;
function fromObjectRecursive(source) {
var observable = new Observable();
addPropertiesFromObject(observable, source, true);
return observable;
}
exports.fromObjectRecursive = fromObjectRecursive;
}, function(module, exports, __webpack_require__) {
var common = __webpack_require__(20);
var Color = function(_super) {
__extends(Color, _super);
function Color() {
_super.apply(this, arguments);
}
Object.defineProperty(Color.prototype, "android", {
get: function() {
return this.argb;
},
enumerable: true,
configurable: true
});
Color.prototype._argbFromString = function(hex) {
return android.graphics.Color.parseColor(hex);
};
return Color;
}(common.Color);
exports.Color = Color;
}, function(module, exports, __webpack_require__) {
var types = __webpack_require__(14);
var knownColors = __webpack_require__(21);
var AMP = "#";
var HEX_REGEX = /(^#[0-9A-F]{6}$)|(^#[0-9A-F]{3}$)|(^#[0-9A-F]{8}$)/i;
var Color = function() {
function Color() {
if (arguments.length === 1) {
var arg = arguments[0];
if (types.isString(arg)) {
if (isRgbOrRgba(arg)) {
this._argb = argbFromRgbOrRgba(arg);
} else if (knownColors.isKnownName(arg)) {
this._hex = knownColors.getKnownColor(arg);
this._name = arg;
this._argb = this._argbFromString(this._hex);
} else {
this._hex = this._normalizeHex(arg);
this._argb = this._argbFromString(this._hex);
}
} else if (types.isNumber(arg)) {
this._argb = arg;
} else {
throw new Error("Expected 1 or 4 constructor parameters.");
}
this._parseComponents();
if (!this._hex) {
this._hex = this._buildHex();
}
} else if (arguments.length === 4) {
this._a = arguments[0];
this._r = arguments[1];
this._g = arguments[2];
this._b = arguments[3];
this._buildArgb();
this._hex = this._buildHex();
} else {
throw new Error("Expected 1 or 4 constructor parameters.");
}
}
Object.defineProperty(Color.prototype, "a", {
get: function() {
return this._a;
},
enumerable: true,
configurable: true
});
Object.defineProperty(Color.prototype, "r", {
get: function() {
return this._r;
},
enumerable: true,
configurable: true
});
Object.defineProperty(Color.prototype, "g", {
get: function() {
return this._g;
},
enumerable: true,
configurable: true
});
Object.defineProperty(Color.prototype, "b", {
get: function() {
return this._b;
},
enumerable: true,
configurable: true
});
Object.defineProperty(Color.prototype, "argb", {
get: function() {
return this._argb;
},
enumerable: true,
configurable: true
});
Object.defineProperty(Color.prototype, "hex", {
get: function() {
return this._hex;
},
enumerable: true,
configurable: true
});
Object.defineProperty(Color.prototype, "name", {
get: function() {
return this._name;
},
enumerable: true,
configurable: true
});
Object.defineProperty(Color.prototype, "ios", {
get: function() {
return undefined;
},
enumerable: true,
configurable: true
});
Object.defineProperty(Color.prototype, "android", {
get: function() {
return undefined;
},
enumerable: true,
configurable: true
});
Color.prototype._argbFromString = function(hex) {
return undefined;
};
Color.prototype.equals = function(value) {
return this.argb === value.argb;
};
Color.equals = function(value1, value2) {
if (!value1 && !value2) {
return true;
}
if (!value1 || !value2) {
return false;
}
return value1.equals(value2);
};
Color.isValid = function(value) {
if (types.isNullOrUndefined(value) || value instanceof Color) {
return true;
}
if (!types.isString(value)) {
return false;
}
if (knownColors.isKnownName(value)) {
return true;
}
return HEX_REGEX.test(value) || isRgbOrRgba(value);
};
Color.prototype._buildHex = function() {
return AMP + this._componentToHex(this._a) + this._componentToHex(this._r) + this._componentToHex(this._g) + this._componentToHex(this._b);
};
Color.prototype._componentToHex = function(component) {
var hex = component.toString(16);
if (hex.length === 1) {
hex = "0" + hex;
}
return hex;
};
Color.prototype._parseComponents = function() {
if (types.isUndefined(this._argb)) {
throw new Error("Missing the ARGB numeric value");
}
this._a = this._argb >> 24 & 255;
this._r = this._argb >> 16 & 255;
this._g = this._argb >> 8 & 255;
this._b = this._argb & 255;
};
Color.prototype._buildArgb = function() {
this._argb = this._a << 24 | this._r << 16 | this._g << 8 | this._b;
};
Color.prototype._normalizeHex = function(hexStr) {
if (hexStr.charAt(0) === AMP && hexStr.length === 4) {
hexStr = hexStr.charAt(0) + hexStr.charAt(1) + hexStr.charAt(1) + hexStr.charAt(2) + hexStr.charAt(2) + hexStr.charAt(3) + hexStr.charAt(3);
}
return hexStr;
};
Color.prototype.toString = function() {
return this.hex;
};
return Color;
}();
exports.Color = Color;
function isRgbOrRgba(value) {
var toLower = value.toLowerCase();
return (toLower.indexOf("rgb(") === 0 || toLower.indexOf("rgba(") === 0) && toLower.indexOf(")") === toLower.length - 1;
}
function argbFromRgbOrRgba(value) {
var toLower = value.toLowerCase();
var parts = toLower.replace("rgba(", "").replace("rgb(", "").replace(")", "").trim().split(",");
var r = 255, g = 255, b = 255, a = 255;
if (parts[0]) {
r = parseInt(parts[0].trim());
}
if (parts[1]) {
g = parseInt(parts[1].trim());
}
if (parts[2]) {
b = parseInt(parts[2].trim());
}
if (parts[3]) {
a = Math.round(parseFloat(parts[3].trim()) * 255);
}
return a << 24 | r << 16 | g << 8 | b;
}
}, function(module, exports) {
exports.Transparent = "#00000000";
exports.AliceBlue = "#F0F8FF";
exports.AntiqueWhite = "#FAEBD7";
exports.Aqua = "#00FFFF";
exports.Aquamarine = "#7FFFD4";
exports.Azure = "#F0FFFF";
exports.Beige = "#F5F5DC";
exports.Bisque = "#FFE4C4";
exports.Black = "#000000";
exports.BlanchedAlmond = "#FFEBCD";
exports.Blue = "#0000FF";
exports.BlueViolet = "#8A2BE2";
exports.Brown = "#A52A2A";
exports.BurlyWood = "#DEB887";
exports.CadetBlue = "#5F9EA0";
exports.Chartreuse = "#7FFF00";
exports.Chocolate = "#D2691E";
exports.Coral = "#FF7F50";
exports.CornflowerBlue = "#6495ED";
exports.Cornsilk = "#FFF8DC";
exports.Crimson = "#DC143C";
exports.Cyan = "#00FFFF";
exports.DarkBlue = "#00008B";
exports.DarkCyan = "#008B8B";
exports.DarkGoldenRod = "#B8860B";
exports.DarkGray = "#A9A9A9";
exports.DarkGreen = "#006400";
exports.DarkKhaki = "#BDB76B";
exports.DarkMagenta = "#8B008B";
exports.DarkOliveGreen = "#556B2F";
exports.DarkOrange = "#FF8C00";
exports.DarkOrchid = "#9932CC";
exports.DarkRed = "#8B0000";
exports.DarkSalmon = "#E9967A";
exports.DarkSeaGreen = "#8FBC8F";
exports.DarkSlateBlue = "#483D8B";
exports.DarkSlateGray = "#2F4F4F";
exports.DarkTurquoise = "#00CED1";
exports.DarkViolet = "#9400D3";
exports.DeepPink = "#FF1493";
exports.DeepSkyBlue = "#00BFFF";
exports.DimGray = "#696969";
exports.DodgerBlue = "#1E90FF";
exports.FireBrick = "#B22222";
exports.FloralWhite = "#FFFAF0";
exports.ForestGreen = "#228B22";
exports.Fuchsia = "#FF00FF";
exports.Gainsboro = "#DCDCDC";
exports.GhostWhite = "#F8F8FF";
exports.Gold = "#FFD700";
exports.GoldenRod = "#DAA520";
exports.Gray = "#808080";
exports.Green = "#008000";
exports.GreenYellow = "#ADFF2F";
exports.HoneyDew = "#F0FFF0";
exports.HotPink = "#FF69B4";
exports.IndianRed = "#CD5C5C";
exports.Indigo = "#4B0082";
exports.Ivory = "#FFFFF0";
exports.Khaki = "#F0E68C";
exports.Lavender = "#E6E6FA";
exports.LavenderBlush = "#FFF0F5";
exports.LawnGreen = "#7CFC00";
exports.LemonChiffon = "#FFFACD";
exports.LightBlue = "#ADD8E6";
exports.LightCoral = "#F08080";
exports.LightCyan = "#E0FFFF";
exports.LightGoldenRodYellow = "#FAFAD2";
exports.LightGray = "#D3D3D3";
exports.LightGreen = "#90EE90";
exports.LightPink = "#FFB6C1";
exports.LightSalmon = "#FFA07A";
exports.LightSeaGreen = "#20B2AA";
exports.LightSkyBlue = "#87CEFA";
exports.LightSlateGray = "#778899";
exports.LightSteelBlue = "#B0C4DE";
exports.LightYellow = "#FFFFE0";
exports.Lime = "#00FF00";
exports.LimeGreen = "#32CD32";
exports.Linen = "#FAF0E6";
exports.Magenta = "#FF00FF";
exports.Maroon = "#800000";
exports.MediumAquaMarine = "#66CDAA";
exports.MediumBlue = "#0000CD";
exports.MediumOrchid = "#BA55D3";
exports.MediumPurple = "#9370DB";
exports.MediumSeaGreen = "#3CB371";
exports.MediumSlateBlue = "#7B68EE";
exports.MediumSpringGreen = "#00FA9A";
exports.MediumTurquoise = "#48D1CC";
exports.MediumVioletRed = "#C71585";
exports.MidnightBlue = "#191970";
exports.MintCream = "#F5FFFA";
exports.MistyRose = "#FFE4E1";
exports.Moccasin = "#FFE4B5";
exports.NavajoWhite = "#FFDEAD";
exports.Navy = "#000080";
exports.OldLace = "#FDF5E6";
exports.Olive = "#808000";
exports.OliveDrab = "#6B8E23";
exports.Orange = "#FFA500";
exports.OrangeRed = "#FF4500";
exports.Orchid = "#DA70D6";
exports.PaleGoldenRod = "#EEE8AA";
exports.PaleGreen = "#98FB98";
exports.PaleTurquoise = "#AFEEEE";
exports.PaleVioletRed = "#DB7093";
exports.PapayaWhip = "#FFEFD5";
exports.PeachPuff = "#FFDAB9";
exports.Peru = "#CD853F";
exports.Pink = "#FFC0CB";
exports.Plum = "#DDA0DD";
exports.PowderBlue = "#B0E0E6";
exports.Purple = "#800080";
exports.Red = "#FF0000";
exports.RosyBrown = "#BC8F8F";
exports.RoyalBlue = "#4169E1";
exports.SaddleBrown = "#8B4513";
exports.Salmon = "#FA8072";
exports.SandyBrown = "#F4A460";
exports.SeaGreen = "#2E8B57";
exports.SeaShell = "#FFF5EE";
exports.Sienna = "#A0522D";
exports.Silver = "#C0C0C0";
exports.SkyBlue = "#87CEEB";
exports.SlateBlue = "#6A5ACD";
exports.SlateGray = "#708090";
exports.Snow = "#FFFAFA";
exports.SpringGreen = "#00FF7F";
exports.SteelBlue = "#4682B4";
exports.Tan = "#D2B48C";
exports.Teal = "#008080";
exports.Thistle = "#D8BFD8";
exports.Tomato = "#FF6347";
exports.Turquoise = "#40E0D0";
exports.Violet = "#EE82EE";
exports.Wheat = "#F5DEB3";
exports.White = "#FFFFFF";
exports.WhiteSmoke = "#F5F5F5";
exports.Yellow = "#FFFF00";
exports.YellowGreen = "#9ACD32";
var _allColors = {};
(function() {
var name;
var underscore = "_";
for (var p in exports) {
name = p;
if (name.charAt(0) !== underscore) {
_allColors[name.toLowerCase()] = exports[p];
}
}
})();
function isKnownName(name) {
if (!name) {
return undefined;
}
return name.toLowerCase() in _allColors;
}
exports.isKnownName = isKnownName;
function getKnownColor(name) {
if (!name) {
return undefined;
}
return _allColors[name.toLowerCase()];
}
exports.getKnownColor = getKnownColor;
}, function(module, exports, __webpack_require__) {
var types = __webpack_require__(14);
var observable = __webpack_require__(17);
var propertiesByName = {};
var propertiesByCssName = {};
var callbackByShorthandName = new Map();
var inheritableProperties = [];
function registerProperty(property) {
if (propertiesByCssName[property.cssName]) {
throw new Error("Property with name " + property.cssName + " is already registered!");
}
propertiesByCssName[property.cssName] = property;
propertiesByName[property.name] = property;
if (property.inheritable) {
inheritableProperties.push(property);
}
}
function withStyleProperty(name, value, resolvedCallback) {
var property = getPropertyByCssName(name);
if (property) {
resolvedCallback(property, value);
} else {
var pairs = getShorthandPairs(name, value);
if (pairs) {
for (var j = 0; j < pairs.length; j++) {
var pair = pairs[j];
resolvedCallback(pair.property, pair.value);
}
} else {
resolvedCallback(name, value);
}
}
}
exports.withStyleProperty = withStyleProperty;
function getShorthandPairs(name, value) {
var callback = callbackByShorthandName.get(name);
if (callback) {
return callback(value);
}
return undefined;
}
exports.getShorthandPairs = getShorthandPairs;
function registerShorthandCallback(name, callback) {
if (callbackByShorthandName.has(name)) {
throw new Error("Shorthand callback already registered for property: " + name);
}
callbackByShorthandName.set(name, callback);
}
exports.registerShorthandCallback = registerShorthandCallback;
function getPropertyByName(name) {
return propertiesByName[name];
}
exports.getPropertyByName = getPropertyByName;
function getPropertyByCssName(name) {
return propertiesByCssName[name];
}
exports.getPropertyByCssName = getPropertyByCssName;
function eachProperty(callback) {
types.verifyCallback(callback);
for (var i = 0, keys = Object.keys(propertiesByName); i < keys.length; i++) {
var key = keys[i];
callback(propertiesByName[key]);
}
}
exports.eachProperty = eachProperty;
function eachInheritableProperty(callback) {
types.verifyCallback(callback);
for (var i = 0; i < inheritableProperties.length; i++) {
callback(inheritableProperties[i]);
}
}
exports.eachInheritableProperty = eachInheritableProperty;
var Property = function(_super) {
__extends(Property, _super);
function Property(name, cssName, metadata, valueConverter) {
_super.call(this, name, "Style", metadata, valueConverter);
this.cssName = cssName;
this.cssName = cssName;
registerProperty(this);
}
return Property;
}(observable.Property);
exports.Property = Property;
}, function(module, exports, __webpack_require__) {
var enums = __webpack_require__(24);
var color = __webpack_require__(19);
var types = __webpack_require__(14);
function colorConverter(value) {
return new color.Color(value);
}
exports.colorConverter = colorConverter;
function floatConverter(value) {
var result = parseFloat(value);
return result;
}
exports.floatConverter = floatConverter;
function fontSizeConverter(value) {
return floatConverter(value);
}
exports.fontSizeConverter = fontSizeConverter;
function textAlignConverter(value) {
switch (value) {
case enums.TextAlignment.left:
case enums.TextAlignment.center:
case enums.TextAlignment.right:
return value;

default:
throw new Error('CSS text-align "' + value + '" is not supported.');
}
}
exports.textAlignConverter = textAlignConverter;
function textDecorationConverter(value) {
var values = (value + "").split(" ");
if (values.indexOf(enums.TextDecoration.none) !== -1 || values.indexOf(enums.TextDecoration.underline) !== -1 || values.indexOf(enums.TextDecoration.lineThrough) !== -1) {
return value;
} else {
throw new Error('CSS text-decoration "' + value + '" is not supported.');
}
}
exports.textDecorationConverter = textDecorationConverter;
function whiteSpaceConverter(value) {
switch (value) {
case enums.WhiteSpace.normal:
case enums.WhiteSpace.nowrap:
return value;

default:
throw new Error('CSS white-space "' + value + '" is not supported.');
}
}
exports.whiteSpaceConverter = whiteSpaceConverter;
function textTransformConverter(value) {
switch (value) {
case enums.TextTransform.none:
case enums.TextTransform.uppercase:
case enums.TextTransform.lowercase:
case enums.TextTransform.capitalize:
return value;

default:
throw new Error('CSS text-transform "' + value + '" is not supported.');
}
}
exports.textTransformConverter = textTransformConverter;
exports.numberConverter = parseFloat;
function visibilityConverter(value) {
if (value.toLowerCase() === enums.Visibility.collapsed) {
return enums.Visibility.collapsed;
} else if (value.toLowerCase() === enums.Visibility.collapse) {
return enums.Visibility.collapse;
}
return enums.Visibility.visible;
}
exports.visibilityConverter = visibilityConverter;
function opacityConverter(value) {
var result = parseFloat(value);
result = Math.max(0, result);
result = Math.min(1, result);
return result;
}
exports.opacityConverter = opacityConverter;
function timeConverter(value) {
var result = parseFloat(value);
if (value.indexOf("ms") === -1) {
result = result * 1e3;
}
result = Math.max(0, result);
return result;
}
exports.timeConverter = timeConverter;
function bezieArgumentConverter(value) {
var result = parseFloat(value);
result = Math.max(0, result);
result = Math.min(1, result);
return result;
}
exports.bezieArgumentConverter = bezieArgumentConverter;
function animationTimingFunctionConverter(value) {
var result = enums.AnimationCurve.ease;
switch (value) {
case "ease":
result = enums.AnimationCurve.ease;
break;

case "linear":
result = enums.AnimationCurve.linear;
break;

case "ease-in":
result = enums.AnimationCurve.easeIn;
break;

case "ease-out":
result = enums.AnimationCurve.easeOut;
break;

case "ease-in-out":
result = enums.AnimationCurve.easeInOut;
break;

case "spring":
result = enums.AnimationCurve.spring;
break;

default:
if (value.indexOf("cubic-bezier(") === 0) {
var bezierArr = value.substring(13).split(/[,]+/);
if (bezierArr.length !== 4) {
throw new Error("Invalid value for animation: " + value);
}
result = enums.AnimationCurve.cubicBezier(bezieArgumentConverter(bezierArr[0]), bezieArgumentConverter(bezierArr[1]), bezieArgumentConverter(bezierArr[2]), bezieArgumentConverter(bezierArr[3]));
} else {
throw new Error("Invalid value for animation: " + value);
}
break;
}
return result;
}
exports.animationTimingFunctionConverter = animationTimingFunctionConverter;
function transformConverter(value) {
if (value === "none") {
var operations = {};
operations[value] = value;
return operations;
} else if (types.isString(value)) {
var operations = {};
var operator = "";
var pos = 0;
while (pos < value.length) {
if (value[pos] === " " || value[pos] === ",") {
pos++;
} else if (value[pos] === "(") {
var start = pos + 1;
while (pos < value.length && value[pos] !== ")") {
pos++;
}
var operand = value.substring(start, pos);
operations[operator] = operand.trim();
operator = "";
pos++;
} else {
operator += value[pos++];
}
}
return operations;
} else {
return undefined;
}
}
exports.transformConverter = transformConverter;
}, function(module, exports, __webpack_require__) {
var KeyboardType;
(function(KeyboardType) {
KeyboardType.datetime = "datetime";
KeyboardType.phone = "phone";
KeyboardType.number = "number";
KeyboardType.url = "url";
KeyboardType.email = "email";
})(KeyboardType = exports.KeyboardType || (exports.KeyboardType = {}));
var ReturnKeyType;
(function(ReturnKeyType) {
ReturnKeyType.done = "done";
ReturnKeyType.next = "next";
ReturnKeyType.go = "go";
ReturnKeyType.search = "search";
ReturnKeyType.send = "send";
})(ReturnKeyType = exports.ReturnKeyType || (exports.ReturnKeyType = {}));
var TextAlignment;
(function(TextAlignment) {
TextAlignment.left = "left";
TextAlignment.center = "center";
TextAlignment.right = "right";
})(TextAlignment = exports.TextAlignment || (exports.TextAlignment = {}));
var TextDecoration;
(function(TextDecoration) {
TextDecoration.none = "none";
TextDecoration.underline = "underline";
TextDecoration.lineThrough = "line-through";
})(TextDecoration = exports.TextDecoration || (exports.TextDecoration = {}));
var TextTransform;
(function(TextTransform) {
TextTransform.none = "none";
TextTransform.capitalize = "capitalize";
TextTransform.uppercase = "uppercase";
TextTransform.lowercase = "lowercase";
})(TextTransform = exports.TextTransform || (exports.TextTransform = {}));
var WhiteSpace;
(function(WhiteSpace) {
WhiteSpace.normal = "normal";
WhiteSpace.nowrap = "nowrap";
})(WhiteSpace = exports.WhiteSpace || (exports.WhiteSpace = {}));
var Orientation;
(function(Orientation) {
Orientation.horizontal = "horizontal";
Orientation.vertical = "vertical";
})(Orientation = exports.Orientation || (exports.Orientation = {}));
var DeviceOrientation;
(function(DeviceOrientation) {
DeviceOrientation.portrait = "portrait";
DeviceOrientation.landscape = "landscape";
DeviceOrientation.unknown = "unknown";
})(DeviceOrientation = exports.DeviceOrientation || (exports.DeviceOrientation = {}));
var HorizontalAlignment;
(function(HorizontalAlignment) {
HorizontalAlignment.left = "left";
HorizontalAlignment.center = "center";
HorizontalAlignment.right = "right";
HorizontalAlignment.stretch = "stretch";
})(HorizontalAlignment = exports.HorizontalAlignment || (exports.HorizontalAlignment = {}));
var VerticalAlignment;
(function(VerticalAlignment) {
VerticalAlignment.top = "top";
VerticalAlignment.center = "center";
VerticalAlignment.middle = "middle";
VerticalAlignment.bottom = "bottom";
VerticalAlignment.stretch = "stretch";
})(VerticalAlignment = exports.VerticalAlignment || (exports.VerticalAlignment = {}));
var Stretch;
(function(Stretch) {
Stretch.none = "none";
Stretch.aspectFill = "aspectFill";
Stretch.aspectFit = "aspectFit";
Stretch.fill = "fill";
})(Stretch = exports.Stretch || (exports.Stretch = {}));
var Visibility;
(function(Visibility) {
Visibility.visible = "visible";
Visibility.collapse = "collapse";
Visibility.collapsed = "collapsed";
})(Visibility = exports.Visibility || (exports.Visibility = {}));
var FontAttributes;
(function(FontAttributes) {
FontAttributes.Normal = 0;
FontAttributes.Bold = 1;
FontAttributes.Italic = 1 << 1;
})(FontAttributes = exports.FontAttributes || (exports.FontAttributes = {}));
var DeviceType;
(function(DeviceType) {
DeviceType.Phone = "Phone";
DeviceType.Tablet = "Tablet";
})(DeviceType = exports.DeviceType || (exports.DeviceType = {}));
var UpdateTextTrigger;
(function(UpdateTextTrigger) {
UpdateTextTrigger.focusLost = "focusLost";
UpdateTextTrigger.textChanged = "textChanged";
})(UpdateTextTrigger = exports.UpdateTextTrigger || (exports.UpdateTextTrigger = {}));
var Accuracy;
(function(Accuracy) {
Accuracy.any = 300;
Accuracy.high = 3;
})(Accuracy = exports.Accuracy || (exports.Accuracy = {}));
var Dock;
(function(Dock) {
Dock.left = "left";
Dock.top = "top";
Dock.right = "right";
Dock.bottom = "bottom";
})(Dock = exports.Dock || (exports.Dock = {}));
var AutocapitalizationType;
(function(AutocapitalizationType) {
AutocapitalizationType.none = "none";
AutocapitalizationType.words = "words";
AutocapitalizationType.sentences = "sentences";
AutocapitalizationType.allCharacters = "allCharacters";
})(AutocapitalizationType = exports.AutocapitalizationType || (exports.AutocapitalizationType = {}));
var NavigationBarVisibility;
(function(NavigationBarVisibility) {
NavigationBarVisibility.auto = "auto";
NavigationBarVisibility.never = "never";
NavigationBarVisibility.always = "always";
})(NavigationBarVisibility = exports.NavigationBarVisibility || (exports.NavigationBarVisibility = {}));
var AndroidActionBarIconVisibility;
(function(AndroidActionBarIconVisibility) {
AndroidActionBarIconVisibility.auto = "auto";
AndroidActionBarIconVisibility.never = "never";
AndroidActionBarIconVisibility.always = "always";
})(AndroidActionBarIconVisibility = exports.AndroidActionBarIconVisibility || (exports.AndroidActionBarIconVisibility = {}));
var AndroidActionItemPosition;
(function(AndroidActionItemPosition) {
AndroidActionItemPosition.actionBar = "actionBar";
AndroidActionItemPosition.actionBarIfRoom = "actionBarIfRoom";
AndroidActionItemPosition.popup = "popup";
})(AndroidActionItemPosition = exports.AndroidActionItemPosition || (exports.AndroidActionItemPosition = {}));
var IOSActionItemPosition;
(function(IOSActionItemPosition) {
IOSActionItemPosition.left = "left";
IOSActionItemPosition.right = "right";
})(IOSActionItemPosition = exports.IOSActionItemPosition || (exports.IOSActionItemPosition = {}));
var ImageFormat;
(function(ImageFormat) {
ImageFormat.png = "png";
ImageFormat.jpeg = "jpeg";
ImageFormat.jpg = "jpg";
})(ImageFormat = exports.ImageFormat || (exports.ImageFormat = {}));
var FontStyle;
(function(FontStyle) {
FontStyle.normal = "normal";
FontStyle.italic = "italic";
})(FontStyle = exports.FontStyle || (exports.FontStyle = {}));
var FontWeight;
(function(FontWeight) {
FontWeight.thin = "100";
FontWeight.extraLight = "200";
FontWeight.light = "300";
FontWeight.normal = "normal";
FontWeight.medium = "500";
FontWeight.semiBold = "600";
FontWeight.bold = "bold";
FontWeight.extraBold = "800";
FontWeight.black = "900";
})(FontWeight = exports.FontWeight || (exports.FontWeight = {}));
var BackgroundRepeat;
(function(BackgroundRepeat) {
BackgroundRepeat.repeat = "repeat";
BackgroundRepeat.repeatX = "repeat-x";
BackgroundRepeat.repeatY = "repeat-y";
BackgroundRepeat.noRepeat = "no-repeat";
})(BackgroundRepeat = exports.BackgroundRepeat || (exports.BackgroundRepeat = {}));
var animationModule;
var AnimationCurve;
(function(AnimationCurve) {
AnimationCurve.ease = "ease";
AnimationCurve.easeIn = "easeIn";
AnimationCurve.easeOut = "easeOut";
AnimationCurve.easeInOut = "easeInOut";
AnimationCurve.linear = "linear";
AnimationCurve.spring = "spring";
function cubicBezier(x1, y1, x2, y2) {
animationModule = animationModule || __webpack_require__(25);
return new animationModule.CubicBezierAnimationCurve(x1, y1, x2, y2);
}
AnimationCurve.cubicBezier = cubicBezier;
})(AnimationCurve = exports.AnimationCurve || (exports.AnimationCurve = {}));
var StatusBarStyle;
(function(StatusBarStyle) {
StatusBarStyle.light = "light";
StatusBarStyle.dark = "dark";
})(StatusBarStyle = exports.StatusBarStyle || (exports.StatusBarStyle = {}));
}, function(module, exports, __webpack_require__) {
var common = __webpack_require__(26);
var utils = __webpack_require__(27);
var color = __webpack_require__(19);
var trace = __webpack_require__(16);
var types = __webpack_require__(14);
var enums = __webpack_require__(24);
var styleModule = __webpack_require__(15);
var lazy_1 = __webpack_require__(29);
var dependencyObservable = __webpack_require__(17);
global.moduleMerge(common, exports);
var argbEvaluator;
function ensureArgbEvaluator() {
if (!argbEvaluator) {
argbEvaluator = new android.animation.ArgbEvaluator();
}
}
var keyPrefix = "ui.animation.";
var propertyKeys = {};
propertyKeys[common.Properties.backgroundColor] = Symbol(keyPrefix + common.Properties.backgroundColor);
propertyKeys[common.Properties.opacity] = Symbol(keyPrefix + common.Properties.opacity);
propertyKeys[common.Properties.rotate] = Symbol(keyPrefix + common.Properties.rotate);
propertyKeys[common.Properties.scale] = Symbol(keyPrefix + common.Properties.scale);
propertyKeys[common.Properties.translate] = Symbol(keyPrefix + common.Properties.translate);
var Animation = function(_super) {
__extends(Animation, _super);
function Animation(animationDefinitions, playSequentially) {
_super.call(this, animationDefinitions, playSequentially);
if (animationDefinitions.length > 0 && animationDefinitions[0].valueSource !== undefined) {
this._valueSource = animationDefinitions[0].valueSource;
}
var that = this;
this._animatorListener = new android.animation.Animator.AnimatorListener({
onAnimationStart: function(animator) {
if (trace.enabled) {
trace.write("MainAnimatorListener.onAndroidAnimationStart(" + animator + ")", trace.categories.Animation);
}
},
onAnimationRepeat: function(animator) {
if (trace.enabled) {
trace.write("MainAnimatorListener.onAnimationRepeat(" + animator + ")", trace.categories.Animation);
}
},
onAnimationEnd: function(animator) {
if (trace.enabled) {
trace.write("MainAnimatorListener.onAnimationEnd(" + animator + ")", trace.categories.Animation);
}
that._onAndroidAnimationEnd();
},
onAnimationCancel: function(animator) {
if (trace.enabled) {
trace.write("MainAnimatorListener.onAnimationCancel(" + animator + ")", trace.categories.Animation);
}
that._onAndroidAnimationCancel();
}
});
}
Animation.prototype.play = function() {
var animationFinishedPromise = _super.prototype.play.call(this);
this._animators = new Array();
this._propertyUpdateCallbacks = new Array();
this._propertyResetCallbacks = new Array();
for (var i = 0, length = this._propertyAnimations.length; i < length; i++) {
this._createAnimators(this._propertyAnimations[i]);
}
this._nativeAnimatorsArray = Array.create(android.animation.Animator, this._animators.length);
for (var i = 0, length = this._animators.length; i < length; i++) {
this._nativeAnimatorsArray[i] = this._animators[i];
}
this._animatorSet = new android.animation.AnimatorSet();
this._animatorSet.addListener(this._animatorListener);
if (this._animators.length > 0) {
if (this._playSequentially) {
this._animatorSet.playSequentially(this._nativeAnimatorsArray);
} else {
this._animatorSet.playTogether(this._nativeAnimatorsArray);
}
}
this._enableHardwareAcceleration();
if (trace.enabled) {
trace.write("Starting " + this._nativeAnimatorsArray.length + " animations " + (this._playSequentially ? "sequentially." : "together."), trace.categories.Animation);
}
this._animatorSet.setupStartValues();
this._animatorSet.start();
return animationFinishedPromise;
};
Animation.prototype.cancel = function() {
_super.prototype.cancel.call(this);
if (trace.enabled) {
trace.write("Cancelling AnimatorSet.", trace.categories.Animation);
}
this._animatorSet.cancel();
};
Animation.prototype._onAndroidAnimationEnd = function() {
if (!this.isPlaying) {
return;
}
var i = 0;
var length = this._propertyUpdateCallbacks.length;
for (;i < length; i++) {
this._propertyUpdateCallbacks[i]();
}
this._disableHardwareAcceleration();
this._resolveAnimationFinishedPromise();
};
Animation.prototype._onAndroidAnimationCancel = function() {
var i = 0;
var length = this._propertyResetCallbacks.length;
for (;i < length; i++) {
this._propertyResetCallbacks[i]();
}
this._disableHardwareAcceleration();
this._rejectAnimationFinishedPromise();
};
Animation.prototype._createAnimators = function(propertyAnimation) {
if (!propertyAnimation.target._nativeView) {
return;
}
if (trace.enabled) {
trace.write("Creating ObjectAnimator(s) for animation: " + common.Animation._getAnimationInfo(propertyAnimation) + "...", trace.categories.Animation);
}
if (types.isNullOrUndefined(propertyAnimation.target)) {
throw new Error("Animation target cannot be null or undefined!");
}
if (types.isNullOrUndefined(propertyAnimation.property)) {
throw new Error("Animation property cannot be null or undefined!");
}
if (types.isNullOrUndefined(propertyAnimation.value)) {
throw new Error("Animation value cannot be null or undefined!");
}
var nativeArray;
var nativeView = propertyAnimation.target._nativeView;
var animators = new Array();
var propertyUpdateCallbacks = new Array();
var propertyResetCallbacks = new Array();
var originalValue1;
var originalValue2;
var density = utils.layout.getDisplayDensity();
var xyObjectAnimators;
var animatorSet;
var key = propertyKeys[propertyAnimation.property];
if (key) {
propertyAnimation.target[key] = propertyAnimation;
}
function checkAnimation(cb) {
return function() {
if (propertyAnimation.target[key] === propertyAnimation) {
delete propertyAnimation.target[key];
cb();
}
};
}
var valueSource = this._valueSource !== undefined ? this._valueSource : dependencyObservable.ValueSource.Local;
switch (propertyAnimation.property) {
case common.Properties.opacity:
originalValue1 = nativeView.getAlpha();
nativeArray = Array.create("float", 1);
nativeArray[0] = propertyAnimation.value;
propertyUpdateCallbacks.push(checkAnimation(function() {
propertyAnimation.target.style._setValue(styleModule.opacityProperty, propertyAnimation.value, valueSource);
}));
propertyResetCallbacks.push(checkAnimation(function() {
propertyAnimation.target.style._setValue(styleModule.opacityProperty, originalValue1, valueSource);
}));
animators.push(android.animation.ObjectAnimator.ofFloat(nativeView, "alpha", nativeArray));
break;

case common.Properties.backgroundColor:
ensureArgbEvaluator();
originalValue1 = propertyAnimation.target.backgroundColor;
nativeArray = Array.create(java.lang.Object, 2);
nativeArray[0] = propertyAnimation.target.backgroundColor ? java.lang.Integer.valueOf(propertyAnimation.target.backgroundColor.argb) : java.lang.Integer.valueOf(-1);
nativeArray[1] = java.lang.Integer.valueOf(propertyAnimation.value.argb);
var animator = android.animation.ValueAnimator.ofObject(argbEvaluator, nativeArray);
animator.addUpdateListener(new android.animation.ValueAnimator.AnimatorUpdateListener({
onAnimationUpdate: function(animator) {
var argb = animator.getAnimatedValue().intValue();
propertyAnimation.target.style._setValue(styleModule.backgroundColorProperty, new color.Color(argb), valueSource);
}
}));
propertyUpdateCallbacks.push(checkAnimation(function() {
propertyAnimation.target.style._setValue(styleModule.backgroundColorProperty, propertyAnimation.value, valueSource);
}));
propertyResetCallbacks.push(checkAnimation(function() {
propertyAnimation.target.style._setValue(styleModule.backgroundColorProperty, originalValue1, valueSource);
}));
animators.push(animator);
break;

case common.Properties.translate:
xyObjectAnimators = Array.create(android.animation.Animator, 2);
nativeArray = Array.create("float", 1);
nativeArray[0] = propertyAnimation.value.x * density;
xyObjectAnimators[0] = android.animation.ObjectAnimator.ofFloat(nativeView, "translationX", nativeArray);
xyObjectAnimators[0].setRepeatCount(Animation._getAndroidRepeatCount(propertyAnimation.iterations));
nativeArray = Array.create("float", 1);
nativeArray[0] = propertyAnimation.value.y * density;
xyObjectAnimators[1] = android.animation.ObjectAnimator.ofFloat(nativeView, "translationY", nativeArray);
xyObjectAnimators[1].setRepeatCount(Animation._getAndroidRepeatCount(propertyAnimation.iterations));
originalValue1 = nativeView.getTranslationX();
originalValue2 = nativeView.getTranslationY();
propertyUpdateCallbacks.push(checkAnimation(function() {
propertyAnimation.target.style._setValue(styleModule.translateXProperty, propertyAnimation.value.x, valueSource);
propertyAnimation.target.style._setValue(styleModule.translateYProperty, propertyAnimation.value.y, valueSource);
}));
propertyResetCallbacks.push(checkAnimation(function() {
propertyAnimation.target.style._setValue(styleModule.translateXProperty, originalValue1, valueSource);
propertyAnimation.target.style._setValue(styleModule.translateYProperty, originalValue2, valueSource);
}));
animatorSet = new android.animation.AnimatorSet();
animatorSet.playTogether(xyObjectAnimators);
animatorSet.setupStartValues();
animators.push(animatorSet);
break;

case common.Properties.scale:
xyObjectAnimators = Array.create(android.animation.Animator, 2);
nativeArray = Array.create("float", 1);
nativeArray[0] = propertyAnimation.value.x;
xyObjectAnimators[0] = android.animation.ObjectAnimator.ofFloat(nativeView, "scaleX", nativeArray);
xyObjectAnimators[0].setRepeatCount(Animation._getAndroidRepeatCount(propertyAnimation.iterations));
nativeArray = Array.create("float", 1);
nativeArray[0] = propertyAnimation.value.y;
xyObjectAnimators[1] = android.animation.ObjectAnimator.ofFloat(nativeView, "scaleY", nativeArray);
xyObjectAnimators[1].setRepeatCount(Animation._getAndroidRepeatCount(propertyAnimation.iterations));
originalValue1 = nativeView.getScaleX();
originalValue2 = nativeView.getScaleY();
propertyUpdateCallbacks.push(checkAnimation(function() {
propertyAnimation.target.style._setValue(styleModule.scaleXProperty, propertyAnimation.value.x, valueSource);
propertyAnimation.target.style._setValue(styleModule.scaleYProperty, propertyAnimation.value.y, valueSource);
}));
propertyResetCallbacks.push(checkAnimation(function() {
propertyAnimation.target.style._setValue(styleModule.scaleXProperty, originalValue1, valueSource);
propertyAnimation.target.style._setValue(styleModule.scaleYProperty, originalValue2, valueSource);
}));
animatorSet = new android.animation.AnimatorSet();
animatorSet.playTogether(xyObjectAnimators);
animatorSet.setupStartValues();
animators.push(animatorSet);
break;

case common.Properties.rotate:
originalValue1 = nativeView.getRotation();
nativeArray = Array.create("float", 1);
nativeArray[0] = propertyAnimation.value;
propertyUpdateCallbacks.push(checkAnimation(function() {
propertyAnimation.target.style._setValue(styleModule.rotateProperty, propertyAnimation.value, valueSource);
}));
propertyResetCallbacks.push(checkAnimation(function() {
propertyAnimation.target.style._setValue(styleModule.rotateProperty, originalValue1, valueSource);
}));
animators.push(android.animation.ObjectAnimator.ofFloat(nativeView, "rotation", nativeArray));
break;

default:
throw new Error("Cannot animate " + propertyAnimation.property);
}
var i = 0;
var length = animators.length;
for (;i < length; i++) {
if (propertyAnimation.duration !== undefined) {
animators[i].setDuration(propertyAnimation.duration);
}
if (propertyAnimation.delay !== undefined) {
animators[i].setStartDelay(propertyAnimation.delay);
}
if (propertyAnimation.iterations !== undefined && animators[i] instanceof android.animation.ValueAnimator) {
animators[i].setRepeatCount(Animation._getAndroidRepeatCount(propertyAnimation.iterations));
}
if (propertyAnimation.curve !== undefined) {
animators[i].setInterpolator(propertyAnimation.curve);
}
if (trace.enabled) {
trace.write("Animator created: " + animators[i], trace.categories.Animation);
}
}
this._animators = this._animators.concat(animators);
this._propertyUpdateCallbacks = this._propertyUpdateCallbacks.concat(propertyUpdateCallbacks);
this._propertyResetCallbacks = this._propertyResetCallbacks.concat(propertyResetCallbacks);
};
Animation._getAndroidRepeatCount = function(iterations) {
return iterations === Number.POSITIVE_INFINITY ? android.view.animation.Animation.INFINITE : iterations - 1;
};
Animation.prototype._enableHardwareAcceleration = function() {
for (var i = 0, length = this._propertyAnimations.length; i < length; i++) {
var cache = this._propertyAnimations[i].target._nativeView;
if (cache) {
var layerType = cache.getLayerType();
if (layerType !== android.view.View.LAYER_TYPE_HARDWARE) {
cache.layerType = layerType;
cache.setLayerType(android.view.View.LAYER_TYPE_HARDWARE, null);
}
}
}
};
Animation.prototype._disableHardwareAcceleration = function() {
for (var i = 0, length = this._propertyAnimations.length; i < length; i++) {
var cache = this._propertyAnimations[i].target._nativeView;
if (cache && cache.layerType !== undefined) {
cache.setLayerType(cache.layerType, null);
cache.layerType = undefined;
}
}
};
return Animation;
}(common.Animation);
exports.Animation = Animation;
var easeIn = lazy_1.default(function() {
return new android.view.animation.AccelerateInterpolator(1);
});
var easeOut = lazy_1.default(function() {
return new android.view.animation.DecelerateInterpolator(1);
});
var easeInOut = lazy_1.default(function() {
return new android.view.animation.AccelerateDecelerateInterpolator();
});
var linear = lazy_1.default(function() {
return new android.view.animation.LinearInterpolator();
});
var bounce = lazy_1.default(function() {
return new android.view.animation.BounceInterpolator();
});
function _resolveAnimationCurve(curve) {
switch (curve) {
case enums.AnimationCurve.easeIn:
if (trace.enabled) {
trace.write("Animation curve resolved to android.view.animation.AccelerateInterpolator(1).", trace.categories.Animation);
}
return easeIn();

case enums.AnimationCurve.easeOut:
if (trace.enabled) {
trace.write("Animation curve resolved to android.view.animation.DecelerateInterpolator(1).", trace.categories.Animation);
}
return easeOut();

case enums.AnimationCurve.easeInOut:
if (trace.enabled) {
trace.write("Animation curve resolved to android.view.animation.AccelerateDecelerateInterpolator().", trace.categories.Animation);
}
return easeInOut();

case enums.AnimationCurve.linear:
if (trace.enabled) {
trace.write("Animation curve resolved to android.view.animation.LinearInterpolator().", trace.categories.Animation);
}
return linear();

case enums.AnimationCurve.spring:
if (trace.enabled) {
trace.write("Animation curve resolved to android.view.animation.BounceInterpolator().", trace.categories.Animation);
}
return bounce();

case enums.AnimationCurve.ease:
return android.support.v4.view.animation.PathInterpolatorCompat.create(.25, .1, .25, 1);

default:
if (trace.enabled) {
trace.write("Animation curve resolved to original: " + curve, trace.categories.Animation);
}
if (curve instanceof common.CubicBezierAnimationCurve) {
var animationCurve = curve;
var interpolator = android.support.v4.view.animation.PathInterpolatorCompat.create(animationCurve.x1, animationCurve.y1, animationCurve.x2, animationCurve.y2);
return interpolator;
}
return curve;
}
}
exports._resolveAnimationCurve = _resolveAnimationCurve;
}, function(module, exports, __webpack_require__) {
var definition = __webpack_require__(25);
var colorModule = __webpack_require__(19);
var types = __webpack_require__(14);
var trace;
function ensureTrace() {
if (!trace) {
trace = __webpack_require__(16);
}
}
var Properties;
(function(Properties) {
Properties.opacity = "opacity";
Properties.backgroundColor = "backgroundColor";
Properties.translate = "translate";
Properties.rotate = "rotate";
Properties.scale = "scale";
})(Properties = exports.Properties || (exports.Properties = {}));
var CubicBezierAnimationCurve = function() {
function CubicBezierAnimationCurve(x1, y1, x2, y2) {
this.x1 = x1;
this.y1 = y1;
this.x2 = x2;
this.y2 = y2;
}
return CubicBezierAnimationCurve;
}();
exports.CubicBezierAnimationCurve = CubicBezierAnimationCurve;
var AnimationPromise = function() {
function AnimationPromise() {}
AnimationPromise.prototype.cancel = function() {};
AnimationPromise.prototype.then = function(onFulfilled, onRejected) {
return new AnimationPromise();
};
AnimationPromise.prototype.catch = function(onRejected) {
return new AnimationPromise();
};
return AnimationPromise;
}();
exports.AnimationPromise = AnimationPromise;
var Animation = function() {
function Animation(animationDefinitions, playSequentially) {
if (!animationDefinitions || animationDefinitions.length === 0) {
throw new Error("No animation definitions specified");
}
ensureTrace();
if (trace.enabled) {
trace.write("Analyzing " + animationDefinitions.length + " animation definitions...", trace.categories.Animation);
}
this._propertyAnimations = new Array();
var i = 0;
var length = animationDefinitions.length;
for (;i < length; i++) {
animationDefinitions[i].curve = definition._resolveAnimationCurve(animationDefinitions[i].curve);
this._propertyAnimations = this._propertyAnimations.concat(Animation._createPropertyAnimations(animationDefinitions[i]));
}
if (this._propertyAnimations.length === 0) {
throw new Error("Nothing to animate.");
}
if (trace.enabled) {
trace.write("Created " + this._propertyAnimations.length + " individual property animations.", trace.categories.Animation);
}
this._playSequentially = playSequentially;
}
Animation.prototype.play = function() {
var _this = this;
if (this.isPlaying) {
throw new Error("Animation is already playing.");
}
var animationFinishedPromise = new Promise(function(resolve, reject) {
_this._resolve = resolve;
_this._reject = reject;
});
this.fixupAnimationPromise(animationFinishedPromise);
this._isPlaying = true;
return animationFinishedPromise;
};
Animation.prototype.fixupAnimationPromise = function(promise) {
var _this = this;
promise.cancel = function() {
_this.cancel();
};
var _then = promise.then;
promise.then = function() {
var r = _then.apply(promise, arguments);
_this.fixupAnimationPromise(r);
return r;
};
var _catch = promise.catch;
promise.catch = function() {
var r = _catch.apply(promise, arguments);
_this.fixupAnimationPromise(r);
return r;
};
};
Animation.prototype.cancel = function() {
if (!this.isPlaying) {
throw new Error("Animation is not currently playing.");
}
};
Object.defineProperty(Animation.prototype, "isPlaying", {
get: function() {
return this._isPlaying;
},
enumerable: true,
configurable: true
});
Animation.prototype._resolveAnimationFinishedPromise = function() {
this._isPlaying = false;
this._resolve();
};
Animation.prototype._rejectAnimationFinishedPromise = function() {
this._isPlaying = false;
this._reject(new Error("Animation cancelled."));
};
Animation._createPropertyAnimations = function(animationDefinition) {
if (!animationDefinition.target) {
throw new Error("No animation target specified.");
}
for (var item in animationDefinition) {
if (!types.isDefined(animationDefinition[item])) {
continue;
}
if ((item === Properties.opacity || item === Properties.rotate || item === "duration" || item === "delay" || item === "iterations") && !types.isNumber(animationDefinition[item])) {
throw new Error("Property " + item + " must be valid number. Value: " + animationDefinition[item]);
} else if ((item === Properties.scale || item === Properties.translate) && (!types.isNumber(animationDefinition[item].x) || !types.isNumber(animationDefinition[item].y))) {
throw new Error("Property " + item + " must be valid Pair. Value: " + animationDefinition[item]);
} else if (item === Properties.backgroundColor && !colorModule.Color.isValid(animationDefinition.backgroundColor)) {
throw new Error("Property " + item + " must be valid color. Value: " + animationDefinition[item]);
}
}
var propertyAnimations = new Array();
if (animationDefinition.opacity !== undefined) {
propertyAnimations.push({
target: animationDefinition.target,
property: Properties.opacity,
value: animationDefinition.opacity,
duration: animationDefinition.duration,
delay: animationDefinition.delay,
iterations: animationDefinition.iterations,
curve: animationDefinition.curve
});
}
if (animationDefinition.backgroundColor !== undefined) {
propertyAnimations.push({
target: animationDefinition.target,
property: Properties.backgroundColor,
value: types.isString(animationDefinition.backgroundColor) ? new colorModule.Color(animationDefinition.backgroundColor) : animationDefinition.backgroundColor,
duration: animationDefinition.duration,
delay: animationDefinition.delay,
iterations: animationDefinition.iterations,
curve: animationDefinition.curve
});
}
if (animationDefinition.translate !== undefined) {
propertyAnimations.push({
target: animationDefinition.target,
property: Properties.translate,
value: animationDefinition.translate,
duration: animationDefinition.duration,
delay: animationDefinition.delay,
iterations: animationDefinition.iterations,
curve: animationDefinition.curve
});
}
if (animationDefinition.scale !== undefined) {
propertyAnimations.push({
target: animationDefinition.target,
property: Properties.scale,
value: animationDefinition.scale,
duration: animationDefinition.duration,
delay: animationDefinition.delay,
iterations: animationDefinition.iterations,
curve: animationDefinition.curve
});
}
if (animationDefinition.rotate !== undefined) {
propertyAnimations.push({
target: animationDefinition.target,
property: Properties.rotate,
value: animationDefinition.rotate,
duration: animationDefinition.duration,
delay: animationDefinition.delay,
iterations: animationDefinition.iterations,
curve: animationDefinition.curve
});
}
if (propertyAnimations.length === 0) {
throw new Error("No animation property specified.");
}
return propertyAnimations;
};
Animation._getAnimationInfo = function(animation) {
return JSON.stringify({
target: animation.target.id,
property: animation.property,
value: animation.value,
duration: animation.duration,
delay: animation.delay,
iterations: animation.iterations,
curve: animation.curve
});
};
return Animation;
}();
exports.Animation = Animation;
}, function(module, exports, __webpack_require__) {
var common = __webpack_require__(28);
var enums = __webpack_require__(24);
global.moduleMerge(common, exports);
var trace;
function ensureTrace() {
if (!trace) {
trace = __webpack_require__(16);
}
}
var layout;
(function(layout) {
var density = -1;
var metrics;
var MODE_SHIFT = 30;
var MODE_MASK = 3 << MODE_SHIFT;
var sdkVersion = -1;
var useOldMeasureSpec = false;
function makeMeasureSpec(size, mode) {
if (sdkVersion === -1) {
sdkVersion = ad.getApplicationContext().getApplicationInfo().targetSdkVersion;
useOldMeasureSpec = sdkVersion <= android.os.Build.VERSION_CODES.JELLY_BEAN_MR1;
}
if (useOldMeasureSpec) {
return size + mode;
}
return size & ~MODE_MASK | mode & MODE_MASK;
}
layout.makeMeasureSpec = makeMeasureSpec;
function getDisplayMetrics() {
if (!metrics) {
metrics = ad.getApplicationContext().getResources().getDisplayMetrics();
}
return metrics;
}
layout.getDisplayMetrics = getDisplayMetrics;
function getDisplayDensity() {
if (density === -1) {
density = getDisplayMetrics().density;
}
return density;
}
layout.getDisplayDensity = getDisplayDensity;
function toDevicePixels(value) {
return value * getDisplayDensity();
}
layout.toDevicePixels = toDevicePixels;
function toDeviceIndependentPixels(value) {
return value / getDisplayDensity();
}
layout.toDeviceIndependentPixels = toDeviceIndependentPixels;
})(layout = exports.layout || (exports.layout = {}));
var ad;
(function(ad) {
function setTextDecoration(view, value) {
var flags = 0;
var values = (value + "").split(" ");
if (values.indexOf(enums.TextDecoration.underline) !== -1) {
flags = flags | android.graphics.Paint.UNDERLINE_TEXT_FLAG;
}
if (values.indexOf(enums.TextDecoration.lineThrough) !== -1) {
flags = flags | android.graphics.Paint.STRIKE_THRU_TEXT_FLAG;
}
if (values.indexOf(enums.TextDecoration.none) === -1) {
view.setPaintFlags(flags);
} else {
view.setPaintFlags(0);
}
}
ad.setTextDecoration = setTextDecoration;
function setTextTransform(v, value) {
var view = v._nativeView;
var str = view.getText() + "";
var result = getTransformedString(value, view, str);
if (v.formattedText) {
for (var i = 0; i < v.formattedText.spans.length; i++) {
var span = v.formattedText.spans.getItem(i);
span.text = getTransformedString(value, view, span.text);
}
} else {
view.setText(result);
}
}
ad.setTextTransform = setTextTransform;
function getTransformedString(textTransform, view, stringToTransform) {
var result;
switch (textTransform) {
case enums.TextTransform.none:
default:
result = view["originalString"] || stringToTransform;
if (view["transformationMethod"]) {
view.setTransformationMethod(view["transformationMethod"]);
}
break;

case enums.TextTransform.uppercase:
view.setTransformationMethod(null);
result = stringToTransform.toUpperCase();
break;

case enums.TextTransform.lowercase:
view.setTransformationMethod(null);
result = stringToTransform.toLowerCase();
break;

case enums.TextTransform.capitalize:
view.setTransformationMethod(null);
result = getCapitalizedString(stringToTransform);
break;
}
if (!view["originalString"]) {
view["originalString"] = stringToTransform;
view["transformationMethod"] = view.getTransformationMethod();
}
return result;
}
ad.getTransformedString = getTransformedString;
function getCapitalizedString(str) {
var words = str.split(" ");
var newWords = [];
for (var i = 0; i < words.length; i++) {
var word = words[i].toLowerCase();
newWords.push(word.substr(0, 1).toUpperCase() + word.substring(1));
}
return newWords.join(" ");
}
function setWhiteSpace(view, value) {
view.setSingleLine(value === enums.WhiteSpace.nowrap);
view.setEllipsize(value === enums.WhiteSpace.nowrap ? android.text.TextUtils.TruncateAt.END : null);
}
ad.setWhiteSpace = setWhiteSpace;
var nativeApp;
function getApplication() {
if (!nativeApp) {
if (com.tns.NativeScriptApplication) {
nativeApp = com.tns.NativeScriptApplication.getInstance();
}
if (!nativeApp) {
var application = __webpack_require__(3);
nativeApp = application.android.nativeApp;
if (!nativeApp) {
var clazz = java.lang.Class.forName("android.app.ActivityThread");
if (clazz) {
var method = clazz.getMethod("currentApplication", null);
if (method) {
nativeApp = method.invoke(null, null);
}
}
}
}
if (!nativeApp) {
throw new Error("Failed to retrieve native Android Application object. If you have a custom android.app.Application type implemented make sure that you've called the '<application-module>.android.init' method.");
}
}
return nativeApp;
}
ad.getApplication = getApplication;
function getApplicationContext() {
var app = getApplication();
return app.getApplicationContext();
}
ad.getApplicationContext = getApplicationContext;
var inputMethodManager;
function getInputMethodManager() {
if (!inputMethodManager) {
inputMethodManager = getApplicationContext().getSystemService(android.content.Context.INPUT_METHOD_SERVICE);
}
return inputMethodManager;
}
ad.getInputMethodManager = getInputMethodManager;
function showSoftInput(nativeView) {
var imm = getInputMethodManager();
if (imm && nativeView instanceof android.view.View) {
imm.showSoftInput(nativeView, android.view.inputmethod.InputMethodManager.SHOW_IMPLICIT);
}
}
ad.showSoftInput = showSoftInput;
function dismissSoftInput(nativeView) {
var imm = getInputMethodManager();
if (imm && nativeView instanceof android.view.View) {
imm.hideSoftInputFromWindow(nativeView.getWindowToken(), 0);
}
}
ad.dismissSoftInput = dismissSoftInput;
var collections;
(function(collections) {
function stringArrayToStringSet(str) {
var hashSet = new java.util.HashSet();
if ("undefined" !== typeof str) {
for (var element in str) {
hashSet.add("" + str[element]);
}
}
return hashSet;
}
collections.stringArrayToStringSet = stringArrayToStringSet;
function stringSetToStringArray(stringSet) {
var arr = [];
if ("undefined" !== typeof stringSet) {
var it = stringSet.iterator();
while (it.hasNext()) {
var element = "" + it.next();
arr.push(element);
}
}
return arr;
}
collections.stringSetToStringArray = stringSetToStringArray;
})(collections = ad.collections || (ad.collections = {}));
var resources;
(function(resources_1) {
var attr;
var attrCache = new Map();
function getDrawableId(name) {
return getId(":drawable/" + name);
}
resources_1.getDrawableId = getDrawableId;
function getStringId(name) {
return getId(":string/" + name);
}
resources_1.getStringId = getStringId;
function getId(name) {
var resources = getApplicationContext().getResources();
var packageName = getApplicationContext().getPackageName();
var uri = packageName + name;
return resources.getIdentifier(uri, null, null);
}
resources_1.getId = getId;
function getPalleteColor(name, context) {
if (attrCache.has(name)) {
return attrCache.get(name);
}
var result = 0;
try {
if (!attr) {
attr = java.lang.Class.forName("android.support.v7.appcompat.R$attr");
}
var colorID = 0;
var field = attr.getField(name);
if (field) {
colorID = field.getInt(null);
}
if (colorID) {
var typedValue = new android.util.TypedValue();
context.getTheme().resolveAttribute(colorID, typedValue, true);
result = typedValue.data;
}
} catch (ex) {
ensureTrace();
trace.write("Cannot get pallete color: " + name, trace.categories.Error, trace.messageType.error);
}
attrCache.set(name, result);
return result;
}
resources_1.getPalleteColor = getPalleteColor;
})(resources = ad.resources || (ad.resources = {}));
})(ad = exports.ad || (exports.ad = {}));
function GC() {
gc();
}
exports.GC = GC;
function openUrl(location) {
var context = ad.getApplicationContext();
try {
var intent = new android.content.Intent(android.content.Intent.ACTION_VIEW, android.net.Uri.parse(location.trim()));
intent.addFlags(android.content.Intent.FLAG_ACTIVITY_NEW_TASK);
context.startActivity(intent);
} catch (e) {
ensureTrace();
trace.write("Error in OpenURL", trace.categories.Error, trace.messageType.error);
return false;
}
return true;
}
exports.openUrl = openUrl;
}, function(module, exports, __webpack_require__) {
var types = __webpack_require__(14);
exports.RESOURCE_PREFIX = "res://";
function copyFrom(source, target) {
if (types.isDefined(source) && types.isDefined(target)) {
var i;
var key;
var value;
var keys = Object.keys(source);
for (i = 0; i < keys.length; i++) {
key = keys[i];
value = source[key];
if (types.isDefined(value)) {
target[key] = value;
}
}
}
}
exports.copyFrom = copyFrom;
function parseJSON(source) {
var src = source.trim();
if (src.lastIndexOf(")") === src.length - 1) {
return JSON.parse(src.substring(src.indexOf("(") + 1, src.lastIndexOf(")")));
}
return JSON.parse(src);
}
exports.parseJSON = parseJSON;
function escapeRegexSymbols(source) {
var escapeRegex = /[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g;
return source.replace(escapeRegex, "\\$&");
}
exports.escapeRegexSymbols = escapeRegexSymbols;
function convertString(value) {
var result;
if (!types.isString(value)) {
result = value;
} else if (value.trim() === "") {
result = value;
} else {
var valueAsNumber = +value;
if (!isNaN(valueAsNumber)) {
result = valueAsNumber;
} else if (value && (value.toLowerCase() === "true" || value.toLowerCase() === "false")) {
result = value.toLowerCase() === "true" ? true : false;
} else {
result = value;
}
}
return result;
}
exports.convertString = convertString;
var layout;
(function(layout) {
var MODE_SHIFT = 30;
var MODE_MASK = 3 << MODE_SHIFT;
layout.UNSPECIFIED = 0 << MODE_SHIFT;
layout.EXACTLY = 1 << MODE_SHIFT;
layout.AT_MOST = 2 << MODE_SHIFT;
layout.MEASURED_HEIGHT_STATE_SHIFT = 16;
layout.MEASURED_STATE_TOO_SMALL = 16777216;
layout.MEASURED_STATE_MASK = 4278190080;
layout.MEASURED_SIZE_MASK = 16777215;
function getMode(mode) {
switch (mode) {
case layout.EXACTLY:
return "Exact";

case layout.AT_MOST:
return "AtMost";

default:
return "Unspecified";
}
}
layout.getMode = getMode;
function getMeasureSpecMode(spec) {
return spec & MODE_MASK;
}
layout.getMeasureSpecMode = getMeasureSpecMode;
function getMeasureSpecSize(spec) {
return spec & ~MODE_MASK;
}
layout.getMeasureSpecSize = getMeasureSpecSize;
function measureSpecToString(measureSpec) {
var mode = getMeasureSpecMode(measureSpec);
var size = getMeasureSpecSize(measureSpec);
var text = "MeasureSpec: ";
if (mode === layout.UNSPECIFIED) {
text += "UNSPECIFIED ";
} else if (mode === layout.EXACTLY) {
text += "EXACTLY ";
} else if (mode === layout.AT_MOST) {
text += "AT_MOST ";
} else {
text += mode + " ";
}
text += size;
return text;
}
layout.measureSpecToString = measureSpecToString;
})(layout = exports.layout || (exports.layout = {}));
function isFileOrResourcePath(path) {
if (!types.isString(path)) {
return false;
}
return path.indexOf("~/") === 0 || path.indexOf("/") === 0 || path.indexOf(exports.RESOURCE_PREFIX) === 0;
}
exports.isFileOrResourcePath = isFileOrResourcePath;
function isDataURI(uri) {
if (!types.isString(uri)) {
return false;
}
var firstSegment = uri.trim().split(",")[0];
return firstSegment && firstSegment.indexOf("data:") === 0 && firstSegment.indexOf("base64") >= 0;
}
exports.isDataURI = isDataURI;
function mergeSort(arr, compareFunc) {
if (arr.length < 2) {
return arr;
}
var middle = arr.length / 2;
var left = arr.slice(0, middle);
var right = arr.slice(middle, arr.length);
return merge(mergeSort(left, compareFunc), mergeSort(right, compareFunc), compareFunc);
}
exports.mergeSort = mergeSort;
function merge(left, right, compareFunc) {
var result = [];
while (left.length && right.length) {
if (compareFunc(left[0], right[0]) <= 0) {
result.push(left.shift());
} else {
result.push(right.shift());
}
}
while (left.length) {
result.push(left.shift());
}
while (right.length) {
result.push(right.shift());
}
return result;
}
exports.merge = merge;
}, function(module, exports) {
function lazy(action) {
var _value;
return function() {
return _value || (_value = action());
};
}
Object.defineProperty(exports, "__esModule", {
value: true
});
exports.default = lazy;
}, function(module, exports, __webpack_require__) {
var enums = __webpack_require__(24);
var common = __webpack_require__(31);
var application;
function ensureApplication() {
if (!application) {
application = __webpack_require__(3);
}
}
var types;
function ensureTypes() {
if (!types) {
types = __webpack_require__(14);
}
}
var trace;
function ensureTrace() {
if (!trace) {
trace = __webpack_require__(16);
}
}
var fs;
function ensureFS() {
if (!fs) {
fs = __webpack_require__(32);
}
}
var typefaceCache = new Map();
var appAssets;
var FONTS_BASE_PATH = "/fonts/";
var Font = function(_super) {
__extends(Font, _super);
function Font(family, size, style, weight) {
_super.call(this, family, size, style, weight);
}
Font.prototype.withFontFamily = function(family) {
return new Font(family, this.fontSize, this.fontStyle, this.fontWeight);
};
Font.prototype.withFontStyle = function(style) {
return new Font(this.fontFamily, this.fontSize, style, this.fontWeight);
};
Font.prototype.withFontWeight = function(weight) {
return new Font(this.fontFamily, this.fontSize, this.fontStyle, weight);
};
Font.prototype.withFontSize = function(size) {
return new Font(this.fontFamily, size, this.fontStyle, this.fontWeight);
};
Font.prototype.getAndroidTypeface = function() {
if (!this._typeface) {
this._typeface = createTypeface(this);
}
return this._typeface;
};
Font.default = new Font(undefined, undefined, enums.FontStyle.normal, enums.FontWeight.normal);
return Font;
}(common.Font);
exports.Font = Font;
function loadFontFromFile(fontFamily) {
ensureApplication();
appAssets = appAssets || application.android.context.getAssets();
if (!appAssets) {
return null;
}
ensureTypes();
var result = typefaceCache.get(fontFamily);
if (types.isUndefined(result)) {
result = null;
ensureTrace();
ensureFS();
var fontAssetPath;
var basePath = fs.path.join(fs.knownFolders.currentApp().path, "fonts", fontFamily);
if (fs.File.exists(basePath + ".ttf")) {
fontAssetPath = FONTS_BASE_PATH + fontFamily + ".ttf";
} else if (fs.File.exists(basePath + ".otf")) {
fontAssetPath = FONTS_BASE_PATH + fontFamily + ".otf";
} else {
if (trace.enabled) {
trace.write("Could not find font file for " + fontFamily, trace.categories.Error, trace.messageType.error);
}
}
if (fontAssetPath) {
try {
fontAssetPath = fs.path.join(fs.knownFolders.currentApp().path, fontAssetPath);
result = android.graphics.Typeface.createFromFile(fontAssetPath);
} catch (e) {
if (trace.enabled) {
trace.write("Error loading font asset: " + fontAssetPath, trace.categories.Error, trace.messageType.error);
}
}
}
typefaceCache.set(fontFamily, result);
}
return result;
}
function createTypeface(font) {
var fontStyle = 0;
if (font.isBold) {
fontStyle |= android.graphics.Typeface.BOLD;
}
if (font.isItalic) {
fontStyle |= android.graphics.Typeface.ITALIC;
}
var fonts = common.parseFontFamily(font.fontFamily);
var result = null;
for (var i = 0; i < fonts.length && !result; i++) {
switch (fonts[i].toLowerCase()) {
case common.genericFontFamilies.serif:
result = android.graphics.Typeface.create("serif" + getFontWeightSuffix(font.fontWeight), fontStyle);
break;

case common.genericFontFamilies.sansSerif:
case common.genericFontFamilies.system:
result = android.graphics.Typeface.create("sans-serif" + getFontWeightSuffix(font.fontWeight), fontStyle);
break;

case common.genericFontFamilies.monospace:
result = android.graphics.Typeface.create("monospace" + getFontWeightSuffix(font.fontWeight), fontStyle);
break;

default:
result = loadFontFromFile(fonts[i]);
if (result && fontStyle) {
result = android.graphics.Typeface.create(result, fontStyle);
}
break;
}
if (result) {
break;
}
}
if (!result) {
result = android.graphics.Typeface.create("sans-serif" + getFontWeightSuffix(font.fontWeight), fontStyle);
}
return result;
}
function getFontWeightSuffix(fontWeight) {
switch (fontWeight) {
case enums.FontWeight.thin:
return android.os.Build.VERSION.SDK_INT >= 16 ? "-thin" : "";

case enums.FontWeight.extraLight:
case enums.FontWeight.light:
return android.os.Build.VERSION.SDK_INT >= 16 ? "-light" : "";

case enums.FontWeight.normal:
case "400":
case undefined:
case null:
return "";

case enums.FontWeight.medium:
case enums.FontWeight.semiBold:
return android.os.Build.VERSION.SDK_INT >= 21 ? "-medium" : "";

case enums.FontWeight.bold:
case "700":
case enums.FontWeight.extraBold:
return "";

case enums.FontWeight.black:
return android.os.Build.VERSION.SDK_INT >= 21 ? "-black" : "";

default:
throw new Error('Invalid font weight: "' + fontWeight + '"');
}
}
}, function(module, exports, __webpack_require__) {
var enums = __webpack_require__(24);
var converters = __webpack_require__(23);
var Font = function() {
function Font(family, size, style, weight) {
this._fontFamily = family;
this._fontSize = size;
this._fontStyle = style;
this._fontWeight = weight;
}
Object.defineProperty(Font.prototype, "fontFamily", {
get: function() {
return this._fontFamily;
},
set: function(value) {
throw new Error("fontFamily is read-only");
},
enumerable: true,
configurable: true
});
Object.defineProperty(Font.prototype, "fontStyle", {
get: function() {
return this._fontStyle;
},
set: function(value) {
throw new Error("fontStyle is read-only");
},
enumerable: true,
configurable: true
});
Object.defineProperty(Font.prototype, "fontWeight", {
get: function() {
return this._fontWeight;
},
set: function(value) {
throw new Error("fontWeight is read-only");
},
enumerable: true,
configurable: true
});
Object.defineProperty(Font.prototype, "fontSize", {
get: function() {
return this._fontSize;
},
set: function(value) {
throw new Error("fontSize is read-only");
},
enumerable: true,
configurable: true
});
Object.defineProperty(Font.prototype, "isBold", {
get: function() {
var val = this._fontWeight.toLowerCase();
return val === enums.FontWeight.semiBold || val === enums.FontWeight.bold || val === "700" || val === enums.FontWeight.extraBold || val === enums.FontWeight.black;
},
set: function(value) {
throw new Error("isBold is read-only");
},
enumerable: true,
configurable: true
});
Object.defineProperty(Font.prototype, "isItalic", {
get: function() {
return this._fontStyle.toLowerCase() === enums.FontStyle.italic;
},
set: function(value) {
throw new Error("isItalic is read-only");
},
enumerable: true,
configurable: true
});
Font.prototype.getAndroidTypeface = function() {
return undefined;
};
Font.prototype.getUIFont = function(defaultFont) {
return undefined;
};
Font.prototype.withFontFamily = function(family) {
throw new Error("This should be called on the derived class");
};
Font.prototype.withFontStyle = function(style) {
throw new Error("This should be called on the derived class");
};
Font.prototype.withFontWeight = function(weight) {
throw new Error("This should be called on the derived class");
};
Font.prototype.withFontSize = function(size) {
throw new Error("This should be called on the derived class");
};
Font.equals = function(value1, value2) {
if (!value1 && !value2) {
return true;
}
if (!value1 || !value2) {
return false;
}
return value1.fontFamily === value2.fontFamily && value1.fontSize === value2.fontSize && value1.fontStyle === value2.fontStyle && value1.fontWeight === value2.fontWeight;
};
Font.parse = function(cssValue) {
var parsed = parseFont(cssValue);
var size = converters.fontSizeConverter(parsed.fontSize);
size = !!size ? size : undefined;
return new Font(parsed.fontFamily, size, parsed.fontStyle, parsed.fontWeight);
};
Font.default = undefined;
return Font;
}();
exports.Font = Font;
function parseFontFamily(value) {
var result = new Array();
if (!value) {
return result;
}
var split = value.split(",");
for (var i = 0; i < split.length; i++) {
var str = split[i].trim().replace(/['"]+/g, "");
if (str) {
result.push(str);
}
}
return result;
}
exports.parseFontFamily = parseFontFamily;
var genericFontFamilies;
(function(genericFontFamilies) {
genericFontFamilies.serif = "serif";
genericFontFamilies.sansSerif = "sans-serif";
genericFontFamilies.monospace = "monospace";
genericFontFamilies.system = "system";
})(genericFontFamilies = exports.genericFontFamilies || (exports.genericFontFamilies = {}));
var styles = new Set();
[ "italic", "oblique" ].forEach(function(val, i, a) {
return styles.add(val);
});
var weights = new Set();
[ "normal", "bold", "100", "200", "300", "400", "500", "600", "700", "800", "900" ].forEach(function(val, i, a) {
return weights.add(val);
});
function parseFont(fontValue) {
var result = {
fontStyle: "normal",
fontVariant: "normal",
fontWeight: "normal"
};
var parts = fontValue.split(/\s+/);
var part;
while (part = parts.shift()) {
if (part === "normal") {} else if (part === "small-caps") {
result.fontVariant = part;
} else if (styles.has(part)) {
result.fontStyle = part;
} else if (weights.has(part)) {
result.fontWeight = part;
} else if (!result.fontSize) {
var sizes = part.split("/");
result.fontSize = sizes[0];
result.lineHeight = sizes.length > 1 ? sizes[1] : undefined;
} else {
result.fontFamily = part;
if (parts.length) {
result.fontFamily += " " + parts.join(" ");
}
break;
}
}
return result;
}
}, function(module, exports, __webpack_require__) {
var file_access_module = __webpack_require__(33);
var fileAccess;
var getFileAccess = function() {
if (!fileAccess) {
fileAccess = new file_access_module.FileSystemAccess();
}
return fileAccess;
};
var platform;
function ensurePlatform() {
if (!platform) {
platform = __webpack_require__(35);
}
}
var nameProperty = "_name";
var pathProperty = "_path";
var isKnownProperty = "_isKnown";
var fileLockedProperty = "_locked";
var extensionProperty = "_extension";
var lastModifiedProperty = "_lastModified";
var createFile = function(info) {
var file = new File();
file[pathProperty] = info.path;
file[nameProperty] = info.name;
file[extensionProperty] = info.extension;
return file;
};
var createFolder = function(info) {
var documents = knownFolders.documents();
if (info.path === documents.path) {
return documents;
}
var temp = knownFolders.temp();
if (info.path === temp.path) {
return temp;
}
var folder = new Folder();
folder[pathProperty] = info.path;
folder[nameProperty] = info.name;
return folder;
};
var FileSystemEntity = function() {
function FileSystemEntity() {}
Object.defineProperty(FileSystemEntity.prototype, "parent", {
get: function() {
var onError = function(error) {
throw error;
};
var folderInfo = getFileAccess().getParent(this.path, onError);
if (!folderInfo) {
return undefined;
}
return createFolder(folderInfo);
},
enumerable: true,
configurable: true
});
FileSystemEntity.prototype.remove = function() {
var _this = this;
return new Promise(function(resolve, reject) {
var hasError = false;
var localError = function(error) {
hasError = true;
reject(error);
};
_this.removeSync(localError);
if (!hasError) {
resolve();
}
});
};
FileSystemEntity.prototype.removeSync = function(onError) {
if (this[isKnownProperty]) {
if (onError) {
onError({
message: "Cannot delete known folder."
});
}
return;
}
var fileAccess = getFileAccess();
if (this instanceof File) {
fileAccess.deleteFile(this.path, onError);
} else if (this instanceof Folder) {
fileAccess.deleteFolder(this.path, onError);
}
};
FileSystemEntity.prototype.rename = function(newName) {
var _this = this;
return new Promise(function(resolve, reject) {
var hasError = false;
var localError = function(error) {
hasError = true;
reject(error);
};
_this.renameSync(newName, localError);
if (!hasError) {
resolve();
}
});
};
FileSystemEntity.prototype.renameSync = function(newName, onError) {
if (this[isKnownProperty]) {
if (onError) {
onError(new Error("Cannot rename known folder."));
}
return;
}
var parentFolder = this.parent;
if (!parentFolder) {
if (onError) {
onError(new Error("No parent folder."));
}
return;
}
var fileAccess = getFileAccess();
var path = parentFolder.path;
var newPath = fileAccess.joinPath(path, newName);
var hasError = false;
var localError = function(error) {
hasError = true;
if (onError) {
onError(error);
}
return null;
};
fileAccess.rename(this.path, newPath, localError);
this[pathProperty] = newPath;
this[nameProperty] = newName;
if (this instanceof File) {
this[extensionProperty] = fileAccess.getFileExtension(newPath);
}
};
Object.defineProperty(FileSystemEntity.prototype, "name", {
get: function() {
return this[nameProperty];
},
enumerable: true,
configurable: true
});
Object.defineProperty(FileSystemEntity.prototype, "path", {
get: function() {
return this[pathProperty];
},
enumerable: true,
configurable: true
});
Object.defineProperty(FileSystemEntity.prototype, "lastModified", {
get: function() {
var value = this[lastModifiedProperty];
if (!this[lastModifiedProperty]) {
value = this[lastModifiedProperty] = getFileAccess().getLastModified(this.path);
}
return value;
},
enumerable: true,
configurable: true
});
return FileSystemEntity;
}();
exports.FileSystemEntity = FileSystemEntity;
var File = function(_super) {
__extends(File, _super);
function File() {
_super.apply(this, arguments);
}
File.fromPath = function(path) {
var onError = function(error) {
throw error;
};
var fileInfo = getFileAccess().getFile(path, onError);
if (!fileInfo) {
return undefined;
}
return createFile(fileInfo);
};
File.exists = function(path) {
return getFileAccess().fileExists(path);
};
Object.defineProperty(File.prototype, "extension", {
get: function() {
return this[extensionProperty];
},
enumerable: true,
configurable: true
});
Object.defineProperty(File.prototype, "isLocked", {
get: function() {
return !!this[fileLockedProperty];
},
enumerable: true,
configurable: true
});
File.prototype.readSync = function(onError) {
this.checkAccess();
this[fileLockedProperty] = true;
var that = this;
var localError = function(error) {
that[fileLockedProperty] = false;
if (onError) {
onError(error);
}
};
var content = getFileAccess().read(this.path, localError);
this[fileLockedProperty] = false;
return content;
};
File.prototype.writeSync = function(content, onError) {
this.checkAccess();
try {
this[fileLockedProperty] = true;
var that = this;
var localError = function(error) {
that[fileLockedProperty] = false;
if (onError) {
onError(error);
}
};
getFileAccess().write(this.path, content, localError);
} finally {
this[fileLockedProperty] = false;
}
};
File.prototype.readText = function(encoding) {
var _this = this;
return new Promise(function(resolve, reject) {
var hasError = false;
var localError = function(error) {
hasError = true;
reject(error);
};
var content = _this.readTextSync(localError, encoding);
if (!hasError) {
resolve(content);
}
});
};
File.prototype.readTextSync = function(onError, encoding) {
this.checkAccess();
this[fileLockedProperty] = true;
var that = this;
var localError = function(error) {
that[fileLockedProperty] = false;
if (onError) {
onError(error);
}
};
var content = getFileAccess().readText(this.path, localError, encoding);
this[fileLockedProperty] = false;
return content;
};
File.prototype.writeText = function(content, encoding) {
var _this = this;
return new Promise(function(resolve, reject) {
var hasError = false;
var localError = function(error) {
hasError = true;
reject(error);
};
_this.writeTextSync(content, localError, encoding);
if (!hasError) {
resolve();
}
});
};
File.prototype.writeTextSync = function(content, onError, encoding) {
this.checkAccess();
try {
this[fileLockedProperty] = true;
var that = this;
var localError = function(error) {
that[fileLockedProperty] = false;
if (onError) {
onError(error);
}
};
getFileAccess().writeText(this.path, content, localError, encoding);
} finally {
this[fileLockedProperty] = false;
}
};
File.prototype.checkAccess = function() {
if (this.isLocked) {
throw new Error("Cannot access a locked file.");
}
};
return File;
}(FileSystemEntity);
exports.File = File;
var Folder = function(_super) {
__extends(Folder, _super);
function Folder() {
_super.apply(this, arguments);
}
Folder.fromPath = function(path) {
var onError = function(error) {
throw error;
};
var folderInfo = getFileAccess().getFolder(path, onError);
if (!folderInfo) {
return undefined;
}
return createFolder(folderInfo);
};
Folder.exists = function(path) {
return getFileAccess().folderExists(path);
};
Folder.prototype.contains = function(name) {
var fileAccess = getFileAccess();
var path = fileAccess.joinPath(this.path, name);
if (fileAccess.fileExists(path)) {
return true;
}
return fileAccess.folderExists(path);
};
Folder.prototype.clear = function() {
var _this = this;
return new Promise(function(resolve, reject) {
var hasError = false;
var onError = function(error) {
hasError = true;
reject(error);
};
_this.clearSync(onError);
if (!hasError) {
resolve();
}
});
};
Folder.prototype.clearSync = function(onError) {
getFileAccess().emptyFolder(this.path, onError);
};
Object.defineProperty(Folder.prototype, "isKnown", {
get: function() {
return this[isKnownProperty];
},
enumerable: true,
configurable: true
});
Folder.prototype.getFile = function(name) {
var fileAccess = getFileAccess();
var path = fileAccess.joinPath(this.path, name);
var onError = function(error) {
throw error;
};
var fileInfo = fileAccess.getFile(path, onError);
if (!fileInfo) {
return undefined;
}
return createFile(fileInfo);
};
Folder.prototype.getFolder = function(name) {
var fileAccess = getFileAccess();
var path = fileAccess.joinPath(this.path, name);
var onError = function(error) {
throw error;
};
var folderInfo = fileAccess.getFolder(path, onError);
if (!folderInfo) {
return undefined;
}
return createFolder(folderInfo);
};
Folder.prototype.getEntities = function() {
var _this = this;
return new Promise(function(resolve, reject) {
var hasError = false;
var localError = function(error) {
hasError = true;
reject(error);
};
var entities = _this.getEntitiesSync(localError);
if (!hasError) {
resolve(entities);
}
});
};
Folder.prototype.getEntitiesSync = function(onError) {
var fileInfos = getFileAccess().getEntities(this.path, onError);
if (!fileInfos) {
return null;
}
var entities = new Array();
var i;
for (i = 0; i < fileInfos.length; i++) {
if (fileInfos[i].extension) {
entities.push(createFile(fileInfos[i]));
} else {
entities.push(createFolder(fileInfos[i]));
}
}
return entities;
};
Folder.prototype.eachEntity = function(onEntity) {
if (!onEntity) {
return;
}
var onSuccess = function(fileInfo) {
var entity;
if (fileInfo.extension) {
entity = createFile(fileInfo);
} else {
entity = createFolder(fileInfo);
}
return onEntity(entity);
};
var onError = function(error) {
throw error;
};
getFileAccess().eachEntity(this.path, onSuccess, onError);
};
return Folder;
}(FileSystemEntity);
exports.Folder = Folder;
var knownFolders;
(function(knownFolders) {
var _documents;
var _temp;
var _app;
knownFolders.documents = function() {
if (!_documents) {
var path = getFileAccess().getDocumentsFolderPath();
_documents = new Folder();
_documents[pathProperty] = path;
_documents[isKnownProperty] = true;
}
return _documents;
};
knownFolders.temp = function() {
if (!_temp) {
var path = getFileAccess().getTempFolderPath();
_temp = new Folder();
_temp[pathProperty] = path;
_temp[isKnownProperty] = true;
}
return _temp;
};
knownFolders.currentApp = function() {
if (!_app) {
var path = getFileAccess().getCurrentAppPath();
_app = new Folder();
_app[pathProperty] = path;
_app[isKnownProperty] = true;
}
return _app;
};
var ios;
(function(ios) {
function _checkPlatform(knownFolderName) {
ensurePlatform();
if (!platform.isIOS) {
throw new Error('The "' + knownFolderName + '" known folder is available on iOS only!');
}
}
var _library;
ios.library = function() {
_checkPlatform("library");
if (!_library) {
var existingFolderInfo = getExistingFolderInfo(5);
if (existingFolderInfo) {
_library = existingFolderInfo.folder;
_library[pathProperty] = existingFolderInfo.path;
_library[isKnownProperty] = true;
}
}
return _library;
};
var _developer;
ios.developer = function() {
_checkPlatform("developer");
if (!_developer) {
var existingFolderInfo = getExistingFolderInfo(6);
if (existingFolderInfo) {
_developer = existingFolderInfo.folder;
_developer[pathProperty] = existingFolderInfo.path;
_developer[isKnownProperty] = true;
}
}
return _developer;
};
var _desktop;
ios.desktop = function() {
_checkPlatform("desktop");
if (!_desktop) {
var existingFolderInfo = getExistingFolderInfo(12);
if (existingFolderInfo) {
_desktop = existingFolderInfo.folder;
_desktop[pathProperty] = existingFolderInfo.path;
_desktop[isKnownProperty] = true;
}
}
return _desktop;
};
var _downloads;
ios.downloads = function() {
_checkPlatform("downloads");
if (!_downloads) {
var existingFolderInfo = getExistingFolderInfo(15);
if (existingFolderInfo) {
_downloads = existingFolderInfo.folder;
_downloads[pathProperty] = existingFolderInfo.path;
_downloads[isKnownProperty] = true;
}
}
return _downloads;
};
var _movies;
ios.movies = function() {
_checkPlatform("movies");
if (!_movies) {
var existingFolderInfo = getExistingFolderInfo(17);
if (existingFolderInfo) {
_movies = existingFolderInfo.folder;
_movies[pathProperty] = existingFolderInfo.path;
_movies[isKnownProperty] = true;
}
}
return _movies;
};
var _music;
ios.music = function() {
_checkPlatform("music");
if (!_music) {
var existingFolderInfo = getExistingFolderInfo(18);
if (existingFolderInfo) {
_music = existingFolderInfo.folder;
_music[pathProperty] = existingFolderInfo.path;
_music[isKnownProperty] = true;
}
}
return _music;
};
var _pictures;
ios.pictures = function() {
_checkPlatform("pictures");
if (!_pictures) {
var existingFolderInfo = getExistingFolderInfo(19);
if (existingFolderInfo) {
_pictures = existingFolderInfo.folder;
_pictures[pathProperty] = existingFolderInfo.path;
_pictures[isKnownProperty] = true;
}
}
return _pictures;
};
var _sharedPublic;
ios.sharedPublic = function() {
_checkPlatform("sharedPublic");
if (!_sharedPublic) {
var existingFolderInfo = getExistingFolderInfo(21);
if (existingFolderInfo) {
_sharedPublic = existingFolderInfo.folder;
_sharedPublic[pathProperty] = existingFolderInfo.path;
_sharedPublic[isKnownProperty] = true;
}
}
return _sharedPublic;
};
function getExistingFolderInfo(pathDirectory) {
var fileAccess = getFileAccess();
var folderPath = fileAccess.getKnownPath(pathDirectory);
var folderInfo = fileAccess.getExistingFolder(folderPath);
if (folderInfo) {
return {
folder: createFolder(folderInfo),
path: folderPath
};
}
return undefined;
}
})(ios = knownFolders.ios || (knownFolders.ios = {}));
})(knownFolders = exports.knownFolders || (exports.knownFolders = {}));
var path;
(function(path_1) {
function normalize(path) {
return getFileAccess().normalizePath(path);
}
path_1.normalize = normalize;
function join() {
var paths = [];
for (var _i = 0; _i < arguments.length; _i++) {
paths[_i - 0] = arguments[_i];
}
var fileAccess = getFileAccess();
return fileAccess.joinPaths(paths);
}
path_1.join = join;
path_1.separator = getFileAccess().getPathSeparator();
})(path = exports.path || (exports.path = {}));
}, function(module, exports, __webpack_require__) {
var textModule = __webpack_require__(34);
var utils = __webpack_require__(27);
var FileSystemAccess = function() {
function FileSystemAccess() {
this._pathSeparator = "/";
}
FileSystemAccess.prototype.getLastModified = function(path) {
var javaFile = new java.io.File(path);
return new Date(javaFile.lastModified());
};
FileSystemAccess.prototype.getParent = function(path, onError) {
try {
var javaFile = new java.io.File(path);
var parent = javaFile.getParentFile();
return {
path: parent.getAbsolutePath(),
name: parent.getName()
};
} catch (exception) {
if (onError) {
onError(exception);
}
return undefined;
}
};
FileSystemAccess.prototype.getFile = function(path, onError) {
return this.ensureFile(new java.io.File(path), false, onError);
};
FileSystemAccess.prototype.getFolder = function(path, onError) {
var javaFile = new java.io.File(path);
var dirInfo = this.ensureFile(javaFile, true, onError);
if (!dirInfo) {
return undefined;
}
return {
path: dirInfo.path,
name: dirInfo.name
};
};
FileSystemAccess.prototype.eachEntity = function(path, onEntity, onError) {
if (!onEntity) {
return;
}
this.enumEntities(path, onEntity, onError);
};
FileSystemAccess.prototype.getEntities = function(path, onError) {
var fileInfos = new Array();
var onEntity = function(entity) {
fileInfos.push(entity);
return true;
};
var errorOccurred;
var localError = function(error) {
if (onError) {
onError(error);
}
errorOccurred = true;
};
this.enumEntities(path, onEntity, localError);
if (!errorOccurred) {
return fileInfos;
}
return null;
};
FileSystemAccess.prototype.fileExists = function(path) {
var file = new java.io.File(path);
return file.exists();
};
FileSystemAccess.prototype.folderExists = function(path) {
var file = new java.io.File(path);
return file.exists() && file.isDirectory();
};
FileSystemAccess.prototype.deleteFile = function(path, onError) {
try {
var javaFile = new java.io.File(path);
if (!javaFile.isFile()) {
if (onError) {
onError({
message: "The specified parameter is not a File entity."
});
}
return;
}
if (!javaFile.delete()) {
if (onError) {
onError({
message: "File deletion failed"
});
}
}
} catch (exception) {
if (onError) {
onError(exception);
}
}
};
FileSystemAccess.prototype.deleteFolder = function(path, onError) {
try {
var javaFile = new java.io.File(path);
if (!javaFile.getCanonicalFile().isDirectory()) {
if (onError) {
onError({
message: "The specified parameter is not a Folder entity."
});
}
return;
}
this.deleteFolderContent(javaFile);
if (!javaFile.delete()) {
if (onError) {
onError({
message: "Folder deletion failed."
});
}
}
} catch (exception) {
if (onError) {
onError(exception);
}
}
};
FileSystemAccess.prototype.emptyFolder = function(path, onError) {
try {
var javaFile = new java.io.File(path);
if (!javaFile.getCanonicalFile().isDirectory()) {
if (onError) {
onError({
message: "The specified parameter is not a Folder entity."
});
}
return;
}
this.deleteFolderContent(javaFile);
} catch (exception) {
if (onError) {
onError(exception);
}
}
};
FileSystemAccess.prototype.rename = function(path, newPath, onError) {
var javaFile = new java.io.File(path);
if (!javaFile.exists()) {
if (onError) {
onError(new Error("The file to rename does not exist"));
}
return;
}
var newFile = new java.io.File(newPath);
if (newFile.exists()) {
if (onError) {
onError(new Error("A file with the same name already exists."));
}
return;
}
if (!javaFile.renameTo(newFile)) {
if (onError) {
onError(new Error("Failed to rename file '" + path + "' to '" + newPath + "'"));
}
}
};
FileSystemAccess.prototype.getDocumentsFolderPath = function() {
var dir = utils.ad.getApplicationContext().getFilesDir();
return dir.getAbsolutePath();
};
FileSystemAccess.prototype.getLogicalRootPath = function() {
var dir = utils.ad.getApplicationContext().getFilesDir();
return dir.getCanonicalPath();
};
FileSystemAccess.prototype.getTempFolderPath = function() {
var dir = utils.ad.getApplicationContext().getCacheDir();
return dir.getAbsolutePath();
};
FileSystemAccess.prototype.getCurrentAppPath = function() {
return this.getLogicalRootPath() + "/app";
};
FileSystemAccess.prototype.read = function(path, onError) {
try {
var javaFile = new java.io.File(path);
var stream = new java.io.FileInputStream(javaFile);
var bytes = Array.create("byte", javaFile.length());
var dataInputStream = new java.io.DataInputStream(stream);
dataInputStream.readFully(bytes);
return bytes;
} catch (exception) {
if (onError) {
onError(exception);
}
}
};
FileSystemAccess.prototype.write = function(path, bytes, onError) {
try {
var javaFile = new java.io.File(path);
var stream = new java.io.FileOutputStream(javaFile);
stream.write(bytes, 0, bytes.length);
stream.close();
} catch (exception) {
if (onError) {
onError(exception);
}
}
};
FileSystemAccess.prototype.readText = function(path, onError, encoding) {
try {
var types = __webpack_require__(14);
var javaFile = new java.io.File(path);
var stream = new java.io.FileInputStream(javaFile);
var actualEncoding = encoding;
if (!actualEncoding) {
actualEncoding = textModule.encoding.UTF_8;
}
var reader = new java.io.InputStreamReader(stream, actualEncoding);
var bufferedReader = new java.io.BufferedReader(reader);
var line = undefined;
var result = "";
while (true) {
line = bufferedReader.readLine();
if (types.isNullOrUndefined(line)) {
break;
}
if (result.length > 0) {
result += "\n";
}
result += line;
}
if (actualEncoding === textModule.encoding.UTF_8) {
result = FileSystemAccess._removeUtf8Bom(result);
}
bufferedReader.close();
return result;
} catch (exception) {
if (onError) {
onError(exception);
}
}
};
FileSystemAccess._removeUtf8Bom = function(s) {
if (s.charCodeAt(0) === 65279) {
s = s.slice(1);
}
return s;
};
FileSystemAccess.prototype.writeText = function(path, content, onError, encoding) {
try {
var javaFile = new java.io.File(path);
var stream = new java.io.FileOutputStream(javaFile);
var actualEncoding = encoding;
if (!actualEncoding) {
actualEncoding = textModule.encoding.UTF_8;
}
var writer = new java.io.OutputStreamWriter(stream, actualEncoding);
writer.write(content);
writer.close();
} catch (exception) {
if (onError) {
onError(exception);
}
}
};
FileSystemAccess.prototype.deleteFolderContent = function(file) {
var filesList = file.listFiles();
if (filesList.length === 0) {
return true;
}
var i, childFile, success = false;
for (i = 0; i < filesList.length; i++) {
childFile = filesList[i];
if (childFile.getCanonicalFile().isDirectory()) {
success = this.deleteFolderContent(childFile);
if (!success) {
break;
}
}
success = childFile.delete();
}
return success;
};
FileSystemAccess.prototype.ensureFile = function(javaFile, isFolder, onError) {
try {
if (!javaFile.exists()) {
var created;
if (isFolder) {
created = javaFile.mkdirs();
} else {
javaFile.getParentFile().mkdirs();
created = javaFile.createNewFile();
}
if (!created) {
if (onError) {
onError("Failed to create new java File for path " + javaFile.getAbsolutePath());
}
return undefined;
} else {
javaFile.setReadable(true);
javaFile.setWritable(true);
}
}
var path = javaFile.getAbsolutePath();
return {
path: path,
name: javaFile.getName(),
extension: this.getFileExtension(path)
};
} catch (exception) {
if (onError) {
onError(exception);
}
return undefined;
}
};
FileSystemAccess.prototype.getFileExtension = function(path) {
var dotIndex = path.lastIndexOf(".");
if (dotIndex && dotIndex >= 0 && dotIndex < path.length) {
return path.substring(dotIndex);
}
return "";
};
FileSystemAccess.prototype.enumEntities = function(path, callback, onError) {
try {
var javaFile = new java.io.File(path);
if (!javaFile.getCanonicalFile().isDirectory()) {
if (onError) {
onError("There is no folder existing at path " + path);
}
return;
}
var filesList = javaFile.listFiles();
var length = filesList.length;
var i;
var info;
var retVal;
for (i = 0; i < length; i++) {
javaFile = filesList[i];
info = {
path: javaFile.getAbsolutePath(),
name: javaFile.getName()
};
if (javaFile.isFile()) {
info.extension = this.getFileExtension(info.path);
}
retVal = callback(info);
if (retVal === false) {
break;
}
}
} catch (exception) {
if (onError) {
onError(exception);
}
}
};
FileSystemAccess.prototype.getPathSeparator = function() {
return this._pathSeparator;
};
FileSystemAccess.prototype.normalizePath = function(path) {
var file = new java.io.File(path);
return file.getAbsolutePath();
};
FileSystemAccess.prototype.joinPath = function(left, right) {
var file1 = new java.io.File(left);
var file2 = new java.io.File(file1, right);
return file2.getPath();
};
FileSystemAccess.prototype.joinPaths = function(paths) {
if (!paths || paths.length === 0) {
return "";
}
if (paths.length === 1) {
return paths[0];
}
var i, result = paths[0];
for (i = 1; i < paths.length; i++) {
result = this.joinPath(result, paths[i]);
}
return result;
};
return FileSystemAccess;
}();
exports.FileSystemAccess = FileSystemAccess;
}, function(module, exports) {
var encoding;
(function(encoding) {
encoding.ISO_8859_1 = "ISO-8859-1";
encoding.US_ASCII = "US-ASCII";
encoding.UTF_16 = "UTF-16";
encoding.UTF_16BE = "UTF-16BE";
encoding.UTF_16LE = "UTF-16LE";
encoding.UTF_8 = "UTF-8";
})(encoding = exports.encoding || (exports.encoding = {}));
}, function(module, exports, __webpack_require__) {
var utils = __webpack_require__(27);
var MIN_TABLET_PIXELS = 600;
var platformNames;
(function(platformNames) {
platformNames.android = "Android";
platformNames.ios = "iOS";
})(platformNames = exports.platformNames || (exports.platformNames = {}));
var Device = function() {
function Device() {}
Object.defineProperty(Device.prototype, "os", {
get: function() {
return platformNames.android;
},
enumerable: true,
configurable: true
});
Object.defineProperty(Device.prototype, "manufacturer", {
get: function() {
if (!this._manufacturer) {
this._manufacturer = android.os.Build.MANUFACTURER;
}
return this._manufacturer;
},
enumerable: true,
configurable: true
});
Object.defineProperty(Device.prototype, "osVersion", {
get: function() {
if (!this._osVersion) {
this._osVersion = android.os.Build.VERSION.RELEASE;
}
return this._osVersion;
},
enumerable: true,
configurable: true
});
Object.defineProperty(Device.prototype, "model", {
get: function() {
if (!this._model) {
this._model = android.os.Build.MODEL;
}
return this._model;
},
enumerable: true,
configurable: true
});
Object.defineProperty(Device.prototype, "sdkVersion", {
get: function() {
if (!this._sdkVersion) {
this._sdkVersion = android.os.Build.VERSION.SDK;
}
return this._sdkVersion;
},
enumerable: true,
configurable: true
});
Object.defineProperty(Device.prototype, "deviceType", {
get: function() {
if (!this._deviceType) {
var dips = Math.min(screen.mainScreen.widthPixels, screen.mainScreen.heightPixels) / screen.mainScreen.scale;
var enums = __webpack_require__(24);
if (dips >= MIN_TABLET_PIXELS) {
this._deviceType = enums.DeviceType.Tablet;
} else {
this._deviceType = enums.DeviceType.Phone;
}
}
return this._deviceType;
},
enumerable: true,
configurable: true
});
Object.defineProperty(Device.prototype, "uuid", {
get: function() {
if (!this._uuid) {
this._uuid = android.provider.Settings.Secure.getString(utils.ad.getApplicationContext().getContentResolver(), android.provider.Settings.Secure.ANDROID_ID);
}
return this._uuid;
},
enumerable: true,
configurable: true
});
Object.defineProperty(Device.prototype, "language", {
get: function() {
if (!this._language) {
this._language = java.util.Locale.getDefault().getLanguage().replace("_", "-");
}
return this._language;
},
enumerable: true,
configurable: true
});
Object.defineProperty(Device.prototype, "region", {
get: function() {
if (!this._region) {
this._region = java.util.Locale.getDefault().getCountry();
}
return this._region;
},
enumerable: true,
configurable: true
});
return Device;
}();
var MainScreen = function() {
function MainScreen() {}
MainScreen.prototype._invalidate = function() {
this._metrics = null;
};
Object.defineProperty(MainScreen.prototype, "metrics", {
get: function() {
if (!this._metrics) {
this._metrics = new android.util.DisplayMetrics();
utils.ad.getApplicationContext().getSystemService(android.content.Context.WINDOW_SERVICE).getDefaultDisplay().getRealMetrics(this._metrics);
}
return this._metrics;
},
enumerable: true,
configurable: true
});
Object.defineProperty(MainScreen.prototype, "widthPixels", {
get: function() {
return this.metrics.widthPixels;
},
enumerable: true,
configurable: true
});
Object.defineProperty(MainScreen.prototype, "heightPixels", {
get: function() {
return this.metrics.heightPixels;
},
enumerable: true,
configurable: true
});
Object.defineProperty(MainScreen.prototype, "scale", {
get: function() {
return this.metrics.density;
},
enumerable: true,
configurable: true
});
Object.defineProperty(MainScreen.prototype, "widthDIPs", {
get: function() {
return this.metrics.widthPixels / this.metrics.density;
},
enumerable: true,
configurable: true
});
Object.defineProperty(MainScreen.prototype, "heightDIPs", {
get: function() {
return this.metrics.heightPixels / this.metrics.density;
},
enumerable: true,
configurable: true
});
return MainScreen;
}();
exports.device = new Device();
var screen;
(function(screen) {
screen.mainScreen = new MainScreen();
})(screen = exports.screen || (exports.screen = {}));
exports.isAndroid = true;
}, function(module, exports, __webpack_require__) {
var utils = __webpack_require__(27);
var common = __webpack_require__(37);
var types = __webpack_require__(14);
var cssValue = __webpack_require__(38);
var button;
var style;
function ensureLazyRequires() {
if (!button) {
button = __webpack_require__(39);
}
if (!style) {
style = __webpack_require__(15);
}
}
global.moduleMerge(common, exports);
var ad;
(function(ad) {
var SDK;
function getSDK() {
if (!SDK) {
SDK = android.os.Build.VERSION.SDK_INT;
}
return SDK;
}
var _defaultBackgrounds = new Map();
function isSetColorFilterOnlyWidget(nativeView) {
return nativeView instanceof android.widget.Button || nativeView instanceof android.support.v7.widget.Toolbar && getSDK() >= 21;
}
function onBackgroundOrBorderPropertyChanged(v) {
var nativeView = v._nativeView;
if (!nativeView) {
return;
}
ensureLazyRequires();
var background = v.style._getValue(style.backgroundInternalProperty);
var backgroundDrawable = nativeView.getBackground();
var density = utils.layout.getDisplayDensity();
var cache = v._nativeView;
if (isSetColorFilterOnlyWidget(nativeView) && !types.isNullOrUndefined(backgroundDrawable) && types.isFunction(backgroundDrawable.setColorFilter) && !background.hasBorderWidth() && !background.hasBorderRadius() && !background.clipPath && types.isNullOrUndefined(background.image) && !types.isNullOrUndefined(background.color)) {
var backgroundColor = backgroundDrawable.backgroundColor = background.color.android;
backgroundDrawable.setColorFilter(backgroundColor, android.graphics.PorterDuff.Mode.SRC_IN);
backgroundDrawable.backgroundColor = backgroundColor;
} else if (!background.isEmpty()) {
if (!(backgroundDrawable instanceof org.nativescript.widgets.BorderDrawable)) {
var viewClass = types.getClass(v);
if (!isSetColorFilterOnlyWidget(nativeView) && !_defaultBackgrounds.has(viewClass)) {
_defaultBackgrounds.set(viewClass, nativeView.getBackground());
}
backgroundDrawable = new org.nativescript.widgets.BorderDrawable(density, v.toString());
refreshBorderDrawable(v, backgroundDrawable);
if (getSDK() >= 16) {
nativeView.setBackground(backgroundDrawable);
} else {
nativeView.setBackgroundDrawable(backgroundDrawable);
}
} else {
refreshBorderDrawable(v, backgroundDrawable);
}
if ((background.hasBorderWidth() || background.hasBorderRadius() || background.clipPath) && getSDK() < 18) {
cache.layerType = cache.getLayerType();
cache.setLayerType(android.view.View.LAYER_TYPE_SOFTWARE, null);
}
} else {
if (v instanceof button.Button) {
var nativeButton = new android.widget.Button(nativeView.getContext());
if (getSDK() >= 16) {
nativeView.setBackground(nativeButton.getBackground());
} else {
nativeView.setBackgroundDrawable(nativeButton.getBackground());
}
} else {
var viewClass = types.getClass(v);
if (_defaultBackgrounds.has(viewClass)) {
if (getSDK() >= 16) {
nativeView.setBackground(_defaultBackgrounds.get(viewClass));
} else {
nativeView.setBackgroundDrawable(_defaultBackgrounds.get(viewClass));
}
}
}
if (cache.layerType !== undefined) {
cache.setLayerType(cache.layerType, null);
cache.layerType = undefined;
}
}
var leftPadding = Math.round(((background.borderLeftWidth || 0) + (v.style.paddingLeft || 0)) * density);
var topPadding = Math.round(((background.borderTopWidth || 0) + (v.style.paddingTop || 0)) * density);
var rightPadding = Math.round(((background.borderRightWidth || 0) + (v.style.paddingRight || 0)) * density);
var bottomPadding = Math.round(((background.borderBottomWidth || 0) + (v.style.paddingBottom || 0)) * density);
nativeView.setPadding(leftPadding, topPadding, rightPadding, bottomPadding);
}
ad.onBackgroundOrBorderPropertyChanged = onBackgroundOrBorderPropertyChanged;
})(ad = exports.ad || (exports.ad = {}));
function refreshBorderDrawable(view, borderDrawable) {
var background = view.style._getValue(style.backgroundInternalProperty);
if (background) {
var backgroundPositionParsedCSSValues = null;
var backgroundSizeParsedCSSValues = null;
if (background.position) {
backgroundPositionParsedCSSValues = createNativeCSSValueArray(background.position);
}
if (background.size) {
backgroundSizeParsedCSSValues = createNativeCSSValueArray(background.size);
}
borderDrawable.refresh(!types.isNullOrUndefined(background.borderTopColor) && !types.isNullOrUndefined(background.borderTopColor.android) ? background.borderTopColor.android : android.graphics.Color.BLACK, !types.isNullOrUndefined(background.borderRightColor) && !types.isNullOrUndefined(background.borderRightColor.android) ? background.borderRightColor.android : android.graphics.Color.BLACK, !types.isNullOrUndefined(background.borderBottomColor) && !types.isNullOrUndefined(background.borderBottomColor.android) ? background.borderBottomColor.android : android.graphics.Color.BLACK, !types.isNullOrUndefined(background.borderLeftColor) && !types.isNullOrUndefined(background.borderLeftColor.android) ? background.borderLeftColor.android : android.graphics.Color.BLACK, background.borderTopWidth, background.borderRightWidth, background.borderBottomWidth, background.borderLeftWidth, background.borderTopLeftRadius, background.borderTopRightRadius, background.borderBottomRightRadius, background.borderBottomLeftRadius, background.clipPath, background.color && background.color.android ? background.color.android : 0, background.image && background.image.android ? background.image.android : null, background.repeat, background.position, backgroundPositionParsedCSSValues, background.size, backgroundSizeParsedCSSValues);
}
}
function createNativeCSSValueArray(css) {
if (!css) {
return null;
}
var cssValues = cssValue(css);
var nativeArray = Array.create(org.nativescript.widgets.CSSValue, cssValues.length);
for (var i = 0, length = cssValues.length; i < length; i++) {
nativeArray[i] = new org.nativescript.widgets.CSSValue(cssValues[i].type, cssValues[i].string, cssValues[i].unit, cssValues[i].value);
}
return nativeArray;
}
}, function(module, exports, __webpack_require__) {
var colorModule = __webpack_require__(19);
var enums = __webpack_require__(24);
var cssValue = __webpack_require__(38);
var utils = __webpack_require__(27);
var types;
function ensureTypes() {
if (!types) {
types = __webpack_require__(14);
}
}
var Background = function() {
function Background() {
this.borderTopWidth = 0;
this.borderRightWidth = 0;
this.borderBottomWidth = 0;
this.borderLeftWidth = 0;
this.borderTopLeftRadius = 0;
this.borderTopRightRadius = 0;
this.borderBottomLeftRadius = 0;
this.borderBottomRightRadius = 0;
}
Background.prototype.clone = function() {
var clone = new Background();
clone.color = this.color;
clone.image = this.image;
clone.repeat = this.repeat;
clone.position = this.position;
clone.size = this.size;
clone.borderTopColor = this.borderTopColor;
clone.borderRightColor = this.borderRightColor;
clone.borderBottomColor = this.borderBottomColor;
clone.borderLeftColor = this.borderLeftColor;
clone.borderTopWidth = this.borderTopWidth;
clone.borderRightWidth = this.borderRightWidth;
clone.borderBottomWidth = this.borderBottomWidth;
clone.borderLeftWidth = this.borderLeftWidth;
clone.borderTopLeftRadius = this.borderTopLeftRadius;
clone.borderTopRightRadius = this.borderTopRightRadius;
clone.borderBottomRightRadius = this.borderBottomRightRadius;
clone.borderBottomLeftRadius = this.borderBottomLeftRadius;
clone.clipPath = this.clipPath;
return clone;
};
Background.prototype.withColor = function(value) {
var clone = this.clone();
clone.color = value;
return clone;
};
Background.prototype.withImage = function(value) {
var clone = this.clone();
clone.image = value;
return clone;
};
Background.prototype.withRepeat = function(value) {
var clone = this.clone();
clone.repeat = value;
return clone;
};
Background.prototype.withPosition = function(value) {
var clone = this.clone();
clone.position = value;
return clone;
};
Background.prototype.withSize = function(value) {
var clone = this.clone();
clone.size = value;
return clone;
};
Background.prototype.withBorderTopColor = function(value) {
var clone = this.clone();
clone.borderTopColor = value;
return clone;
};
Background.prototype.withBorderRightColor = function(value) {
var clone = this.clone();
clone.borderRightColor = value;
return clone;
};
Background.prototype.withBorderBottomColor = function(value) {
var clone = this.clone();
clone.borderBottomColor = value;
return clone;
};
Background.prototype.withBorderLeftColor = function(value) {
var clone = this.clone();
clone.borderLeftColor = value;
return clone;
};
Background.prototype.withBorderTopWidth = function(value) {
var clone = this.clone();
clone.borderTopWidth = value;
return clone;
};
Background.prototype.withBorderRightWidth = function(value) {
var clone = this.clone();
clone.borderRightWidth = value;
return clone;
};
Background.prototype.withBorderBottomWidth = function(value) {
var clone = this.clone();
clone.borderBottomWidth = value;
return clone;
};
Background.prototype.withBorderLeftWidth = function(value) {
var clone = this.clone();
clone.borderLeftWidth = value;
return clone;
};
Background.prototype.withBorderTopLeftRadius = function(value) {
var clone = this.clone();
clone.borderTopLeftRadius = value;
return clone;
};
Background.prototype.withBorderTopRightRadius = function(value) {
var clone = this.clone();
clone.borderTopRightRadius = value;
return clone;
};
Background.prototype.withBorderBottomRightRadius = function(value) {
var clone = this.clone();
clone.borderBottomRightRadius = value;
return clone;
};
Background.prototype.withBorderBottomLeftRadius = function(value) {
var clone = this.clone();
clone.borderBottomLeftRadius = value;
return clone;
};
Background.prototype.withClipPath = function(value) {
var clone = this.clone();
clone.clipPath = value;
return clone;
};
Background.prototype.getDrawParams = function(width, height) {
if (!this.image) {
return null;
}
var res = {
repeatX: true,
repeatY: true,
posX: 0,
posY: 0
};
if (this.repeat) {
switch (this.repeat.toLowerCase()) {
case enums.BackgroundRepeat.noRepeat:
res.repeatX = false;
res.repeatY = false;
break;

case enums.BackgroundRepeat.repeatX:
res.repeatY = false;
break;

case enums.BackgroundRepeat.repeatY:
res.repeatX = false;
break;
}
}
var imageWidth = this.image.width;
var imageHeight = this.image.height;
if (this.size) {
var values = cssValue(this.size);
if (values.length === 2) {
var vx = values[0];
var vy = values[1];
if (vx.unit === "%" && vy.unit === "%") {
imageWidth = width * vx.value / 100;
imageHeight = height * vy.value / 100;
res.sizeX = imageWidth;
res.sizeY = imageHeight;
} else if (vx.type === "number" && vy.type === "number" && (vx.unit === "px" && vy.unit === "px" || vx.unit === "" && vy.unit === "")) {
imageWidth = vx.value;
imageHeight = vy.value;
res.sizeX = imageWidth;
res.sizeY = imageHeight;
}
} else if (values.length === 1 && values[0].type === "ident") {
var scale = 0;
if (values[0].string === "cover") {
scale = Math.max(width / imageWidth, height / imageHeight);
} else if (values[0].string === "contain") {
scale = Math.min(width / imageWidth, height / imageHeight);
}
if (scale > 0) {
imageWidth *= scale;
imageHeight *= scale;
res.sizeX = imageWidth;
res.sizeY = imageHeight;
}
}
}
if (this.position) {
var v = Background.parsePosition(this.position);
if (v) {
var spaceX = width - imageWidth;
var spaceY = height - imageHeight;
if (v.x.unit === "%" && v.y.unit === "%") {
res.posX = spaceX * v.x.value / 100;
res.posY = spaceY * v.y.value / 100;
} else if (v.x.type === "number" && v.y.type === "number" && (v.x.unit === "px" && v.y.unit === "px" || v.x.unit === "" && v.y.unit === "")) {
res.posX = v.x.value;
res.posY = v.y.value;
} else if (v.x.type === "ident" && v.y.type === "ident") {
if (v.x.string.toLowerCase() === "center") {
res.posX = spaceX / 2;
} else if (v.x.string.toLowerCase() === "right") {
res.posX = spaceX;
}
if (v.y.string.toLowerCase() === "center") {
res.posY = spaceY / 2;
} else if (v.y.string.toLowerCase() === "bottom") {
res.posY = spaceY;
}
}
}
}
return res;
};
Background.parsePosition = function(pos) {
var values = cssValue(pos);
if (values.length === 2) {
return {
x: values[0],
y: values[1]
};
}
if (values.length === 1 && values[0].type === "ident") {
var val = values[0].string.toLocaleLowerCase();
var center = {
type: "ident",
string: "center"
};
if (val === "left" || val === "right") {
return {
x: values[0],
y: center
};
} else if (val === "top" || val === "bottom") {
return {
x: center,
y: values[0]
};
} else if (val === "center") {
return {
x: center,
y: center
};
}
}
return null;
};
Background.prototype.isEmpty = function() {
ensureTypes();
return types.isNullOrUndefined(this.color) && types.isNullOrUndefined(this.image) && !this.hasBorderWidth() && !this.hasBorderRadius() && !this.clipPath;
};
Background.equals = function(value1, value2) {
if (!value1 && !value2) {
return true;
}
if (!value1 || !value2) {
return false;
}
return colorModule.Color.equals(value1.color, value2.color) && value1.image === value2.image && value1.position === value2.position && value1.repeat === value2.repeat && value1.size === value2.size && colorModule.Color.equals(value1.borderTopColor, value2.borderTopColor) && colorModule.Color.equals(value1.borderRightColor, value2.borderRightColor) && colorModule.Color.equals(value1.borderBottomColor, value2.borderBottomColor) && colorModule.Color.equals(value1.borderLeftColor, value2.borderLeftColor) && value1.borderTopWidth === value2.borderTopWidth && value1.borderRightWidth === value2.borderRightWidth && value1.borderBottomWidth === value2.borderBottomWidth && value1.borderLeftWidth === value2.borderLeftWidth && value1.borderTopLeftRadius === value2.borderTopLeftRadius && value1.borderTopRightRadius === value2.borderTopRightRadius && value1.borderBottomRightRadius === value2.borderBottomRightRadius && value1.borderBottomLeftRadius === value2.borderBottomLeftRadius && value1.clipPath === value2.clipPath;
};
Background.prototype.hasBorderColor = function() {
return !types.isNullOrUndefined(this.borderTopColor) || !types.isNullOrUndefined(this.borderRightColor) || !types.isNullOrUndefined(this.borderBottomColor) || !types.isNullOrUndefined(this.borderLeftColor);
};
Background.prototype.hasBorderWidth = function() {
return this.borderTopWidth > 0 || this.borderRightWidth > 0 || this.borderBottomWidth > 0 || this.borderLeftWidth > 0;
};
Background.prototype.hasBorderRadius = function() {
return this.borderTopLeftRadius > 0 || this.borderTopRightRadius > 0 || this.borderBottomRightRadius > 0 || this.borderBottomLeftRadius > 0;
};
Background.prototype.hasUniformBorderColor = function() {
return colorModule.Color.equals(this.borderTopColor, this.borderRightColor) && colorModule.Color.equals(this.borderTopColor, this.borderBottomColor) && colorModule.Color.equals(this.borderTopColor, this.borderLeftColor);
};
Background.prototype.hasUniformBorderWidth = function() {
return this.borderTopWidth === this.borderRightWidth && this.borderTopWidth === this.borderBottomWidth && this.borderTopWidth === this.borderLeftWidth;
};
Background.prototype.hasUniformBorderRadius = function() {
return this.borderTopLeftRadius === this.borderTopRightRadius && this.borderTopLeftRadius === this.borderBottomRightRadius && this.borderTopLeftRadius === this.borderBottomLeftRadius;
};
Background.prototype.hasUniformBorder = function() {
return this.hasUniformBorderColor() && this.hasUniformBorderWidth() && this.hasUniformBorderRadius();
};
Background.prototype.getUniformBorderColor = function() {
if (this.hasUniformBorderColor()) {
return this.borderTopColor;
}
return undefined;
};
Background.prototype.getUniformBorderWidth = function() {
if (this.hasUniformBorderWidth()) {
return this.borderTopWidth;
}
return 0;
};
Background.prototype.getUniformBorderRadius = function() {
if (this.hasUniformBorderRadius()) {
return this.borderTopLeftRadius;
}
return 0;
};
Background.prototype.toString = function() {
return "isEmpty: " + this.isEmpty() + "; color: " + this.color + "; image: " + this.image + "; repeat: " + this.repeat + "; position: " + this.position + "; size: " + this.size + "; borderTopColor: " + this.borderTopColor + "; borderRightColor: " + this.borderRightColor + "; borderBottomColor: " + this.borderBottomColor + "; borderLeftColor: " + this.borderLeftColor + "; borderTopWidth: " + this.borderTopWidth + "; borderRightWidth: " + this.borderRightWidth + "; borderBottomWidth: " + this.borderBottomWidth + "; borderLeftWidth: " + this.borderLeftWidth + "; borderTopLeftRadius: " + this.borderTopLeftRadius + "; borderTopRightRadius: " + this.borderTopRightRadius + "; borderBottomRightRadius: " + this.borderBottomRightRadius + "; borderBottomLeftRadius: " + this.borderBottomLeftRadius + "; clipPath: " + this.clipPath + ";";
};
Background.default = new Background();
return Background;
}();
exports.Background = Background;
function cssValueToDevicePixels(source, total) {
var result;
source = source.trim();
if (source.indexOf("px") !== -1) {
result = parseFloat(source.replace("px", ""));
} else if (source.indexOf("%") !== -1 && total > 0) {
result = parseFloat(source.replace("%", "")) / 100 * utils.layout.toDeviceIndependentPixels(total);
} else {
result = parseFloat(source);
}
return utils.layout.toDevicePixels(result);
}
exports.cssValueToDevicePixels = cssValueToDevicePixels;
}, function(module, exports) {
module.exports = parse;
function parse(str) {
return new Parser(str).parse();
}
function Parser(str) {
this.str = str;
}
Parser.prototype.skip = function(m) {
this.str = this.str.slice(m[0].length);
};
Parser.prototype.comma = function() {
var m = /^, */.exec(this.str);
if (!m) return;
this.skip(m);
return {
type: "comma",
string: ","
};
};
Parser.prototype.ident = function() {
var m = /^([\w-]+) */.exec(this.str);
if (!m) return;
this.skip(m);
return {
type: "ident",
string: m[1]
};
};
Parser.prototype.int = function() {
var m = /^(([-\+]?\d+)(\S+)?) */.exec(this.str);
if (!m) return;
this.skip(m);
var n = ~~m[2];
var u = m[3];
return {
type: "number",
string: m[1],
unit: u || "",
value: n
};
};
Parser.prototype.float = function() {
var m = /^(((?:[-\+]?\d+)?\.\d+)(\S+)?) */.exec(this.str);
if (!m) return;
this.skip(m);
var n = parseFloat(m[2]);
var u = m[3];
return {
type: "number",
string: m[1],
unit: u || "",
value: n
};
};
Parser.prototype.number = function() {
return this.float() || this.int();
};
Parser.prototype.double = function() {
var m = /^"([^"]*)" */.exec(this.str);
if (!m) return m;
this.skip(m);
return {
type: "string",
quote: '"',
string: '"' + m[1] + '"',
value: m[1]
};
};
Parser.prototype.single = function() {
var m = /^'([^']*)' */.exec(this.str);
if (!m) return m;
this.skip(m);
return {
type: "string",
quote: "'",
string: "'" + m[1] + "'",
value: m[1]
};
};
Parser.prototype.string = function() {
return this.single() || this.double();
};
Parser.prototype.value = function() {
return this.number() || this.ident() || this.string() || this.comma();
};
Parser.prototype.parse = function() {
var vals = [];
while (this.str.length) {
var obj = this.value();
if (!obj) throw new Error("failed to parse near `" + this.str.slice(0, 10) + "...`");
vals.push(obj);
}
return vals;
};
}, function(module, exports, __webpack_require__) {
var common = __webpack_require__(40);
var style = __webpack_require__(15);
var text_base_styler_1 = __webpack_require__(52);
var platform_1 = __webpack_require__(35);
var gestures_1 = __webpack_require__(53);
var view_1 = __webpack_require__(12);
var styleHandlersInitialized;
global.moduleMerge(common, exports);
var Button = function(_super) {
__extends(Button, _super);
function Button() {
_super.call(this);
this._isPressed = false;
if (!styleHandlersInitialized) {
styleHandlersInitialized = true;
ButtonStyler.registerHandlers();
}
}
Object.defineProperty(Button.prototype, "android", {
get: function() {
return this._android;
},
enumerable: true,
configurable: true
});
Button.prototype._createUI = function() {
var that = new WeakRef(this);
this._android = new android.widget.Button(this._context);
this._android.setOnClickListener(new android.view.View.OnClickListener({
get owner() {
return that.get();
},
onClick: function(v) {
if (this.owner) {
this.owner._emit(common.Button.tapEvent);
}
}
}));
};
Button.prototype._onTextPropertyChanged = function(data) {
if (this.android) {
this.android.setText(data.newValue + "");
}
};
Button.prototype._setFormattedTextPropertyToNative = function(value) {
var newText = value ? value._formattedText : null;
if (this.android) {
if (newText) {
if (!this._transformationMethod) {
this._transformationMethod = this.android.getTransformationMethod();
}
this.android.setTransformationMethod(null);
} else {
if (this._transformationMethod && !this.android.getTransformationMethod()) {
this.android.setTransformationMethod(this._transformationMethod);
}
}
this.android.setText(newText);
}
};
Button.prototype._updateHandler = function(subscribe) {
var _this = this;
if (subscribe) {
this._highlightedHandler = this._highlightedHandler || function(args) {
switch (args.action) {
case gestures_1.TouchAction.up:
_this._goToVisualState("normal");
break;

case gestures_1.TouchAction.down:
_this._goToVisualState("highlighted");
break;
}
};
this.on(gestures_1.GestureTypes.touch, this._highlightedHandler);
} else {
this.off(gestures_1.GestureTypes.touch, this._highlightedHandler);
}
};
__decorate([ view_1.PseudoClassHandler("normal", "highlighted", "pressed", "active") ], Button.prototype, "_updateHandler", null);
return Button;
}(common.Button);
exports.Button = Button;
var ButtonStyler = function() {
function ButtonStyler() {}
ButtonStyler.registerHandlers = function() {
var TextBaseStyler = text_base_styler_1.TextBaseStyler;
style.registerHandler(style.colorProperty, new style.StylePropertyChangedHandler(TextBaseStyler.setColorProperty, TextBaseStyler.resetColorProperty, TextBaseStyler.getNativeColorValue), "Button");
style.registerHandler(style.fontInternalProperty, new style.StylePropertyChangedHandler(TextBaseStyler.setFontInternalProperty, TextBaseStyler.resetFontInternalProperty, TextBaseStyler.getNativeFontInternalValue), "Button");
style.registerHandler(style.textAlignmentProperty, new style.StylePropertyChangedHandler(TextBaseStyler.setTextAlignmentProperty, TextBaseStyler.resetTextAlignmentProperty, TextBaseStyler.getNativeTextAlignmentValue), "Button");
style.registerHandler(style.textDecorationProperty, new style.StylePropertyChangedHandler(TextBaseStyler.setTextDecorationProperty, TextBaseStyler.resetTextDecorationProperty), "Button");
style.registerHandler(style.textTransformProperty, new style.StylePropertyChangedHandler(TextBaseStyler.setTextTransformProperty, TextBaseStyler.resetTextTransformProperty), "Button");
style.registerHandler(style.whiteSpaceProperty, new style.StylePropertyChangedHandler(TextBaseStyler.setWhiteSpaceProperty, TextBaseStyler.resetWhiteSpaceProperty), "Button");
if (parseInt(platform_1.device.sdkVersion, 10) >= 21) {
style.registerHandler(style.letterSpacingProperty, new style.StylePropertyChangedHandler(TextBaseStyler.setLetterSpacingProperty, TextBaseStyler.resetLetterSpacingProperty, TextBaseStyler.getLetterSpacingProperty), "Button");
}
};
return ButtonStyler;
}();
exports.ButtonStyler = ButtonStyler;
}, function(module, exports, __webpack_require__) {
var dependency_observable_1 = __webpack_require__(17);
var view = __webpack_require__(12);
var proxy = __webpack_require__(41);
var formattedString = __webpack_require__(49);
var observable = __webpack_require__(18);
var enums_1 = __webpack_require__(24);
var platform_1 = __webpack_require__(35);
var AffectsLayout = platform_1.isAndroid ? dependency_observable_1.PropertyMetadataSettings.None : dependency_observable_1.PropertyMetadataSettings.AffectsLayout;
var weakEvents;
function ensureWeakEvents() {
if (!weakEvents) {
weakEvents = __webpack_require__(43);
}
}
var textProperty = new dependency_observable_1.Property("text", "Button", new proxy.PropertyMetadata("", AffectsLayout));
var formattedTextProperty = new dependency_observable_1.Property("formattedText", "Button", new proxy.PropertyMetadata("", AffectsLayout));
var textWrapProperty = new dependency_observable_1.Property("textWrap", "Button", new proxy.PropertyMetadata(false, AffectsLayout));
function onTextPropertyChanged(data) {
var button = data.object;
button._onTextPropertyChanged(data);
button.style._updateTextDecoration();
button.style._updateTextTransform();
}
function onFormattedTextPropertyChanged(data) {
var button = data.object;
button._onFormattedTextPropertyChanged(data);
}
textProperty.metadata.onSetNativeValue = onTextPropertyChanged;
formattedTextProperty.metadata.onSetNativeValue = onFormattedTextPropertyChanged;
var Button = function(_super) {
__extends(Button, _super);
function Button() {
_super.apply(this, arguments);
}
Button.prototype._onBindingContextChanged = function(oldValue, newValue) {
_super.prototype._onBindingContextChanged.call(this, oldValue, newValue);
if (this.formattedText) {
this.formattedText.updateSpansBindingContext(newValue);
}
this.style._updateTextDecoration();
this.style._updateTextTransform();
};
Object.defineProperty(Button.prototype, "text", {
get: function() {
return this._getValue(Button.textProperty);
},
set: function(value) {
this._setValue(Button.textProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(Button.prototype, "formattedText", {
get: function() {
return this._getValue(Button.formattedTextProperty);
},
set: function(value) {
if (this.formattedText !== value) {
ensureWeakEvents();
if (this.formattedText) {
weakEvents.removeWeakEventListener(this.formattedText, observable.Observable.propertyChangeEvent, this.onFormattedTextChanged, this);
}
this._setValue(Button.formattedTextProperty, value);
if (value) {
weakEvents.addWeakEventListener(value, observable.Observable.propertyChangeEvent, this.onFormattedTextChanged, this);
}
}
},
enumerable: true,
configurable: true
});
Object.defineProperty(Button.prototype, "textWrap", {
get: function() {
return this._getValue(Button.textWrapProperty);
},
set: function(value) {
this._setValue(Button.textWrapProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(Button.prototype, "whiteSpace", {
get: function() {
return this.style.whiteSpace;
},
set: function(value) {
this.style.whiteSpace = value;
},
enumerable: true,
configurable: true
});
Button.prototype.onFormattedTextChanged = function(eventData) {
var value = eventData.value;
this._setFormattedTextPropertyToNative(value);
this._onPropertyChangedFromNative(Button.textProperty, value.toString());
};
Button.prototype._onTextPropertyChanged = function(data) {};
Button.prototype._setFormattedTextPropertyToNative = function(value) {};
Button.prototype._onFormattedTextPropertyChanged = function(data) {
var newValue = data.newValue;
if (newValue) {
newValue.parent = this;
}
this._setFormattedTextPropertyToNative(newValue);
var newText = newValue ? newValue.toString() : "";
this._onPropertyChangedFromNative(Button.textProperty, newText);
};
Button.prototype._addChildFromBuilder = function(name, value) {
formattedString.FormattedString.addFormattedStringToView(this, name, value);
};
Button.tapEvent = "tap";
Button.textProperty = textProperty;
Button.formattedTextProperty = formattedTextProperty;
Button.textWrapProperty = textWrapProperty;
return Button;
}(view.View);
exports.Button = Button;
function onTextWrapPropertyChanged(data) {
var v = data.object;
v.style.whiteSpace = data.newValue ? enums_1.WhiteSpace.normal : enums_1.WhiteSpace.nowrap;
}
Button.textWrapProperty.metadata.onSetNativeValue = onTextWrapPropertyChanged;
}, function(module, exports, __webpack_require__) {
var bindable = __webpack_require__(42);
var dependencyObservable = __webpack_require__(17);
var types = __webpack_require__(14);
var observable = __webpack_require__(18);
var PropertyMetadata = function(_super) {
__extends(PropertyMetadata, _super);
function PropertyMetadata(defaultValue, options, onChanged, onValidateValue, onSetNativeValue) {
_super.call(this, defaultValue, options, onChanged, onValidateValue);
this._onSetNativeValue = onSetNativeValue;
}
Object.defineProperty(PropertyMetadata.prototype, "onSetNativeValue", {
get: function() {
return this._onSetNativeValue;
},
set: function(value) {
this._onSetNativeValue = value;
},
enumerable: true,
configurable: true
});
return PropertyMetadata;
}(dependencyObservable.PropertyMetadata);
exports.PropertyMetadata = PropertyMetadata;
var ProxyObject = function(_super) {
__extends(ProxyObject, _super);
function ProxyObject() {
_super.apply(this, arguments);
this._updatingJSPropertiesDict = {};
}
Object.defineProperty(ProxyObject.prototype, "android", {
get: function() {
return undefined;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ProxyObject.prototype, "ios", {
get: function() {
return undefined;
},
enumerable: true,
configurable: true
});
ProxyObject.prototype._onPropertyChanged = function(property, oldValue, newValue) {
_super.prototype._onPropertyChanged.call(this, property, oldValue, newValue);
this._trySetNativeValue(property, oldValue, newValue);
};
ProxyObject.prototype._onPropertyChangedFromNative = function(property, newValue) {
if (this._updatingJSPropertiesDict[property.name]) {
return;
}
this._updatingJSPropertiesDict[property.name] = true;
this._setValue(property, newValue);
delete this._updatingJSPropertiesDict[property.name];
};
ProxyObject.prototype._syncNativeProperties = function() {
var that = this;
var eachPropertyCallback = function(property) {
that._trySetNativeValue(property);
return true;
};
this._eachSetProperty(eachPropertyCallback);
};
ProxyObject.prototype._canApplyNativeProperty = function() {
return false;
};
ProxyObject.prototype._trySetNativeValue = function(property, oldValue, newValue) {
if (this._updatingJSPropertiesDict[property.name]) {
return;
}
if (!this._canApplyNativeProperty()) {
return;
}
var metadata = property.metadata;
if (!(metadata instanceof PropertyMetadata)) {
return;
}
var proxyMetadata = metadata;
if (proxyMetadata.onSetNativeValue) {
if (types.isUndefined(newValue)) {
newValue = this._getValue(property);
}
proxyMetadata.onSetNativeValue({
object: this,
property: property,
eventName: observable.Observable.propertyChangeEvent,
newValue: newValue,
oldValue: oldValue
});
}
};
return ProxyObject;
}(bindable.Bindable);
exports.ProxyObject = ProxyObject;
}, function(module, exports, __webpack_require__) {
var observable_1 = __webpack_require__(18);
var dependency_observable_1 = __webpack_require__(17);
var weakEvents = __webpack_require__(43);
var types = __webpack_require__(14);
var trace = __webpack_require__(16);
var bindingBuilder = __webpack_require__(44);
var viewModule = __webpack_require__(12);
var application = __webpack_require__(3);
var polymerExpressions = __webpack_require__(45);
var specialProperties = __webpack_require__(48);
var utils = __webpack_require__(27);
var bindingContextProperty = new dependency_observable_1.Property("bindingContext", "Bindable", new dependency_observable_1.PropertyMetadata(undefined, dependency_observable_1.PropertyMetadataSettings.Inheritable, onBindingContextChanged));
function onBindingContextChanged(data) {
var bindable = data.object;
bindable._onBindingContextChanged(data.oldValue, data.newValue);
}
var contextKey = "context";
var paramsRegex = /\[\s*(['"])*(\w*)\1\s*\]/;
var bc = bindingBuilder.bindingConstants;
var defaultBindingSource = {};
var Bindable = function(_super) {
__extends(Bindable, _super);
function Bindable() {
_super.apply(this, arguments);
this.bindings = new Map();
}
Object.defineProperty(Bindable.prototype, "bindingContext", {
get: function() {
return this._getValue(Bindable.bindingContextProperty);
},
set: function(value) {
this._setValue(Bindable.bindingContextProperty, value);
},
enumerable: true,
configurable: true
});
Bindable.prototype.bind = function(options, source) {
if (source === void 0) {
source = defaultBindingSource;
}
var binding = this.bindings.get(options.targetProperty);
if (binding) {
binding.unbind();
}
binding = new Binding(this, options);
this.bindings.set(options.targetProperty, binding);
var bindingSource = source;
if (bindingSource === defaultBindingSource) {
bindingSource = this.bindingContext;
binding.sourceIsBindingContext = true;
}
binding.bind(bindingSource);
};
Bindable.prototype.unbind = function(property) {
var binding = this.bindings.get(property);
if (binding) {
binding.unbind();
this.bindings.delete(property);
}
};
Bindable.prototype._updateTwoWayBinding = function(propertyName, value) {
var binding = this.bindings.get(propertyName);
if (binding) {
binding.updateTwoWay(value);
}
};
Bindable.prototype._setCore = function(data) {
_super.prototype._setCore.call(this, data);
this._updateTwoWayBinding(data.propertyName, data.value);
};
Bindable.prototype._onPropertyChanged = function(property, oldValue, newValue) {
if (trace.enabled) {
trace.write(this + "._onPropertyChanged(" + property.name + ", " + oldValue + ", " + newValue + ")", trace.categories.Binding);
}
_super.prototype._onPropertyChanged.call(this, property, oldValue, newValue);
if (this instanceof viewModule.View) {
if (property.inheritable && this._isInheritedChange() === true) {
return;
}
}
var binding = this.bindings.get(property.name);
if (binding && !binding.updating) {
if (binding.options.twoWay) {
if (trace.enabled) {
trace.write(this + "._updateTwoWayBinding(" + property.name + ", " + newValue + ");" + property.name, trace.categories.Binding);
}
this._updateTwoWayBinding(property.name, newValue);
} else {
if (trace.enabled) {
trace.write(this + ".unbind(" + property.name + ");", trace.categories.Binding);
}
this.unbind(property.name);
}
}
};
Bindable.prototype._onBindingContextChanged = function(oldValue, newValue) {
var bindingContextBinding = this.bindings.get("bindingContext");
if (bindingContextBinding) {
if (!bindingContextBinding.updating) {
bindingContextBinding.bind(newValue);
}
}
var bindingContextSource = this.bindingContext;
this.bindings.forEach(function(binding, index, bindings) {
if (!binding.updating && binding.sourceIsBindingContext && binding.options.targetProperty !== "bindingContext") {
if (trace.enabled) {
trace.write("Binding " + binding.target.get() + "." + binding.options.targetProperty + " to new context " + bindingContextSource, trace.categories.Binding);
}
if (!types.isNullOrUndefined(bindingContextSource)) {
binding.bind(bindingContextSource);
} else {
binding.clearBinding();
}
}
});
};
Bindable.bindingContextProperty = bindingContextProperty;
return Bindable;
}(dependency_observable_1.DependencyObservable);
exports.Bindable = Bindable;
var emptyArray = [];
function getProperties(property) {
var result = emptyArray;
if (property) {
var parentsMatches = property.match(bindingBuilder.parentsRegex);
result = property.replace(bindingBuilder.parentsRegex, "parentsMatch").replace(/\]/g, "").split(/\.|\[/);
var parentsMatchesCounter = 0;
for (var i = 0, resultLength = result.length; i < resultLength; i++) {
if (result[i] === "parentsMatch") {
result[i] = parentsMatches[parentsMatchesCounter++];
}
}
}
return result;
}
var Binding = function() {
function Binding(target, options) {
this.propertyChangeListeners = new Map();
this.target = new WeakRef(target);
this.options = options;
this.sourceProperties = getProperties(options.sourceProperty);
this.targetOptions = this.resolveOptions(target, getProperties(options.targetProperty));
}
Binding.prototype.loadedHandlerVisualTreeBinding = function(args) {
var target = args.object;
target.off(viewModule.View.loadedEvent, this.loadedHandlerVisualTreeBinding, this);
if (!types.isNullOrUndefined(target.bindingContext)) {
this.bind(target.bindingContext);
}
};
Binding.prototype.clearSource = function() {
var _this = this;
this.propertyChangeListeners.forEach(function(observable, index, map) {
weakEvents.removeWeakEventListener(observable, observable_1.Observable.propertyChangeEvent, _this.onSourcePropertyChanged, _this);
});
this.propertyChangeListeners.clear();
this.sourcesAndProperties = null;
if (this.source) {
this.source.clear();
}
if (this.sourceOptions) {
this.sourceOptions.instance.clear();
this.sourceOptions = undefined;
}
};
Binding.prototype.sourceAsObject = function(source) {
var objectType = typeof source;
if (objectType === "number") {
source = new Number(source);
} else if (objectType === "boolean") {
source = new Boolean(source);
} else if (objectType === "string") {
source = new String(source);
}
return source;
};
Binding.prototype.bind = function(source) {
this.clearSource();
source = this.sourceAsObject(source);
var sourceValue;
if (!types.isNullOrUndefined(source)) {
this.source = new WeakRef(source);
this.sourceOptions = this.resolveOptions(source, this.sourceProperties);
sourceValue = this.getSourcePropertyValue();
this.updateTarget(sourceValue);
this.addPropertyChangeListeners(this.source, this.sourceProperties);
} else if (!this.sourceIsBindingContext) {
sourceValue = this.getSourcePropertyValue();
this.updateTarget(sourceValue ? sourceValue : source);
}
};
Binding.prototype.resolveObjectsAndProperties = function(source, properties) {
var result = [];
var currentObject = source;
var currentObjectChanged = false;
for (var i = 0, propsArrayLength = properties.length; i < propsArrayLength; i++) {
var property = properties[i];
if (property === bc.bindingValueKey) {
currentObjectChanged = true;
}
if (property === bc.parentValueKey || property.indexOf(bc.parentsValueKey) === 0) {
var parentView = this.getParentView(this.target.get(), property).view;
if (parentView) {
currentObject = parentView.bindingContext;
} else {
var targetInstance = this.target.get();
targetInstance.off(viewModule.View.loadedEvent, this.loadedHandlerVisualTreeBinding, this);
targetInstance.on(viewModule.View.loadedEvent, this.loadedHandlerVisualTreeBinding, this);
}
currentObjectChanged = true;
}
if (currentObject) {
result.push({
instance: currentObject,
property: property
});
} else {
break;
}
if (!currentObjectChanged && i < propsArrayLength - 1) {
currentObject = currentObject ? currentObject[properties[i]] : null;
}
currentObjectChanged = false;
}
return result;
};
Binding.prototype.addPropertyChangeListeners = function(source, sourceProperty, parentProperies) {
var objectsAndProperties = this.resolveObjectsAndProperties(source.get(), sourceProperty);
var prop = parentProperies || "";
for (var i = 0, length = objectsAndProperties.length; i < length; i++) {
prop += "$" + objectsAndProperties[i].property;
var currentObject = objectsAndProperties[i].instance;
if (!this.propertyChangeListeners.has(prop) && currentObject instanceof observable_1.Observable) {
weakEvents.addWeakEventListener(currentObject, observable_1.Observable.propertyChangeEvent, this.onSourcePropertyChanged, this);
this.propertyChangeListeners.set(prop, currentObject);
}
}
};
Binding.prototype.unbind = function() {
if (!this.source) {
return;
}
this.clearSource();
if (this.targetOptions) {
this.targetOptions = undefined;
}
this.sourceProperties = undefined;
};
Binding.prototype.prepareExpressionForUpdate = function() {
var escapedSourceProperty = utils.escapeRegexSymbols(this.options.sourceProperty);
var expRegex = new RegExp(escapedSourceProperty, "g");
var resultExp = this.options.expression.replace(expRegex, bc.newPropertyValueKey);
return resultExp;
};
Binding.prototype.updateTwoWay = function(value) {
if (this.updating || !this.options.twoWay) {
return;
}
var newValue = value;
if (this.options.expression) {
var changedModel = {};
changedModel[bc.bindingValueKey] = value;
changedModel[bc.newPropertyValueKey] = value;
var sourcePropertyName = "";
if (this.sourceOptions) {
sourcePropertyName = this.sourceOptions.property;
} else if (typeof this.options.sourceProperty === "string" && this.options.sourceProperty.indexOf(".") === -1) {
sourcePropertyName = this.options.sourceProperty;
}
if (sourcePropertyName !== "") {
changedModel[sourcePropertyName] = value;
}
var updateExpression = this.prepareExpressionForUpdate();
this.prepareContextForExpression(changedModel, updateExpression, undefined);
var expressionValue = this._getExpressionValue(updateExpression, true, changedModel);
if (expressionValue instanceof Error) {
trace.write(expressionValue.message, trace.categories.Binding, trace.messageType.error);
}
newValue = expressionValue;
}
this.updateSource(newValue);
};
Binding.prototype._getExpressionValue = function(expression, isBackConvert, changedModel) {
try {
var exp_1 = polymerExpressions.PolymerExpressions.getExpression(expression);
if (exp_1) {
var context_1 = this.source && this.source.get && this.source.get() || global;
var model = {};
var addedProps = [];
for (var prop in application.resources) {
if (application.resources.hasOwnProperty(prop) && !context_1.hasOwnProperty(prop)) {
context_1[prop] = application.resources[prop];
addedProps.push(prop);
}
}
this.prepareContextForExpression(context_1, expression, addedProps);
model[contextKey] = context_1;
var result = exp_1.getValue(model, isBackConvert, changedModel ? changedModel : model);
var addedPropsLength = addedProps.length;
for (var i = 0; i < addedPropsLength; i++) {
delete context_1[addedProps[i]];
}
addedProps.length = 0;
return result;
}
return new Error(expression + " is not a valid expression.");
} catch (e) {
var errorMessage = "Run-time error occured in file: " + e.sourceURL + " at line: " + e.line + " and column: " + e.column;
return new Error(errorMessage);
}
};
Binding.prototype.onSourcePropertyChanged = function(data) {
var sourceProps = this.sourceProperties;
var sourcePropsLength = sourceProps.length;
var changedPropertyIndex = sourceProps.indexOf(data.propertyName);
var parentProps = "";
if (changedPropertyIndex > -1) {
parentProps = "$" + sourceProps.slice(0, changedPropertyIndex + 1).join("$");
while (this.propertyChangeListeners.get(parentProps) !== data.object) {
changedPropertyIndex += sourceProps.slice(changedPropertyIndex + 1).indexOf(data.propertyName) + 1;
parentProps = "$" + sourceProps.slice(0, changedPropertyIndex + 1).join("$");
}
}
if (this.options.expression) {
var expressionValue = this._getExpressionValue(this.options.expression, false, undefined);
if (expressionValue instanceof Error) {
trace.write(expressionValue.message, trace.categories.Binding, trace.messageType.error);
} else {
this.updateTarget(expressionValue);
}
} else {
if (changedPropertyIndex > -1) {
var props = sourceProps.slice(changedPropertyIndex + 1);
var propsLength = props.length;
if (propsLength > 0) {
var value = data.value;
for (var i = 0; i < propsLength; i++) {
value = value[props[i]];
}
this.updateTarget(value);
} else if (data.propertyName === this.sourceOptions.property) {
this.updateTarget(data.value);
}
}
}
if (changedPropertyIndex > -1 && changedPropertyIndex < sourcePropsLength - 1) {
var probablyChangedObject = this.propertyChangeListeners.get(parentProps);
if (probablyChangedObject && probablyChangedObject !== data.object[sourceProps[changedPropertyIndex]]) {
for (var i = sourcePropsLength - 1; i > changedPropertyIndex; i--) {
var prop = "$" + sourceProps.slice(0, i + 1).join("$");
if (this.propertyChangeListeners.has(prop)) {
weakEvents.removeWeakEventListener(this.propertyChangeListeners.get(prop), observable_1.Observable.propertyChangeEvent, this.onSourcePropertyChanged, this);
this.propertyChangeListeners.delete(prop);
}
}
var newProps = sourceProps.slice(changedPropertyIndex + 1);
var newObject = data.object[sourceProps[changedPropertyIndex]];
if (!types.isNullOrUndefined(newObject) && typeof newObject === "object") {
this.addPropertyChangeListeners(new WeakRef(newObject), newProps, parentProps);
}
}
}
};
Binding.prototype.prepareContextForExpression = function(model, expression, newProps) {
var parentViewAndIndex;
var parentView;
var addedProps = newProps || [];
if (expression.indexOf(bc.bindingValueKey) > -1) {
model[bc.bindingValueKey] = model;
addedProps.push(bc.bindingValueKey);
}
if (expression.indexOf(bc.parentValueKey) > -1) {
parentView = this.getParentView(this.target.get(), bc.parentValueKey).view;
if (parentView) {
model[bc.parentValueKey] = parentView.bindingContext;
addedProps.push(bc.parentValueKey);
}
}
var parentsArray = expression.match(bindingBuilder.parentsRegex);
if (parentsArray) {
for (var i = 0; i < parentsArray.length; i++) {
parentViewAndIndex = this.getParentView(this.target.get(), parentsArray[i]);
if (parentViewAndIndex.view) {
model[bc.parentsValueKey] = model[bc.parentsValueKey] || {};
model[bc.parentsValueKey][parentViewAndIndex.index] = parentViewAndIndex.view.bindingContext;
addedProps.push(bc.parentsValueKey);
}
}
}
};
Binding.prototype.getSourcePropertyValue = function() {
if (this.options.expression) {
var changedModel = {};
changedModel[bc.bindingValueKey] = this.source ? this.source.get() : undefined;
var expressionValue = this._getExpressionValue(this.options.expression, false, changedModel);
if (expressionValue instanceof Error) {
trace.write(expressionValue.message, trace.categories.Binding, trace.messageType.error);
} else {
return expressionValue;
}
}
if (this.sourceOptions) {
var sourceOptionsInstance = this.sourceOptions.instance.get();
if (this.sourceOptions.property === bc.bindingValueKey) {
return sourceOptionsInstance;
} else if (sourceOptionsInstance instanceof observable_1.Observable && (this.sourceOptions.property && this.sourceOptions.property !== "")) {
return sourceOptionsInstance.get(this.sourceOptions.property);
} else if (sourceOptionsInstance && this.sourceOptions.property && this.sourceOptions.property !== "" && this.sourceOptions.property in sourceOptionsInstance) {
return sourceOptionsInstance[this.sourceOptions.property];
} else {
trace.write("Property: '" + this.sourceOptions.property + "' is invalid or does not exist. SourceProperty: '" + this.options.sourceProperty + "'", trace.categories.Binding, trace.messageType.error);
}
}
return null;
};
Binding.prototype.clearBinding = function() {
this.clearSource();
this.updateTarget(undefined);
};
Binding.prototype.updateTarget = function(value) {
if (this.updating) {
return;
}
this.updateOptions(this.targetOptions, types.isNullOrUndefined(value) ? dependency_observable_1.unsetValue : value);
};
Binding.prototype.updateSource = function(value) {
if (this.updating || !this.source || !this.source.get()) {
return;
}
this.updateOptions(this.sourceOptions, value);
};
Binding.prototype.getParentView = function(target, property) {
if (!target || !(target instanceof viewModule.View)) {
return {
view: null,
index: null
};
}
var result;
if (property === bc.parentValueKey) {
result = target.parent;
}
var index = null;
if (property.indexOf(bc.parentsValueKey) === 0) {
result = target.parent;
var indexParams = paramsRegex.exec(property);
if (indexParams && indexParams.length > 1) {
index = indexParams[2];
}
if (!isNaN(index)) {
var indexAsInt = parseInt(index);
while (indexAsInt > 0) {
result = result.parent;
indexAsInt--;
}
} else if (types.isString(index)) {
while (result && result.typeName !== index) {
result = result.parent;
}
}
}
return {
view: result,
index: index
};
};
Binding.prototype.resolveOptions = function(obj, properties) {
var objectsAndProperties = this.resolveObjectsAndProperties(obj, properties);
if (objectsAndProperties.length > 0) {
var resolvedObj = objectsAndProperties[objectsAndProperties.length - 1].instance;
var prop = objectsAndProperties[objectsAndProperties.length - 1].property;
return {
instance: new WeakRef(this.sourceAsObject(resolvedObj)),
property: prop
};
}
return null;
};
Binding.prototype.updateOptions = function(options, value) {
var optionsInstance;
if (options && options.instance) {
optionsInstance = options.instance.get();
}
if (!optionsInstance) {
return;
}
this.updating = true;
try {
if (optionsInstance instanceof Bindable && viewModule.isEventOrGesture(options.property, optionsInstance) && types.isFunction(value)) {
optionsInstance.off(options.property, null, optionsInstance.bindingContext);
optionsInstance.on(options.property, value, optionsInstance.bindingContext);
} else {
var specialSetter = specialProperties.getSpecialPropertySetter(options.property);
if (specialSetter) {
specialSetter(optionsInstance, value);
} else {
if (optionsInstance instanceof observable_1.Observable) {
optionsInstance.set(options.property, value);
} else {
optionsInstance[options.property] = value;
}
}
}
} catch (ex) {
trace.write("Binding error while setting property " + options.property + " of " + optionsInstance + ": " + ex, trace.categories.Binding, trace.messageType.error);
}
this.updating = false;
};
return Binding;
}();
exports.Binding = Binding;
}, function(module, exports, __webpack_require__) {
var types = __webpack_require__(14);
var handlersForEventName = new Map();
var sourcesMap = new WeakMap();
var TargetHandlerPair = function() {
function TargetHandlerPair(target, handler) {
this.tagetRef = new WeakRef(target);
this.handler = handler;
}
return TargetHandlerPair;
}();
function getHandlerForEventName(eventName) {
var handler = handlersForEventName.get(eventName);
if (!handler) {
handler = function(eventData) {
var source = eventData.object;
var sourceEventMap = sourcesMap.get(source);
if (!sourceEventMap) {
source.removeEventListener(eventName, handlersForEventName.get(eventName));
return;
}
var targetHandlerPairList = sourceEventMap.get(eventName);
if (!targetHandlerPairList) {
return;
}
var deadPairsIndexes = [];
for (var i = 0; i < targetHandlerPairList.length; i++) {
var pair = targetHandlerPairList[i];
var target = pair.tagetRef.get();
if (target) {
pair.handler.call(target, eventData);
} else {
deadPairsIndexes.push(i);
}
}
if (deadPairsIndexes.length === targetHandlerPairList.length) {
source.removeEventListener(eventName, handlersForEventName.get(eventName));
sourceEventMap.delete(eventName);
} else {
for (var j = deadPairsIndexes.length - 1; j >= 0; j--) {
targetHandlerPairList.splice(deadPairsIndexes[j], 1);
}
}
};
handlersForEventName.set(eventName, handler);
}
return handler;
}
function validateArgs(source, eventName, handler, target) {
if (types.isNullOrUndefined(source)) {
throw new Error("source is null or undefined");
}
if (types.isNullOrUndefined(target)) {
throw new Error("target is null or undefined");
}
if (!types.isString(eventName)) {
throw new Error("eventName is not a string");
}
if (!types.isFunction(handler)) {
throw new Error("handler is not a function");
}
}
function addWeakEventListener(source, eventName, handler, target) {
validateArgs(source, eventName, handler, target);
var shouldAttach = false;
var sourceEventMap = sourcesMap.get(source);
if (!sourceEventMap) {
sourceEventMap = new Map();
sourcesMap.set(source, sourceEventMap);
shouldAttach = true;
}
var pairList = sourceEventMap.get(eventName);
if (!pairList) {
pairList = new Array();
sourceEventMap.set(eventName, pairList);
shouldAttach = true;
}
pairList.push(new TargetHandlerPair(target, handler));
if (shouldAttach) {
source.addEventListener(eventName, getHandlerForEventName(eventName));
}
}
exports.addWeakEventListener = addWeakEventListener;
function removeWeakEventListener(source, eventName, handler, target) {
validateArgs(source, eventName, handler, target);
var handlerForEventWithName = handlersForEventName.get(eventName);
if (!handlerForEventWithName) {
return;
}
var sourceEventMap = sourcesMap.get(source);
if (!sourceEventMap) {
return;
}
var targetHandlerPairList = sourceEventMap.get(eventName);
if (!targetHandlerPairList) {
return;
}
var targetHandlerPairsToRemove = [];
for (var i = 0; i < targetHandlerPairList.length; i++) {
var pair = targetHandlerPairList[i];
var registeredTarget = pair.tagetRef.get();
if (!registeredTarget || registeredTarget === target && handler === pair.handler) {
targetHandlerPairsToRemove.push(i);
}
}
if (targetHandlerPairsToRemove.length === targetHandlerPairList.length) {
source.removeEventListener(eventName, handlerForEventWithName);
sourceEventMap.delete(eventName);
} else {
for (var j = targetHandlerPairsToRemove.length - 1; j >= 0; j--) {
targetHandlerPairList.splice(targetHandlerPairsToRemove[j], 1);
}
}
}
exports.removeWeakEventListener = removeWeakEventListener;
}, function(module, exports) {
var expressionSymbolsRegex = /[\+\-\*\/%\?:<>=!\|&\(\)^~]/;
var bindingConstants;
(function(bindingConstants) {
bindingConstants.sourceProperty = "sourceProperty";
bindingConstants.targetProperty = "targetProperty";
bindingConstants.expression = "expression";
bindingConstants.twoWay = "twoWay";
bindingConstants.source = "source";
bindingConstants.bindingValueKey = "$value";
bindingConstants.parentValueKey = "$parent";
bindingConstants.parentsValueKey = "$parents";
bindingConstants.newPropertyValueKey = "$newPropertyValue";
})(bindingConstants = exports.bindingConstants || (exports.bindingConstants = {}));
var hasEqualSignRegex = /=+/;
var equalSignComparisionOperatorsRegex = /(==|===|>=|<=|!=|!==)/;
exports.parentsRegex = /\$parents\s*\[\s*(['"]*)\w*\1\s*\]/g;
function isNamedParam(value) {
var equalSignIndex = value.search(hasEqualSignRegex);
if (equalSignIndex > -1) {
var equalSignSurround = value.substr(equalSignIndex > 0 ? equalSignIndex - 1 : 0, 3);
if (equalSignSurround.search(equalSignComparisionOperatorsRegex) === -1) {
return true;
}
}
return false;
}
function areNamedParams(params) {
var i;
for (i = 0; i < params.length; i++) {
if (isNamedParam(params[i])) {
return true;
}
}
return false;
}
var namedParamConstants = {
propName: "propName",
propValue: "propValue"
};
function getPropertyNameValuePair(param, knownOptions, callback) {
var nameValuePair = {};
var propertyName = param.substr(0, param.indexOf("=")).trim();
var propertyValue = param.substr(param.indexOf("=") + 1).trim();
if (knownOptions) {
if (!propertyName) {
propertyName = knownOptions.defaultProperty;
} else {
propertyName = propertyName in knownOptions ? propertyName : null;
}
}
if (propertyName) {
if (callback) {
nameValuePair = callback(propertyName, propertyValue);
} else {
nameValuePair[namedParamConstants.propName] = propertyName;
nameValuePair[namedParamConstants.propValue] = propertyValue;
}
return nameValuePair;
}
return null;
}
function parseNamedProperties(parameterList, knownOptions, callback) {
var result = {};
var i;
for (i = 0; i < parameterList.length; i++) {
var nameValuePair = getPropertyNameValuePair(parameterList[i], knownOptions, callback);
if (nameValuePair) {
result[nameValuePair[namedParamConstants.propName]] = nameValuePair[namedParamConstants.propValue];
}
}
return result;
}
function getParamsArray(value) {
var result = [];
var i;
var skipComma = 0;
var indexReached = 0;
var singleQuoteBlock, doubleQuoteBlock = false;
for (i = 0; i < value.length; i++) {
if (value[i] === '"') {
doubleQuoteBlock = !doubleQuoteBlock;
}
if (value[i] === "'") {
singleQuoteBlock = !singleQuoteBlock;
}
if (value[i] === "(" || value[i] === "[") {
skipComma++;
}
if (value[i] === ")" || value[i] === "]") {
skipComma--;
}
if (value[i] === "," && skipComma === 0 && !(singleQuoteBlock || doubleQuoteBlock)) {
result.push(value.substr(indexReached, i - indexReached));
indexReached = i + 1;
}
}
result.push(value.substr(indexReached));
return result;
}
function isExpression(expression) {
if (expression.search(expressionSymbolsRegex) > -1) {
var parentsMatches = expression.match(exports.parentsRegex);
if (parentsMatches) {
var restOfExpression = expression.substr(expression.indexOf(parentsMatches[0]) + parentsMatches[0].length);
if (!(restOfExpression.search(expressionSymbolsRegex) > -1)) {
return false;
}
}
return true;
}
return false;
}
function getBindingOptions(name, value) {
var namedParams = [];
var params = getParamsArray(value);
if (!areNamedParams(params)) {
if (params.length === 1) {
var trimmedValue = params[0].trim();
var sourceProp;
if (isExpression(trimmedValue)) {
sourceProp = bindingConstants.bindingValueKey;
namedParams.push(bindingConstants.expression + " = " + trimmedValue);
} else {
sourceProp = trimmedValue;
}
namedParams.push(bindingConstants.sourceProperty + " = " + sourceProp);
namedParams.push(bindingConstants.twoWay + " = true");
} else {
namedParams.push(bindingConstants.sourceProperty + " = " + params[0].trim());
namedParams.push(bindingConstants.expression + " = " + params[1].trim());
var twoWay = params[2] ? params[2].toLowerCase().trim() === "true" : true;
namedParams.push(bindingConstants.twoWay + " = " + twoWay);
}
} else {
namedParams = params;
}
var bindingPropertyHandler = function(prop, value) {
var result = {};
result[namedParamConstants.propName] = prop;
if (prop === bindingConstants.twoWay) {
if (value === "true") {
result[namedParamConstants.propValue] = true;
} else {
result[namedParamConstants.propValue] = false;
}
} else {
result[namedParamConstants.propValue] = value;
}
return result;
};
var bindingOptionsParameters = parseNamedProperties(namedParams, xmlBindingProperties, bindingPropertyHandler);
var bindOptions = {
targetProperty: name
};
for (var prop in bindingOptionsParameters) {
if (bindingOptionsParameters.hasOwnProperty(prop)) {
bindOptions[prop] = bindingOptionsParameters[prop];
}
}
if (bindOptions[bindingConstants.twoWay] === undefined) {
bindOptions[bindingConstants.twoWay] = true;
}
return bindOptions;
}
exports.getBindingOptions = getBindingOptions;
var xmlBindingProperties = {
sourceProperty: true,
expression: true,
twoWay: true,
source: true,
defaultProperty: bindingConstants.sourceProperty
};
}, function(module, exports, __webpack_require__) {
var esprima = __webpack_require__(46).esprima;
var Path = __webpack_require__(47).Path;
(function(global) {
"use strict";
var expressionParseCache = Object.create(null);
function getExpression(expressionText) {
var expression = expressionParseCache[expressionText];
if (!expression) {
var delegate = new ASTDelegate();
esprima.parse(expressionText, delegate);
expression = new Expression(delegate);
expressionParseCache[expressionText] = expression;
}
return expression;
}
function Literal(value) {
this.value = value;
this.valueFn_ = undefined;
}
Literal.prototype = {
valueFn: function() {
if (!this.valueFn_) {
var value = this.value;
this.valueFn_ = function() {
return value;
};
}
return this.valueFn_;
}
};
function IdentPath(name) {
this.name = name;
this.path = Path.get(name);
}
IdentPath.prototype = {
valueFn: function() {
if (!this.valueFn_) {
var name = this.name;
var path = this.path;
this.valueFn_ = function(model, observer, changedModel) {
if (observer) observer.addPath(model, path);
if (changedModel) {
var result = path.getValueFrom(changedModel);
if (result !== undefined) {
return result;
}
}
return path.getValueFrom(model);
};
}
return this.valueFn_;
},
setValue: function(model, newValue) {
if (this.path.length == 1) {
model = findScope(model, this.path[0]);
}
return this.path.setValueFrom(model, newValue);
}
};
function MemberExpression(object, property, accessor) {
this.computed = accessor == "[";
this.dynamicDeps = typeof object == "function" || object.dynamicDeps || this.computed && !(property instanceof Literal);
this.simplePath = !this.dynamicDeps && (property instanceof IdentPath || property instanceof Literal) && (object instanceof MemberExpression || object instanceof IdentPath);
this.object = this.simplePath ? object : getFn(object);
this.property = !this.computed || this.simplePath ? property : getFn(property);
}
MemberExpression.prototype = {
get fullPath() {
if (!this.fullPath_) {
var parts = this.object instanceof MemberExpression ? this.object.fullPath.slice() : [ this.object.name ];
parts.push(this.property instanceof IdentPath ? this.property.name : this.property.value);
this.fullPath_ = Path.get(parts);
}
return this.fullPath_;
},
valueFn: function() {
if (!this.valueFn_) {
var object = this.object;
if (this.simplePath) {
var path = this.fullPath;
this.valueFn_ = function(model, observer) {
if (observer) observer.addPath(model, path);
return path.getValueFrom(model);
};
} else if (!this.computed) {
var path = Path.get(this.property.name);
this.valueFn_ = function(model, observer, filterRegistry) {
var context = object(model, observer, filterRegistry);
if (observer) observer.addPath(context, path);
return path.getValueFrom(context);
};
} else {
var property = this.property;
this.valueFn_ = function(model, observer, filterRegistry) {
var context = object(model, observer, filterRegistry);
var propName = property(model, observer, filterRegistry);
if (observer) observer.addPath(context, [ propName ]);
return context ? context[propName] : undefined;
};
}
}
return this.valueFn_;
},
setValue: function(model, newValue) {
if (this.simplePath) {
this.fullPath.setValueFrom(model, newValue);
return newValue;
}
var object = this.object(model);
var propName = this.property instanceof IdentPath ? this.property.name : this.property(model);
return object[propName] = newValue;
}
};
function Filter(name, args) {
this.name = name;
this.args = [];
for (var i = 0; i < args.length; i++) {
this.args[i] = getFn(args[i]);
}
}
Filter.prototype = {
transform: function(model, observer, filterRegistry, toModelDirection, initialArgs) {
var fn = filterRegistry[this.name];
var context = model;
if (fn) {
context = undefined;
} else {
fn = context[this.name];
if (!fn) {
console.error("Cannot find function or filter: " + this.name);
return;
}
}
if (toModelDirection) {
fn = fn.toModel;
} else if (typeof fn.toView == "function") {
fn = fn.toView;
}
if (typeof fn != "function") {
console.error("Cannot find function or filter: " + this.name);
return;
}
var args = initialArgs || [];
for (var i = 0; i < this.args.length; i++) {
args.push(getFn(this.args[i])(model, observer, filterRegistry));
}
return fn.apply(context, args);
}
};
function notImplemented() {
throw Error("Not Implemented");
}
var unaryOperators = {
"+": function(v) {
return +v;
},
"-": function(v) {
return -v;
},
"!": function(v) {
return !v;
}
};
var binaryOperators = {
"+": function(l, r) {
return l + r;
},
"-": function(l, r) {
return l - r;
},
"*": function(l, r) {
return l * r;
},
"/": function(l, r) {
return l / r;
},
"%": function(l, r) {
return l % r;
},
"<": function(l, r) {
return l < r;
},
">": function(l, r) {
return l > r;
},
"<=": function(l, r) {
return l <= r;
},
">=": function(l, r) {
return l >= r;
},
"==": function(l, r) {
return l == r;
},
"!=": function(l, r) {
return l != r;
},
"===": function(l, r) {
return l === r;
},
"!==": function(l, r) {
return l !== r;
},
"&&": function(l, r) {
return l && r;
},
"||": function(l, r) {
return l || r;
}
};
function getFn(arg) {
return typeof arg == "function" ? arg : arg.valueFn();
}
function ASTDelegate() {
this.expression = null;
this.filters = [];
this.deps = {};
this.currentPath = undefined;
this.scopeIdent = undefined;
this.indexIdent = undefined;
this.dynamicDeps = false;
}
ASTDelegate.prototype = {
createUnaryExpression: function(op, argument) {
if (!unaryOperators[op]) throw Error("Disallowed operator: " + op);
argument = getFn(argument);
return function(model, observer, filterRegistry) {
return unaryOperators[op](argument(model, observer, filterRegistry));
};
},
createBinaryExpression: function(op, left, right) {
if (!binaryOperators[op]) throw Error("Disallowed operator: " + op);
left = getFn(left);
right = getFn(right);
switch (op) {
case "||":
this.dynamicDeps = true;
return function(model, observer, filterRegistry) {
return left(model, observer, filterRegistry) || right(model, observer, filterRegistry);
};

case "&&":
this.dynamicDeps = true;
return function(model, observer, filterRegistry) {
return left(model, observer, filterRegistry) && right(model, observer, filterRegistry);
};
}
return function(model, observer, filterRegistry) {
return binaryOperators[op](left(model, observer, filterRegistry), right(model, observer, filterRegistry));
};
},
createConditionalExpression: function(test, consequent, alternate) {
test = getFn(test);
consequent = getFn(consequent);
alternate = getFn(alternate);
this.dynamicDeps = true;
return function(model, observer, filterRegistry) {
return test(model, observer, filterRegistry) ? consequent(model, observer, filterRegistry) : alternate(model, observer, filterRegistry);
};
},
createIdentifier: function(name) {
var ident = new IdentPath(name);
ident.type = "Identifier";
return ident;
},
createMemberExpression: function(accessor, object, property) {
var ex = new MemberExpression(object, property, accessor);
if (ex.dynamicDeps) this.dynamicDeps = true;
return ex;
},
createCallExpression: function(expression, args) {
if (!(expression instanceof IdentPath)) throw Error("Only identifier function invocations are allowed");
var filter = new Filter(expression.name, args);
return function(model, observer, filterRegistry) {
return filter.transform(model, observer, filterRegistry, false);
};
},
createLiteral: function(token) {
return new Literal(token.value);
},
createArrayExpression: function(elements) {
for (var i = 0; i < elements.length; i++) elements[i] = getFn(elements[i]);
return function(model, observer, filterRegistry) {
var arr = [];
for (var i = 0; i < elements.length; i++) arr.push(elements[i](model, observer, filterRegistry));
return arr;
};
},
createProperty: function(kind, key, value) {
return {
key: key instanceof IdentPath ? key.name : key.value,
value: value
};
},
createObjectExpression: function(properties) {
for (var i = 0; i < properties.length; i++) properties[i].value = getFn(properties[i].value);
return function(model, observer, filterRegistry) {
var obj = {};
for (var i = 0; i < properties.length; i++) obj[properties[i].key] = properties[i].value(model, observer, filterRegistry);
return obj;
};
},
createFilter: function(name, args) {
this.filters.push(new Filter(name, args));
},
createAsExpression: function(expression, scopeIdent) {
this.expression = expression;
this.scopeIdent = scopeIdent;
},
createInExpression: function(scopeIdent, indexIdent, expression) {
this.expression = expression;
this.scopeIdent = scopeIdent;
this.indexIdent = indexIdent;
},
createTopLevel: function(expression) {
this.expression = expression;
},
createThisExpression: notImplemented
};
function Expression(delegate) {
this.scopeIdent = delegate.scopeIdent;
this.indexIdent = delegate.indexIdent;
if (!delegate.expression) throw Error("No expression found.");
this.expression = delegate.expression;
getFn(this.expression);
this.filters = delegate.filters;
this.dynamicDeps = delegate.dynamicDeps;
}
Expression.prototype = {
getValue: function(model, isBackConvert, changedModel, observer) {
var value = getFn(this.expression)(model.context, observer, changedModel);
for (var i = 0; i < this.filters.length; i++) {
value = this.filters[i].transform(model.context, observer, model.context, isBackConvert, [ value ]);
}
return value;
},
setValue: function(model, newValue, filterRegistry) {
var count = this.filters ? this.filters.length : 0;
while (count-- > 0) {
newValue = this.filters[count].transform(model, undefined, filterRegistry, true, [ newValue ]);
}
if (this.expression.setValue) return this.expression.setValue(model, newValue);
}
};
function convertStylePropertyName(name) {
return String(name).replace(/[A-Z]/g, function(c) {
return "-" + c.toLowerCase();
});
}
var parentScopeName = "@" + Math.random().toString(36).slice(2);
function findScope(model, prop) {
while (model[parentScopeName] && !Object.prototype.hasOwnProperty.call(model, prop)) {
model = model[parentScopeName];
}
return model;
}
function isLiteralExpression(pathString) {
switch (pathString) {
case "":
return false;

case "false":
case "null":
case "true":
return true;
}
if (!isNaN(Number(pathString))) return true;
return false;
}
function PolymerExpressions() {}
PolymerExpressions.prototype = {
styleObject: function(value) {
var parts = [];
for (var key in value) {
parts.push(convertStylePropertyName(key) + ": " + value[key]);
}
return parts.join("; ");
},
tokenList: function(value) {
var tokens = [];
for (var key in value) {
if (value[key]) tokens.push(key);
}
return tokens.join(" ");
},
prepareInstancePositionChanged: function(template) {
var indexIdent = template.polymerExpressionIndexIdent_;
if (!indexIdent) return;
return function(templateInstance, index) {
templateInstance.model[indexIdent] = index;
};
},
prepareInstanceModel: function(template) {
var scopeName = template.polymerExpressionScopeIdent_;
if (!scopeName) return;
var parentScope = template.templateInstance ? template.templateInstance.model : template.model;
var indexName = template.polymerExpressionIndexIdent_;
return function(model) {
return createScopeObject(parentScope, model, scopeName, indexName);
};
}
};
var createScopeObject = "__proto__" in {} ? function(parentScope, model, scopeName, indexName) {
var scope = {};
scope[scopeName] = model;
scope[indexName] = undefined;
scope[parentScopeName] = parentScope;
scope.__proto__ = parentScope;
return scope;
} : function(parentScope, model, scopeName, indexName) {
var scope = Object.create(parentScope);
Object.defineProperty(scope, scopeName, {
value: model,
configurable: true,
writable: true
});
Object.defineProperty(scope, indexName, {
value: undefined,
configurable: true,
writable: true
});
Object.defineProperty(scope, parentScopeName, {
value: parentScope,
configurable: true,
writable: true
});
return scope;
};
global.PolymerExpressions = PolymerExpressions;
PolymerExpressions.getExpression = getExpression;
})(module.exports);
}, function(module, exports) {
(function(global) {
"use strict";
var Token, TokenName, Syntax, Messages, source, index, length, delegate, lookahead, state;
Token = {
BooleanLiteral: 1,
EOF: 2,
Identifier: 3,
Keyword: 4,
NullLiteral: 5,
NumericLiteral: 6,
Punctuator: 7,
StringLiteral: 8
};
TokenName = {};
TokenName[Token.BooleanLiteral] = "Boolean";
TokenName[Token.EOF] = "<end>";
TokenName[Token.Identifier] = "Identifier";
TokenName[Token.Keyword] = "Keyword";
TokenName[Token.NullLiteral] = "Null";
TokenName[Token.NumericLiteral] = "Numeric";
TokenName[Token.Punctuator] = "Punctuator";
TokenName[Token.StringLiteral] = "String";
Syntax = {
ArrayExpression: "ArrayExpression",
BinaryExpression: "BinaryExpression",
CallExpression: "CallExpression",
ConditionalExpression: "ConditionalExpression",
EmptyStatement: "EmptyStatement",
ExpressionStatement: "ExpressionStatement",
Identifier: "Identifier",
Literal: "Literal",
LabeledStatement: "LabeledStatement",
LogicalExpression: "LogicalExpression",
MemberExpression: "MemberExpression",
ObjectExpression: "ObjectExpression",
Program: "Program",
Property: "Property",
ThisExpression: "ThisExpression",
UnaryExpression: "UnaryExpression"
};
Messages = {
UnexpectedToken: "Unexpected token %0",
UnknownLabel: "Undefined label '%0'",
Redeclaration: "%0 '%1' has already been declared"
};
function assert(condition, message) {
if (!condition) {
throw new Error("ASSERT: " + message);
}
}
function isDecimalDigit(ch) {
return ch >= 48 && ch <= 57;
}
function isWhiteSpace(ch) {
return ch === 32 || ch === 9 || ch === 11 || ch === 12 || ch === 160 || ch >= 5760 && " ᠎             　\ufeff".indexOf(String.fromCharCode(ch)) > 0;
}
function isLineTerminator(ch) {
return ch === 10 || ch === 13 || ch === 8232 || ch === 8233;
}
function isIdentifierStart(ch) {
return ch === 36 || ch === 95 || ch >= 65 && ch <= 90 || ch >= 97 && ch <= 122;
}
function isIdentifierPart(ch) {
return ch === 36 || ch === 95 || ch >= 65 && ch <= 90 || ch >= 97 && ch <= 122 || ch >= 48 && ch <= 57;
}
function isKeyword(id) {
return id === "this";
}
function skipWhitespace() {
while (index < length && isWhiteSpace(source.charCodeAt(index))) {
++index;
}
}
function getIdentifier() {
var start, ch;
start = index++;
while (index < length) {
ch = source.charCodeAt(index);
if (isIdentifierPart(ch)) {
++index;
} else {
break;
}
}
return source.slice(start, index);
}
function scanIdentifier() {
var start, id, type;
start = index;
id = getIdentifier();
if (id.length === 1) {
type = Token.Identifier;
} else if (isKeyword(id)) {
type = Token.Keyword;
} else if (id === "null") {
type = Token.NullLiteral;
} else if (id === "true" || id === "false") {
type = Token.BooleanLiteral;
} else {
type = Token.Identifier;
}
return {
type: type,
value: id,
range: [ start, index ]
};
}
function scanPunctuator() {
var start = index, code = source.charCodeAt(index), code2, ch1 = source[index], ch2;
switch (code) {
case 46:
case 40:
case 41:
case 59:
case 44:
case 123:
case 125:
case 91:
case 93:
case 58:
case 63:
++index;
return {
type: Token.Punctuator,
value: String.fromCharCode(code),
range: [ start, index ]
};

default:
code2 = source.charCodeAt(index + 1);
if (code2 === 61) {
switch (code) {
case 37:
case 38:
case 42:
case 43:
case 45:
case 47:
case 60:
case 62:
case 124:
index += 2;
return {
type: Token.Punctuator,
value: String.fromCharCode(code) + String.fromCharCode(code2),
range: [ start, index ]
};

case 33:
case 61:
index += 2;
if (source.charCodeAt(index) === 61) {
++index;
}
return {
type: Token.Punctuator,
value: source.slice(start, index),
range: [ start, index ]
};

default:
break;
}
}
break;
}
ch2 = source[index + 1];
if (ch1 === ch2 && "&|".indexOf(ch1) >= 0) {
index += 2;
return {
type: Token.Punctuator,
value: ch1 + ch2,
range: [ start, index ]
};
}
if ("<>=!+-*%&|^/".indexOf(ch1) >= 0) {
++index;
return {
type: Token.Punctuator,
value: ch1,
range: [ start, index ]
};
}
throwError({}, Messages.UnexpectedToken, "ILLEGAL");
}
function scanNumericLiteral() {
var number, start, ch;
ch = source[index];
assert(isDecimalDigit(ch.charCodeAt(0)) || ch === ".", "Numeric literal must start with a decimal digit or a decimal point");
start = index;
number = "";
if (ch !== ".") {
number = source[index++];
ch = source[index];
if (number === "0") {
if (ch && isDecimalDigit(ch.charCodeAt(0))) {
throwError({}, Messages.UnexpectedToken, "ILLEGAL");
}
}
while (isDecimalDigit(source.charCodeAt(index))) {
number += source[index++];
}
ch = source[index];
}
if (ch === ".") {
number += source[index++];
while (isDecimalDigit(source.charCodeAt(index))) {
number += source[index++];
}
ch = source[index];
}
if (ch === "e" || ch === "E") {
number += source[index++];
ch = source[index];
if (ch === "+" || ch === "-") {
number += source[index++];
}
if (isDecimalDigit(source.charCodeAt(index))) {
while (isDecimalDigit(source.charCodeAt(index))) {
number += source[index++];
}
} else {
throwError({}, Messages.UnexpectedToken, "ILLEGAL");
}
}
if (isIdentifierStart(source.charCodeAt(index))) {
throwError({}, Messages.UnexpectedToken, "ILLEGAL");
}
return {
type: Token.NumericLiteral,
value: parseFloat(number),
range: [ start, index ]
};
}
function scanStringLiteral() {
var str = "", quote, start, ch, octal = false;
quote = source[index];
assert(quote === "'" || quote === '"', "String literal must starts with a quote");
start = index;
++index;
while (index < length) {
ch = source[index++];
if (ch === quote) {
quote = "";
break;
} else if (ch === "\\") {
ch = source[index++];
if (!ch || !isLineTerminator(ch.charCodeAt(0))) {
switch (ch) {
case "n":
str += "\n";
break;

case "r":
str += "\r";
break;

case "t":
str += "\t";
break;

case "b":
str += "\b";
break;

case "f":
str += "\f";
break;

case "v":
str += "\v";
break;

default:
str += ch;
break;
}
} else {
if (ch === "\r" && source[index] === "\n") {
++index;
}
}
} else if (isLineTerminator(ch.charCodeAt(0))) {
break;
} else {
str += ch;
}
}
if (quote !== "") {
throwError({}, Messages.UnexpectedToken, "ILLEGAL");
}
return {
type: Token.StringLiteral,
value: str,
octal: octal,
range: [ start, index ]
};
}
function isIdentifierName(token) {
return token.type === Token.Identifier || token.type === Token.Keyword || token.type === Token.BooleanLiteral || token.type === Token.NullLiteral;
}
function advance() {
var ch;
skipWhitespace();
if (index >= length) {
return {
type: Token.EOF,
range: [ index, index ]
};
}
ch = source.charCodeAt(index);
if (ch === 40 || ch === 41 || ch === 58) {
return scanPunctuator();
}
if (ch === 39 || ch === 34) {
return scanStringLiteral();
}
if (isIdentifierStart(ch)) {
return scanIdentifier();
}
if (ch === 46) {
if (isDecimalDigit(source.charCodeAt(index + 1))) {
return scanNumericLiteral();
}
return scanPunctuator();
}
if (isDecimalDigit(ch)) {
return scanNumericLiteral();
}
return scanPunctuator();
}
function lex() {
var token;
token = lookahead;
index = token.range[1];
lookahead = advance();
index = token.range[1];
return token;
}
function peek() {
var pos;
pos = index;
lookahead = advance();
index = pos;
}
function throwError(token, messageFormat) {
var error, args = Array.prototype.slice.call(arguments, 2), msg = messageFormat.replace(/%(\d)/g, function(whole, index) {
assert(index < args.length, "Message reference must be in range");
return args[index];
});
error = new Error(msg);
error.index = index;
error.description = msg;
throw error;
}
function throwUnexpected(token) {
throwError(token, Messages.UnexpectedToken, token.value);
}
function expect(value) {
var token = lex();
if (token.type !== Token.Punctuator || token.value !== value) {
throwUnexpected(token);
}
}
function match(value) {
return lookahead.type === Token.Punctuator && lookahead.value === value;
}
function matchKeyword(keyword) {
return lookahead.type === Token.Keyword && lookahead.value === keyword;
}
function consumeSemicolon() {
if (source.charCodeAt(index) === 59) {
lex();
return;
}
skipWhitespace();
if (match(";")) {
lex();
return;
}
if (lookahead.type !== Token.EOF && !match("}")) {
throwUnexpected(lookahead);
}
}
function parseArrayInitialiser() {
var elements = [];
expect("[");
while (!match("]")) {
if (match(",")) {
lex();
elements.push(null);
} else {
elements.push(parseExpression());
if (!match("]")) {
expect(",");
}
}
}
expect("]");
return delegate.createArrayExpression(elements);
}
function parseObjectPropertyKey() {
var token;
skipWhitespace();
token = lex();
if (token.type === Token.StringLiteral || token.type === Token.NumericLiteral) {
return delegate.createLiteral(token);
}
return delegate.createIdentifier(token.value);
}
function parseObjectProperty() {
var token, key;
token = lookahead;
skipWhitespace();
if (token.type === Token.EOF || token.type === Token.Punctuator) {
throwUnexpected(token);
}
key = parseObjectPropertyKey();
expect(":");
return delegate.createProperty("init", key, parseExpression());
}
function parseObjectInitialiser() {
var properties = [];
expect("{");
while (!match("}")) {
properties.push(parseObjectProperty());
if (!match("}")) {
expect(",");
}
}
expect("}");
return delegate.createObjectExpression(properties);
}
function parseGroupExpression() {
var expr;
expect("(");
expr = parseExpression();
expect(")");
return expr;
}
function parsePrimaryExpression() {
var type, token, expr;
if (match("(")) {
return parseGroupExpression();
}
type = lookahead.type;
if (type === Token.Identifier) {
expr = delegate.createIdentifier(lex().value);
} else if (type === Token.StringLiteral || type === Token.NumericLiteral) {
expr = delegate.createLiteral(lex());
} else if (type === Token.Keyword) {
if (matchKeyword("this")) {
lex();
expr = delegate.createThisExpression();
}
} else if (type === Token.BooleanLiteral) {
token = lex();
token.value = token.value === "true";
expr = delegate.createLiteral(token);
} else if (type === Token.NullLiteral) {
token = lex();
token.value = null;
expr = delegate.createLiteral(token);
} else if (match("[")) {
expr = parseArrayInitialiser();
} else if (match("{")) {
expr = parseObjectInitialiser();
}
if (expr) {
return expr;
}
throwUnexpected(lex());
}
function parseArguments() {
var args = [];
expect("(");
if (!match(")")) {
while (index < length) {
args.push(parseExpression());
if (match(")")) {
break;
}
expect(",");
}
}
expect(")");
return args;
}
function parseNonComputedProperty() {
var token;
token = lex();
if (!isIdentifierName(token)) {
throwUnexpected(token);
}
return delegate.createIdentifier(token.value);
}
function parseNonComputedMember() {
expect(".");
return parseNonComputedProperty();
}
function parseComputedMember() {
var expr;
expect("[");
expr = parseExpression();
expect("]");
return expr;
}
function parseLeftHandSideExpression() {
var expr, args, property;
expr = parsePrimaryExpression();
while (true) {
if (match("[")) {
property = parseComputedMember();
expr = delegate.createMemberExpression("[", expr, property);
} else if (match(".")) {
property = parseNonComputedMember();
expr = delegate.createMemberExpression(".", expr, property);
} else if (match("(")) {
args = parseArguments();
expr = delegate.createCallExpression(expr, args);
} else {
break;
}
}
return expr;
}
var parsePostfixExpression = parseLeftHandSideExpression;
function parseUnaryExpression() {
var token, expr;
if (lookahead.type !== Token.Punctuator && lookahead.type !== Token.Keyword) {
expr = parsePostfixExpression();
} else if (match("+") || match("-") || match("!")) {
token = lex();
expr = parseUnaryExpression();
expr = delegate.createUnaryExpression(token.value, expr);
} else if (matchKeyword("delete") || matchKeyword("void") || matchKeyword("typeof")) {
throwError({}, Messages.UnexpectedToken);
} else {
expr = parsePostfixExpression();
}
return expr;
}
function binaryPrecedence(token) {
var prec = 0;
if (token.type !== Token.Punctuator && token.type !== Token.Keyword) {
return 0;
}
switch (token.value) {
case "||":
prec = 1;
break;

case "&&":
prec = 2;
break;

case "==":
case "!=":
case "===":
case "!==":
prec = 6;
break;

case "<":
case ">":
case "<=":
case ">=":
case "instanceof":
prec = 7;
break;

case "in":
prec = 7;
break;

case "+":
case "-":
prec = 9;
break;

case "*":
case "/":
case "%":
prec = 11;
break;

default:
break;
}
return prec;
}
function parseBinaryExpression() {
var expr, token, prec, stack, right, operator, left, i;
left = parseUnaryExpression();
token = lookahead;
prec = binaryPrecedence(token);
if (prec === 0) {
return left;
}
token.prec = prec;
lex();
right = parseUnaryExpression();
stack = [ left, token, right ];
while ((prec = binaryPrecedence(lookahead)) > 0) {
while (stack.length > 2 && prec <= stack[stack.length - 2].prec) {
right = stack.pop();
operator = stack.pop().value;
left = stack.pop();
expr = delegate.createBinaryExpression(operator, left, right);
stack.push(expr);
}
token = lex();
token.prec = prec;
stack.push(token);
expr = parseUnaryExpression();
stack.push(expr);
}
i = stack.length - 1;
expr = stack[i];
while (i > 1) {
expr = delegate.createBinaryExpression(stack[i - 1].value, stack[i - 2], expr);
i -= 2;
}
return expr;
}
function parseConditionalExpression() {
var expr, consequent, alternate;
expr = parseBinaryExpression();
if (match("?")) {
lex();
consequent = parseConditionalExpression();
expect(":");
alternate = parseConditionalExpression();
expr = delegate.createConditionalExpression(expr, consequent, alternate);
}
return expr;
}
var parseExpression = parseConditionalExpression;
function parseFilter() {
var identifier, args;
identifier = lex();
if (identifier.type !== Token.Identifier) {
throwUnexpected(identifier);
}
args = match("(") ? parseArguments() : [];
return delegate.createFilter(identifier.value, args);
}
function parseFilters() {
while (match("|")) {
lex();
parseFilter();
}
}
function parseTopLevel() {
skipWhitespace();
peek();
var expr = parseExpression();
if (expr) {
if (lookahead.value === "," || lookahead.value == "in" && expr.type === Syntax.Identifier) {
parseInExpression(expr);
} else {
parseFilters();
if (lookahead.value === "as") {
parseAsExpression(expr);
} else {
delegate.createTopLevel(expr);
}
}
}
if (lookahead.type !== Token.EOF) {
throwUnexpected(lookahead);
}
}
function parseAsExpression(expr) {
lex();
var identifier = lex().value;
delegate.createAsExpression(expr, identifier);
}
function parseInExpression(identifier) {
var indexName;
if (lookahead.value === ",") {
lex();
if (lookahead.type !== Token.Identifier) throwUnexpected(lookahead);
indexName = lex().value;
}
lex();
var expr = parseExpression();
parseFilters();
delegate.createInExpression(identifier.name, indexName, expr);
}
function parse(code, inDelegate) {
delegate = inDelegate;
source = code;
index = 0;
length = source.length;
lookahead = null;
state = {
labelSet: {}
};
return parseTopLevel();
}
global.esprima = {
parse: parse
};
})(module.exports);
}, function(module, exports) {
"use strict";
function detectEval() {
if (typeof chrome !== "undefined" && chrome.app && chrome.app.runtime) {
return false;
}
if (typeof navigator != "undefined" && navigator.getDeviceStorage) {
return false;
}
try {
var f = new Function("", "return true;");
return f();
} catch (ex) {
return false;
}
}
var hasEval = detectEval();
function isIndex(s) {
return +s === s >>> 0 && s !== "";
}
function toNumber(s) {
return +s;
}
function isObject(obj) {
return obj === Object(obj);
}
var numberIsNaN = Number.isNaN || function(value) {
return typeof value === "number" && isNaN(value);
};
function areSameValue(left, right) {
if (left === right) return left !== 0 || 1 / left === 1 / right;
if (numberIsNaN(left) && numberIsNaN(right)) return true;
return left !== left && right !== right;
}
var createObject = "__proto__" in {} ? function(obj) {
return obj;
} : function(obj) {
var proto = obj.__proto__;
if (!proto) return obj;
var newObject = Object.create(proto);
Object.getOwnPropertyNames(obj).forEach(function(name) {
Object.defineProperty(newObject, name, Object.getOwnPropertyDescriptor(obj, name));
});
return newObject;
};
var identStart = "[$_a-zA-Z]";
var identPart = "[$_a-zA-Z0-9]";
var identRegExp = new RegExp("^" + identStart + "+" + identPart + "*" + "$");
function getPathCharType(char) {
if (char === undefined) return "eof";
var code = char.charCodeAt(0);
switch (code) {
case 91:
case 93:
case 46:
case 34:
case 39:
case 48:
return char;

case 95:
case 36:
return "ident";

case 32:
case 9:
case 10:
case 13:
case 160:
case 65279:
case 8232:
case 8233:
return "ws";
}
if (97 <= code && code <= 122 || 65 <= code && code <= 90) return "ident";
if (49 <= code && code <= 57) return "number";
return "else";
}
var pathStateMachine = {
beforePath: {
ws: [ "beforePath" ],
ident: [ "inIdent", "append" ],
"[": [ "beforeElement" ],
eof: [ "afterPath" ]
},
inPath: {
ws: [ "inPath" ],
".": [ "beforeIdent" ],
"[": [ "beforeElement" ],
eof: [ "afterPath" ]
},
beforeIdent: {
ws: [ "beforeIdent" ],
ident: [ "inIdent", "append" ]
},
inIdent: {
ident: [ "inIdent", "append" ],
0: [ "inIdent", "append" ],
number: [ "inIdent", "append" ],
ws: [ "inPath", "push" ],
".": [ "beforeIdent", "push" ],
"[": [ "beforeElement", "push" ],
eof: [ "afterPath", "push" ]
},
beforeElement: {
ws: [ "beforeElement" ],
0: [ "afterZero", "append" ],
number: [ "inIndex", "append" ],
"'": [ "inSingleQuote", "append", "" ],
'"': [ "inDoubleQuote", "append", "" ]
},
afterZero: {
ws: [ "afterElement", "push" ],
"]": [ "inPath", "push" ]
},
inIndex: {
0: [ "inIndex", "append" ],
number: [ "inIndex", "append" ],
ws: [ "afterElement" ],
"]": [ "inPath", "push" ]
},
inSingleQuote: {
"'": [ "afterElement" ],
eof: [ "error" ],
else: [ "inSingleQuote", "append" ]
},
inDoubleQuote: {
'"': [ "afterElement" ],
eof: [ "error" ],
else: [ "inDoubleQuote", "append" ]
},
afterElement: {
ws: [ "afterElement" ],
"]": [ "inPath", "push" ]
}
};
function noop() {}
function parsePath(path) {
var keys = [];
var index = -1;
var c, newChar, key, type, transition, action, typeMap, mode = "beforePath";
var actions = {
push: function() {
if (key === undefined) return;
keys.push(key);
key = undefined;
},
append: function() {
if (key === undefined) key = newChar; else key += newChar;
}
};
function maybeUnescapeQuote() {
if (index >= path.length) return;
var nextChar = path[index + 1];
if (mode == "inSingleQuote" && nextChar == "'" || mode == "inDoubleQuote" && nextChar == '"') {
index++;
newChar = nextChar;
actions.append();
return true;
}
}
while (mode) {
index++;
c = path[index];
if (c == "\\" && maybeUnescapeQuote(mode)) continue;
type = getPathCharType(c);
typeMap = pathStateMachine[mode];
transition = typeMap[type] || typeMap["else"] || "error";
if (transition == "error") return;
mode = transition[0];
action = actions[transition[1]] || noop;
newChar = transition[2] === undefined ? c : transition[2];
action();
if (mode === "afterPath") {
return keys;
}
}
return;
}
function isIdent(s) {
return identRegExp.test(s);
}
var constructorIsPrivate = {};
function Path(parts, privateToken) {
if (privateToken !== constructorIsPrivate) throw Error("Use Path.get to retrieve path objects");
for (var i = 0; i < parts.length; i++) {
this.push(String(parts[i]));
}
if (hasEval && this.length) {
this.getValueFrom = this.compiledGetValueFromFn();
}
}
var pathCache = {};
function getPath(pathString) {
if (pathString instanceof Path) return pathString;
if (pathString == null || pathString.length == 0) pathString = "";
if (typeof pathString != "string") {
if (isIndex(pathString.length)) {
return new Path(pathString, constructorIsPrivate);
}
pathString = String(pathString);
}
var path = pathCache[pathString];
if (path) return path;
var parts = parsePath(pathString);
if (!parts) return invalidPath;
var path = new Path(parts, constructorIsPrivate);
pathCache[pathString] = path;
return path;
}
Path.get = getPath;
function formatAccessor(key) {
if (isIndex(key)) {
return "[" + key + "]";
} else {
return '["' + key.replace(/"/g, '\\"') + '"]';
}
}
Path.prototype = createObject({
__proto__: [],
valid: true,
toString: function() {
var pathString = "";
for (var i = 0; i < this.length; i++) {
var key = this[i];
if (isIdent(key)) {
pathString += i ? "." + key : key;
} else {
pathString += formatAccessor(key);
}
}
return pathString;
},
getValueFrom: function(obj, directObserver) {
for (var i = 0; i < this.length; i++) {
if (obj == null) return;
obj = obj[this[i]];
}
return obj;
},
iterateObjects: function(obj, observe) {
for (var i = 0; i < this.length; i++) {
if (i) obj = obj[this[i - 1]];
if (!isObject(obj)) return;
observe(obj, this[i]);
}
},
compiledGetValueFromFn: function() {
var str = "";
var pathString = "obj";
str += "if (obj != null";
var i = 0;
var key;
for (;i < this.length - 1; i++) {
key = this[i];
pathString += isIdent(key) ? "." + key : formatAccessor(key);
str += " &&\n     " + pathString + " != null";
}
str += ")\n";
var key = this[i];
pathString += isIdent(key) ? "." + key : formatAccessor(key);
str += "  return " + pathString + ";\nelse\n  return undefined;";
return new Function("obj", str);
},
setValueFrom: function(obj, value) {
if (!this.length) return false;
for (var i = 0; i < this.length - 1; i++) {
if (!isObject(obj)) return false;
obj = obj[this[i]];
}
if (!isObject(obj)) return false;
obj[this[i]] = value;
return true;
}
});
var invalidPath = new Path("", constructorIsPrivate);
invalidPath.valid = false;
invalidPath.getValueFrom = invalidPath.setValueFrom = function() {};
exports.Path = Path;
}, function(module, exports) {
var specialProperties = new Map();
function specialPropertyKey(name) {
return name.toLowerCase();
}
function registerSpecialProperty(name, setter) {
var propertyKey = specialPropertyKey(name);
if (specialProperties.has(propertyKey)) {
throw new Error("Property for " + propertyKey + " already registered");
} else {
specialProperties.set(propertyKey, setter);
}
}
exports.registerSpecialProperty = registerSpecialProperty;
function getSpecialPropertySetter(name) {
var propertyKey = specialPropertyKey(name);
return specialProperties.get(propertyKey);
}
exports.getSpecialPropertySetter = getSpecialPropertySetter;
}, function(module, exports, __webpack_require__) {
var formattedStringCommon = __webpack_require__(50);
var types = __webpack_require__(14);
global.moduleMerge(formattedStringCommon, exports);
var FormattedString = function(_super) {
__extends(FormattedString, _super);
function FormattedString() {
_super.apply(this, arguments);
}
FormattedString.prototype.createFormattedStringCore = function() {
var ssb = new android.text.SpannableStringBuilder();
var i;
var spanStart = 0;
var spanLength = 0;
var spanText = "";
for (i = 0; i < this.spans.length; i++) {
var span = this.spans.getItem(i);
spanText = types.toUIString(span.text);
spanLength = spanText.length;
if (spanLength !== 0) {
ssb.insert(spanStart, spanText);
span.updateSpanModifiers(this);
var p;
for (p = 0; p < span.spanModifiers.length; p++) {
ssb.setSpan(span.spanModifiers[p], spanStart, spanStart + spanLength, android.text.Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
}
spanStart += spanLength;
}
}
this._formattedText = ssb;
};
return FormattedString;
}(formattedStringCommon.FormattedString);
exports.FormattedString = FormattedString;
}, function(module, exports, __webpack_require__) {
var observable = __webpack_require__(18);
var observableArray = __webpack_require__(51);
var types = __webpack_require__(14);
var colorModule = __webpack_require__(19);
var knownCollections;
(function(knownCollections) {
knownCollections.spans = "spans";
})(knownCollections = exports.knownCollections || (exports.knownCollections = {}));
var CHILD_SPAN = "Span";
var CHILD_FORMATTED_TEXT = "formattedText";
var CHILD_FORMATTED_STRING = "FormattedString";
var FormattedString = function(_super) {
__extends(FormattedString, _super);
function FormattedString() {
_super.call(this);
this._spans = new observableArray.ObservableArray();
this._spans.addEventListener(observableArray.ObservableArray.changeEvent, this.onSpansCollectionChanged, this);
this._isDirty = true;
}
Object.defineProperty(FormattedString.prototype, "parent", {
get: function() {
return this._parent;
},
set: function(value) {
if (this._parent !== value) {
this._parent = value;
}
},
enumerable: true,
configurable: true
});
Object.defineProperty(FormattedString.prototype, "fontFamily", {
get: function() {
return this._fontFamily;
},
set: function(value) {
if (this._fontFamily !== value) {
this._fontFamily = value;
}
},
enumerable: true,
configurable: true
});
Object.defineProperty(FormattedString.prototype, "fontSize", {
get: function() {
return this._fontSize;
},
set: function(value) {
var fSize;
if (types.isString(value)) {
fSize = parseInt(value);
} else {
fSize = value;
}
if (this._fontSize !== fSize) {
this._fontSize = fSize;
}
},
enumerable: true,
configurable: true
});
Object.defineProperty(FormattedString.prototype, "foregroundColor", {
get: function() {
return this._foregroundColor;
},
set: function(value) {
var foreColor;
if (types.isString(value)) {
foreColor = new colorModule.Color(value);
} else {
foreColor = value;
}
if (this._foregroundColor !== foreColor) {
this._foregroundColor = foreColor;
}
},
enumerable: true,
configurable: true
});
Object.defineProperty(FormattedString.prototype, "backgroundColor", {
get: function() {
return this._backgroundColor;
},
set: function(value) {
var backColor;
if (types.isString(value)) {
backColor = new colorModule.Color(value);
} else {
backColor = value;
}
if (this._backgroundColor !== backColor) {
this._backgroundColor = backColor;
}
},
enumerable: true,
configurable: true
});
Object.defineProperty(FormattedString.prototype, "underline", {
get: function() {
return this._underline;
},
set: function(value) {
var underlineIntValue;
if (types.isString(value)) {
underlineIntValue = parseInt(value);
} else {
underlineIntValue = value;
}
if (this._underline !== underlineIntValue) {
this._underline = underlineIntValue;
}
},
enumerable: true,
configurable: true
});
Object.defineProperty(FormattedString.prototype, "strikethrough", {
get: function() {
return this._strikethrough;
},
set: function(value) {
var strikethroughIntValue;
if (types.isString(value)) {
strikethroughIntValue = parseInt(value);
} else {
strikethroughIntValue = value;
}
if (this._strikethrough !== strikethroughIntValue) {
this._strikethrough = strikethroughIntValue;
}
},
enumerable: true,
configurable: true
});
Object.defineProperty(FormattedString.prototype, "fontAttributes", {
get: function() {
return this._fontAttributes;
},
set: function(value) {
if (this._fontAttributes !== value) {
this._fontAttributes = value;
}
},
enumerable: true,
configurable: true
});
Object.defineProperty(FormattedString.prototype, "spans", {
get: function() {
if (!this._spans) {
this._spans = new observableArray.ObservableArray();
}
return this._spans;
},
enumerable: true,
configurable: true
});
FormattedString.prototype.onSpansCollectionChanged = function(eventData) {
var i;
if (eventData.addedCount > 0) {
for (i = 0; i < eventData.addedCount; i++) {
var addedSpan = eventData.object.getItem(eventData.index + i);
addedSpan.parentFormattedString = this;
addedSpan.addEventListener(observable.Observable.propertyChangeEvent, this.onSpanChanged, this);
}
}
if (eventData.removed && eventData.removed.length > 0) {
var p;
for (p = 0; p < eventData.removed.length; p++) {
var removedSpan = eventData.removed[p];
removedSpan.removeEventListener(observable.Observable.propertyChangeEvent, this.onSpanChanged, this);
}
}
this.updateFormattedText(true);
};
FormattedString.prototype.onSpanChanged = function(eventData) {
this.updateFormattedText(true);
};
FormattedString.prototype.updateFormattedText = function(isDirty) {
var shouldUpdate = isDirty || this._isDirty;
if (shouldUpdate) {
this.createFormattedStringCore();
this._isDirty = false;
this.notify(this._createPropertyChangeData("", this));
}
};
FormattedString.prototype.createFormattedStringCore = function() {};
FormattedString.prototype.toString = function() {
var result = "";
var i;
for (i = 0; i < this._spans.length; i++) {
result += this._spans.getItem(i).text;
}
return result;
};
FormattedString.prototype._addArrayFromBuilder = function(name, value) {
var i;
var span;
if (name === knownCollections.spans) {
for (i = 0; i < value.length; i++) {
span = value[i];
this.spans.push(span);
}
}
};
FormattedString.prototype.updateSpansBindingContext = function(newBindingContext) {
var i;
for (i = 0; i < this.spans.length; i++) {
var span = this.spans.getItem(i);
span.bindingContext = newBindingContext;
}
};
FormattedString.prototype._addChildFromBuilder = function(name, value) {
if (name === CHILD_SPAN) {
this.spans.push(value);
}
};
FormattedString.addFormattedStringToView = function(view, name, value) {
if (name === CHILD_SPAN) {
if (!view.formattedText) {
view.formattedText = new FormattedString();
}
view.formattedText.spans.push(value);
} else if (name === CHILD_FORMATTED_TEXT || name === CHILD_FORMATTED_STRING) {
view.formattedText = value;
}
};
FormattedString.prototype._updateCharactersInRangeReplacementString = function(rangeLocation, rangeLength, replacementString) {};
return FormattedString;
}(observable.Observable);
exports.FormattedString = FormattedString;
}, function(module, exports, __webpack_require__) {
var observable = __webpack_require__(18);
var types = __webpack_require__(14);
var ChangeType = function() {
function ChangeType() {}
ChangeType.Add = "add";
ChangeType.Delete = "delete";
ChangeType.Update = "update";
ChangeType.Splice = "splice";
return ChangeType;
}();
exports.ChangeType = ChangeType;
var CHANGE = "change";
var ObservableArray = function(_super) {
__extends(ObservableArray, _super);
function ObservableArray() {
_super.call(this);
if (arguments.length === 1 && Array.isArray(arguments[0])) {
this._array = arguments[0].slice();
} else {
this._array = Array.apply(null, arguments);
}
this._addArgs = {
eventName: CHANGE,
object: this,
action: ChangeType.Add,
index: null,
removed: new Array(),
addedCount: 1
};
this._deleteArgs = {
eventName: CHANGE,
object: this,
action: ChangeType.Delete,
index: null,
removed: null,
addedCount: 0
};
}
ObservableArray.prototype.getItem = function(index) {
return this._array[index];
};
ObservableArray.prototype.setItem = function(index, value) {
var oldValue = this._array[index];
this._array[index] = value;
this.notify({
eventName: CHANGE,
object: this,
action: ChangeType.Update,
index: index,
removed: [ oldValue ],
addedCount: 1
});
};
Object.defineProperty(ObservableArray.prototype, "length", {
get: function() {
return this._array.length;
},
set: function(value) {
if (types.isNumber(value) && this._array && this._array.length !== value) {
this.splice(value, this._array.length - value);
}
},
enumerable: true,
configurable: true
});
ObservableArray.prototype.toString = function() {
return this._array.toString();
};
ObservableArray.prototype.toLocaleString = function() {
return this._array.toLocaleString();
};
ObservableArray.prototype.concat = function() {
this._addArgs.index = this._array.length;
var result = this._array.concat.apply(this._array, arguments);
return result;
};
ObservableArray.prototype.join = function(separator) {
return this._array.join(separator);
};
ObservableArray.prototype.pop = function() {
this._deleteArgs.index = this._array.length - 1;
var result = this._array.pop();
this._deleteArgs.removed = [ result ];
this.notify(this._deleteArgs);
this._notifyLengthChange();
return result;
};
ObservableArray.prototype.push = function() {
this._addArgs.index = this._array.length;
if (arguments.length === 1 && Array.isArray(arguments[0])) {
var source = arguments[0];
for (var i = 0, l = source.length; i < l; i++) {
this._array.push(source[i]);
}
} else {
this._array.push.apply(this._array, arguments);
}
this._addArgs.addedCount = this._array.length - this._addArgs.index;
this.notify(this._addArgs);
this._notifyLengthChange();
return this._array.length;
};
ObservableArray.prototype._notifyLengthChange = function() {
var lengthChangedData = this._createPropertyChangeData("length", this._array.length);
this.notify(lengthChangedData);
};
ObservableArray.prototype.reverse = function() {
return this._array.reverse();
};
ObservableArray.prototype.shift = function() {
var result = this._array.shift();
this._deleteArgs.index = 0;
this._deleteArgs.removed = [ result ];
this.notify(this._deleteArgs);
this._notifyLengthChange();
return result;
};
ObservableArray.prototype.slice = function(start, end) {
return this._array.slice(start, end);
};
ObservableArray.prototype.sort = function(compareFn) {
return this._array.sort(compareFn);
};
ObservableArray.prototype.splice = function(start, deleteCount) {
var length = this._array.length;
var result = this._array.splice.apply(this._array, arguments);
this.notify({
eventName: CHANGE,
object: this,
action: ChangeType.Splice,
index: start,
removed: result,
addedCount: this._array.length > length ? this._array.length - length : 0
});
if (this._array.length !== length) {
this._notifyLengthChange();
}
return result;
};
ObservableArray.prototype.unshift = function() {
var length = this._array.length;
var result = this._array.unshift.apply(this._array, arguments);
this._addArgs.index = 0;
this._addArgs.addedCount = result - length;
this.notify(this._addArgs);
this._notifyLengthChange();
return result;
};
ObservableArray.prototype.indexOf = function(searchElement, fromIndex) {
var index = fromIndex ? fromIndex : 0;
for (var i = index, l = this._array.length; i < l; i++) {
if (this._array[i] === searchElement) {
return i;
}
}
return -1;
};
ObservableArray.prototype.lastIndexOf = function(searchElement, fromIndex) {
var index = fromIndex ? fromIndex : this._array.length - 1;
for (var i = index; i >= 0; i--) {
if (this._array[i] === searchElement) {
return i;
}
}
return -1;
};
ObservableArray.prototype.every = function(callbackfn, thisArg) {
return this._array.every(callbackfn, thisArg);
};
ObservableArray.prototype.some = function(callbackfn, thisArg) {
return this._array.some(callbackfn, thisArg);
};
ObservableArray.prototype.forEach = function(callbackfn, thisArg) {
this._array.forEach(callbackfn, thisArg);
};
ObservableArray.prototype.map = function(callbackfn, thisArg) {
return this._array.map(callbackfn, thisArg);
};
ObservableArray.prototype.filter = function(callbackfn, thisArg) {
return this._array.filter(callbackfn, thisArg);
};
ObservableArray.prototype.reduce = function(callbackfn, initialValue) {
return this._array.reduce(callbackfn, initialValue);
};
ObservableArray.prototype.reduceRight = function(callbackfn, initialValue) {
return this._array.reduceRight(callbackfn, initialValue);
};
ObservableArray.changeEvent = CHANGE;
return ObservableArray;
}(observable.Observable);
exports.ObservableArray = ObservableArray;
}, function(module, exports, __webpack_require__) {
var utils = __webpack_require__(27);
var style = __webpack_require__(15);
var enums = __webpack_require__(24);
var platform_1 = __webpack_require__(35);
var TextBaseStyler = function() {
function TextBaseStyler() {}
TextBaseStyler.setPlaceholderColorProperty = function(view, newValue) {
view._nativeView.setHintTextColor(newValue);
};
TextBaseStyler.resetPlaceholderColorProperty = function(view, nativeValue) {
view._nativeView.setHintTextColor(nativeValue);
};
TextBaseStyler.getNativePlaceholderColorValue = function(view) {
return view._nativeView.getHintTextColors().getDefaultColor();
};
TextBaseStyler.setColorProperty = function(view, newValue) {
view._nativeView.setTextColor(newValue);
};
TextBaseStyler.resetColorProperty = function(view, nativeValue) {
view._nativeView.setTextColor(nativeValue);
};
TextBaseStyler.getNativeColorValue = function(view) {
return view._nativeView.getTextColors().getDefaultColor();
};
TextBaseStyler.setFontInternalProperty = function(view, newValue, nativeValue) {
var tv = view._nativeView;
var fontValue = newValue;
var typeface = fontValue.getAndroidTypeface();
if (typeface) {
tv.setTypeface(typeface);
} else {
tv.setTypeface(nativeValue.typeface);
}
if (fontValue.fontSize) {
tv.setTextSize(fontValue.fontSize);
} else {
tv.setTextSize(android.util.TypedValue.COMPLEX_UNIT_PX, nativeValue.size);
}
};
TextBaseStyler.resetFontInternalProperty = function(view, nativeValue) {
var tv = view._nativeView;
if (tv && nativeValue) {
tv.setTypeface(nativeValue.typeface);
tv.setTextSize(android.util.TypedValue.COMPLEX_UNIT_PX, nativeValue.size);
}
};
TextBaseStyler.getNativeFontInternalValue = function(view) {
var tv = view._nativeView;
return {
typeface: tv.getTypeface(),
size: tv.getTextSize()
};
};
TextBaseStyler.setTextAlignmentProperty = function(view, newValue) {
var verticalGravity = view._nativeView.getGravity() & android.view.Gravity.VERTICAL_GRAVITY_MASK;
switch (newValue) {
case enums.TextAlignment.left:
view._nativeView.setGravity(android.view.Gravity.LEFT | verticalGravity);
break;

case enums.TextAlignment.center:
view._nativeView.setGravity(android.view.Gravity.CENTER_HORIZONTAL | verticalGravity);
break;

case enums.TextAlignment.right:
view._nativeView.setGravity(android.view.Gravity.RIGHT | verticalGravity);
break;

default:
break;
}
};
TextBaseStyler.resetTextAlignmentProperty = function(view, nativeValue) {
view._nativeView.setGravity(nativeValue);
};
TextBaseStyler.getNativeTextAlignmentValue = function(view) {
return view._nativeView.getGravity();
};
TextBaseStyler.setTextDecorationProperty = function(view, newValue) {
utils.ad.setTextDecoration(view._nativeView, newValue);
};
TextBaseStyler.resetTextDecorationProperty = function(view, nativeValue) {
utils.ad.setTextDecoration(view._nativeView, enums.TextDecoration.none);
};
TextBaseStyler.setTextTransformProperty = function(view, newValue) {
utils.ad.setTextTransform(view, newValue);
};
TextBaseStyler.resetTextTransformProperty = function(view, nativeValue) {
utils.ad.setTextTransform(view, enums.TextTransform.none);
};
TextBaseStyler.setWhiteSpaceProperty = function(view, newValue) {
utils.ad.setWhiteSpace(view._nativeView, newValue);
};
TextBaseStyler.resetWhiteSpaceProperty = function(view, nativeValue) {
utils.ad.setWhiteSpace(view._nativeView, enums.WhiteSpace.normal);
};
TextBaseStyler.getLetterSpacingProperty = function(view) {
return view.android.getLetterSpacing();
};
TextBaseStyler.setLetterSpacingProperty = function(view, newValue) {
view.android.setLetterSpacing(newValue);
};
TextBaseStyler.resetLetterSpacingProperty = function(view, nativeValue) {
view.android.setLetterSpacing(nativeValue);
};
TextBaseStyler.registerHandlers = function() {
style.registerHandler(style.colorProperty, new style.StylePropertyChangedHandler(TextBaseStyler.setColorProperty, TextBaseStyler.resetColorProperty, TextBaseStyler.getNativeColorValue), "TextBase");
style.registerHandler(style.placeholderColorProperty, new style.StylePropertyChangedHandler(TextBaseStyler.setPlaceholderColorProperty, TextBaseStyler.resetPlaceholderColorProperty, TextBaseStyler.getNativePlaceholderColorValue), "TextBase");
style.registerHandler(style.fontInternalProperty, new style.StylePropertyChangedHandler(TextBaseStyler.setFontInternalProperty, TextBaseStyler.resetFontInternalProperty, TextBaseStyler.getNativeFontInternalValue), "TextBase");
style.registerHandler(style.textAlignmentProperty, new style.StylePropertyChangedHandler(TextBaseStyler.setTextAlignmentProperty, TextBaseStyler.resetTextAlignmentProperty, TextBaseStyler.getNativeTextAlignmentValue), "TextBase");
style.registerHandler(style.textDecorationProperty, new style.StylePropertyChangedHandler(TextBaseStyler.setTextDecorationProperty, TextBaseStyler.resetTextDecorationProperty), "TextBase");
style.registerHandler(style.textTransformProperty, new style.StylePropertyChangedHandler(TextBaseStyler.setTextTransformProperty, TextBaseStyler.resetTextTransformProperty), "TextBase");
style.registerHandler(style.whiteSpaceProperty, new style.StylePropertyChangedHandler(TextBaseStyler.setWhiteSpaceProperty, TextBaseStyler.resetWhiteSpaceProperty), "TextBase");
if (parseInt(platform_1.device.sdkVersion, 10) >= 21) {
style.registerHandler(style.letterSpacingProperty, new style.StylePropertyChangedHandler(TextBaseStyler.setLetterSpacingProperty, TextBaseStyler.resetLetterSpacingProperty, TextBaseStyler.getLetterSpacingProperty), "TextBase");
}
};
return TextBaseStyler;
}();
exports.TextBaseStyler = TextBaseStyler;
}, function(module, exports, __webpack_require__) {
var common = __webpack_require__(54);
var definition = __webpack_require__(53);
var view = __webpack_require__(12);
var trace = __webpack_require__(16);
var utils = __webpack_require__(27);
global.moduleMerge(common, exports);
var SWIPE_THRESHOLD = 100;
var SWIPE_VELOCITY_THRESHOLD = 100;
var INVALID_POINTER_ID = -1;
var TO_DEGREES = 180 / Math.PI;
var GesturesObserver = function(_super) {
__extends(GesturesObserver, _super);
function GesturesObserver() {
_super.apply(this, arguments);
}
GesturesObserver.prototype.observe = function(type) {
var _this = this;
if (this.target) {
this.type = type;
this._onTargetLoaded = function(args) {
if (trace.enabled) {
trace.write(_this.target + ".target loaded. android:" + _this.target._nativeView, "gestures");
}
_this._attach(_this.target, type);
};
this._onTargetUnloaded = function(args) {
if (trace.enabled) {
trace.write(_this.target + ".target unloaded. android:" + _this.target._nativeView, "gestures");
}
_this._detach();
};
this.target.on(view.View.loadedEvent, this._onTargetLoaded);
this.target.on(view.View.unloadedEvent, this._onTargetUnloaded);
if (this.target.isLoaded) {
this._attach(this.target, type);
}
}
};
GesturesObserver.prototype.disconnect = function() {
this._detach();
if (this.target) {
this.target.off(view.View.loadedEvent, this._onTargetLoaded);
this.target.off(view.View.unloadedEvent, this._onTargetUnloaded);
this._onTargetLoaded = null;
this._onTargetUnloaded = null;
}
_super.prototype.disconnect.call(this);
};
GesturesObserver.prototype._detach = function() {
if (trace.enabled) {
trace.write(this.target + "._detach() android:" + this.target._nativeView, "gestures");
}
this._notifyTouch = false;
this._simpleGestureDetector = null;
this._scaleGestureDetector = null;
this._swipeGestureDetector = null;
this._panGestureDetector = null;
this._rotateGestureDetector = null;
this._eventData = null;
};
GesturesObserver.prototype._attach = function(target, type) {
if (trace.enabled) {
trace.write(this.target + "._attach() android:" + this.target._nativeView, "gestures");
}
this._detach();
if (type & definition.GestureTypes.tap || type & definition.GestureTypes.doubleTap || type & definition.GestureTypes.longPress) {
ensureTapAndDoubleTapGestureListenerClass();
this._simpleGestureDetector = new android.support.v4.view.GestureDetectorCompat(target._context, new TapAndDoubleTapGestureListenerClass(this, this.target, type));
}
if (type & definition.GestureTypes.pinch) {
ensurePinchGestureListenerClass();
this._scaleGestureDetector = new android.view.ScaleGestureDetector(target._context, new PinchGestureListenerClass(this, this.target));
}
if (type & definition.GestureTypes.swipe) {
ensureSwipeGestureListenerClass();
this._swipeGestureDetector = new android.support.v4.view.GestureDetectorCompat(target._context, new SwipeGestureListenerClass(this, this.target));
}
if (type & definition.GestureTypes.pan) {
this._panGestureDetector = new CustomPanGestureDetector(this, this.target);
}
if (type & definition.GestureTypes.rotation) {
this._rotateGestureDetector = new CustomRotateGestureDetector(this, this.target);
}
if (type & definition.GestureTypes.touch) {
this._notifyTouch = true;
}
};
GesturesObserver.prototype.androidOnTouchEvent = function(motionEvent) {
if (this._notifyTouch) {
if (!this._eventData) {
this._eventData = new TouchGestureEventData();
}
this._eventData.prepare(this.target, motionEvent);
_executeCallback(this, this._eventData);
}
if (this._simpleGestureDetector) {
this._simpleGestureDetector.onTouchEvent(motionEvent);
}
if (this._scaleGestureDetector) {
this._scaleGestureDetector.onTouchEvent(motionEvent);
}
if (this._swipeGestureDetector) {
this._swipeGestureDetector.onTouchEvent(motionEvent);
}
if (this._panGestureDetector) {
this._panGestureDetector.onTouchEvent(motionEvent);
}
if (this._rotateGestureDetector) {
this._rotateGestureDetector.onTouchEvent(motionEvent);
}
};
return GesturesObserver;
}(common.GesturesObserver);
exports.GesturesObserver = GesturesObserver;
function _getArgs(type, view, e) {
return {
type: type,
view: view,
android: e,
ios: undefined,
object: view,
eventName: definition.toString(type)
};
}
function _getSwipeArgs(direction, view, initialEvent, currentEvent) {
return {
type: definition.GestureTypes.swipe,
view: view,
android: {
initial: initialEvent,
current: currentEvent
},
direction: direction,
ios: undefined,
object: view,
eventName: definition.toString(definition.GestureTypes.swipe)
};
}
function _getPanArgs(deltaX, deltaY, view, state, initialEvent, currentEvent) {
return {
type: definition.GestureTypes.pan,
view: view,
android: {
initial: initialEvent,
current: currentEvent
},
deltaX: deltaX,
deltaY: deltaY,
ios: undefined,
object: view,
eventName: definition.toString(definition.GestureTypes.pan),
state: state
};
}
function _executeCallback(observer, args) {
if (observer && observer.callback) {
observer.callback.call(observer._context, args);
}
}
var TapAndDoubleTapGestureListenerClass;
function ensureTapAndDoubleTapGestureListenerClass() {
if (TapAndDoubleTapGestureListenerClass) {
return;
}
var TapAndDoubleTapGestureListener = function(_super) {
__extends(TapAndDoubleTapGestureListener, _super);
function TapAndDoubleTapGestureListener(observer, target, type) {
_super.call(this);
this._observer = observer;
this._target = target;
this._type = type;
return global.__native(this);
}
TapAndDoubleTapGestureListener.prototype.onSingleTapUp = function(motionEvent) {
if (this._type & definition.GestureTypes.tap) {
var args = _getArgs(definition.GestureTypes.tap, this._target, motionEvent);
_executeCallback(this._observer, args);
}
return true;
};
TapAndDoubleTapGestureListener.prototype.onDoubleTap = function(motionEvent) {
if (this._type & definition.GestureTypes.doubleTap) {
var args = _getArgs(definition.GestureTypes.doubleTap, this._target, motionEvent);
_executeCallback(this._observer, args);
}
return true;
};
TapAndDoubleTapGestureListener.prototype.onDown = function(motionEvent) {
return true;
};
TapAndDoubleTapGestureListener.prototype.onLongPress = function(motionEvent) {
if (this._type & definition.GestureTypes.longPress) {
var args = _getArgs(definition.GestureTypes.longPress, this._target, motionEvent);
_executeCallback(this._observer, args);
}
};
return TapAndDoubleTapGestureListener;
}(android.view.GestureDetector.SimpleOnGestureListener);
TapAndDoubleTapGestureListenerClass = TapAndDoubleTapGestureListener;
}
var PinchGestureEventData = function() {
function PinchGestureEventData(view, android, scale, object, state) {
this.view = view;
this.android = android;
this.scale = scale;
this.object = object;
this.state = state;
this.type = definition.GestureTypes.pinch;
this.eventName = definition.toString(definition.GestureTypes.pinch);
}
PinchGestureEventData.prototype.getFocusX = function() {
return this.android.getFocusX() / utils.layout.getDisplayDensity();
};
PinchGestureEventData.prototype.getFocusY = function() {
return this.android.getFocusY() / utils.layout.getDisplayDensity();
};
return PinchGestureEventData;
}();
var PinchGestureListenerClass;
function ensurePinchGestureListenerClass() {
if (PinchGestureListenerClass) {
return;
}
var PinchGestureListener = function(_super) {
__extends(PinchGestureListener, _super);
function PinchGestureListener(observer, target) {
_super.call(this);
this._observer = observer;
this._target = target;
this._density = utils.layout.getDisplayDensity();
return global.__native(this);
}
PinchGestureListener.prototype.onScaleBegin = function(detector) {
this._scale = detector.getScaleFactor();
var args = new PinchGestureEventData(this._target, detector, this._scale, this._target, common.GestureStateTypes.began);
_executeCallback(this._observer, args);
return true;
};
PinchGestureListener.prototype.onScale = function(detector) {
this._scale *= detector.getScaleFactor();
var args = new PinchGestureEventData(this._target, detector, this._scale, this._target, common.GestureStateTypes.changed);
_executeCallback(this._observer, args);
return true;
};
PinchGestureListener.prototype.onScaleEnd = function(detector) {
this._scale *= detector.getScaleFactor();
var args = new PinchGestureEventData(this._target, detector, this._scale, this._target, common.GestureStateTypes.ended);
_executeCallback(this._observer, args);
};
return PinchGestureListener;
}(android.view.ScaleGestureDetector.SimpleOnScaleGestureListener);
PinchGestureListenerClass = PinchGestureListener;
}
var SwipeGestureListenerClass;
function ensureSwipeGestureListenerClass() {
if (SwipeGestureListenerClass) {
return;
}
var SwipeGestureListener = function(_super) {
__extends(SwipeGestureListener, _super);
function SwipeGestureListener(observer, target) {
_super.call(this);
this._observer = observer;
this._target = target;
return global.__native(this);
}
SwipeGestureListener.prototype.onDown = function(motionEvent) {
return true;
};
SwipeGestureListener.prototype.onFling = function(initialEvent, currentEvent, velocityX, velocityY) {
var result = false;
var args;
try {
var deltaY = currentEvent.getY() - initialEvent.getY();
var deltaX = currentEvent.getX() - initialEvent.getX();
if (Math.abs(deltaX) > Math.abs(deltaY)) {
if (Math.abs(deltaX) > SWIPE_THRESHOLD && Math.abs(velocityX) > SWIPE_VELOCITY_THRESHOLD) {
if (deltaX > 0) {
args = _getSwipeArgs(definition.SwipeDirection.right, this._target, initialEvent, currentEvent);
_executeCallback(this._observer, args);
result = true;
} else {
args = _getSwipeArgs(definition.SwipeDirection.left, this._target, initialEvent, currentEvent);
_executeCallback(this._observer, args);
result = true;
}
}
} else {
if (Math.abs(deltaY) > SWIPE_THRESHOLD && Math.abs(velocityY) > SWIPE_VELOCITY_THRESHOLD) {
if (deltaY > 0) {
args = _getSwipeArgs(definition.SwipeDirection.down, this._target, initialEvent, currentEvent);
_executeCallback(this._observer, args);
result = true;
} else {
args = _getSwipeArgs(definition.SwipeDirection.up, this._target, initialEvent, currentEvent);
_executeCallback(this._observer, args);
result = true;
}
}
}
} catch (ex) {}
return result;
};
return SwipeGestureListener;
}(android.view.GestureDetector.SimpleOnGestureListener);
SwipeGestureListenerClass = SwipeGestureListener;
}
var CustomPanGestureDetector = function() {
function CustomPanGestureDetector(observer, target) {
this.observer = observer;
this.target = target;
this.isTracking = false;
this.density = utils.layout.getDisplayDensity();
}
CustomPanGestureDetector.prototype.onTouchEvent = function(event) {
switch (event.getActionMasked()) {
case android.view.MotionEvent.ACTION_UP:
case android.view.MotionEvent.ACTION_CANCEL:
this.trackStop(event, false);
break;

case android.view.MotionEvent.ACTION_DOWN:
case android.view.MotionEvent.ACTION_POINTER_DOWN:
case android.view.MotionEvent.ACTION_POINTER_UP:
this.trackStop(event, true);
break;

case android.view.MotionEvent.ACTION_MOVE:
if (!this.isTracking) {
this.trackStart(event);
}
this.trackChange(event);
break;
}
return true;
};
CustomPanGestureDetector.prototype.trackStop = function(currentEvent, cahceEvent) {
if (this.isTracking) {
var args = _getPanArgs(this.deltaX, this.deltaY, this.target, common.GestureStateTypes.ended, null, currentEvent);
_executeCallback(this.observer, args);
this.deltaX = undefined;
this.deltaY = undefined;
this.isTracking = false;
}
if (cahceEvent) {
this.lastEventCache = currentEvent;
} else {
this.lastEventCache = undefined;
}
};
CustomPanGestureDetector.prototype.trackStart = function(currentEvent) {
var inital = this.getEventCoordinates(this.lastEventCache ? this.lastEventCache : currentEvent);
this.initialX = inital.x;
this.initialY = inital.y;
this.isTracking = true;
var args = _getPanArgs(0, 0, this.target, common.GestureStateTypes.began, null, currentEvent);
_executeCallback(this.observer, args);
};
CustomPanGestureDetector.prototype.trackChange = function(currentEvent) {
var current = this.getEventCoordinates(currentEvent);
this.deltaX = current.x - this.initialX;
this.deltaY = current.y - this.initialY;
var args = _getPanArgs(this.deltaX, this.deltaY, this.target, common.GestureStateTypes.changed, null, currentEvent);
_executeCallback(this.observer, args);
};
CustomPanGestureDetector.prototype.getEventCoordinates = function(event) {
var count = event.getPointerCount();
if (count === 1) {
return {
x: event.getRawX() / this.density,
y: event.getRawY() / this.density
};
} else {
var offX = event.getRawX() - event.getX();
var offY = event.getRawY() - event.getY();
var res = {
x: 0,
y: 0
};
for (var i = 0; i < count; i++) {
res.x += event.getX(i) + offX;
res.y += event.getY(i) + offY;
}
res.x /= count * this.density;
res.y /= count * this.density;
return res;
}
};
return CustomPanGestureDetector;
}();
var CustomRotateGestureDetector = function() {
function CustomRotateGestureDetector(observer, target) {
this.observer = observer;
this.target = target;
this.trackedPtrId1 = INVALID_POINTER_ID;
this.trackedPtrId2 = INVALID_POINTER_ID;
}
Object.defineProperty(CustomRotateGestureDetector.prototype, "isTracking", {
get: function() {
return this.trackedPtrId1 !== INVALID_POINTER_ID && this.trackedPtrId2 !== INVALID_POINTER_ID;
},
enumerable: true,
configurable: true
});
CustomRotateGestureDetector.prototype.onTouchEvent = function(event) {
var pointerID = event.getPointerId(event.getActionIndex());
var wasTracking = this.isTracking;
switch (event.getActionMasked()) {
case android.view.MotionEvent.ACTION_DOWN:
case android.view.MotionEvent.ACTION_POINTER_DOWN:
var assigned = false;
if (this.trackedPtrId1 === INVALID_POINTER_ID && pointerID !== this.trackedPtrId2) {
this.trackedPtrId1 = pointerID;
assigned = true;
} else if (this.trackedPtrId2 === INVALID_POINTER_ID && pointerID !== this.trackedPtrId1) {
this.trackedPtrId2 = pointerID;
assigned = true;
}
if (assigned && this.isTracking) {
this.angle = 0;
this.initalPointersAngle = this.getPointersAngle(event);
this.executeCallback(event, common.GestureStateTypes.began);
}
break;

case android.view.MotionEvent.ACTION_MOVE:
if (this.isTracking) {
this.updateAngle(event);
this.executeCallback(event, common.GestureStateTypes.changed);
}
break;

case android.view.MotionEvent.ACTION_UP:
case android.view.MotionEvent.ACTION_POINTER_UP:
if (pointerID === this.trackedPtrId1) {
this.trackedPtrId1 = INVALID_POINTER_ID;
} else if (pointerID === this.trackedPtrId2) {
this.trackedPtrId2 = INVALID_POINTER_ID;
}
if (wasTracking && !this.isTracking) {
this.executeCallback(event, common.GestureStateTypes.ended);
}
break;

case android.view.MotionEvent.ACTION_CANCEL:
this.trackedPtrId1 = INVALID_POINTER_ID;
this.trackedPtrId2 = INVALID_POINTER_ID;
if (wasTracking) {
this.executeCallback(event, common.GestureStateTypes.cancelled);
}
break;
}
return true;
};
CustomRotateGestureDetector.prototype.executeCallback = function(event, state) {
var args = {
type: definition.GestureTypes.rotation,
view: this.target,
android: event,
rotation: this.angle,
ios: undefined,
object: this.target,
eventName: definition.toString(definition.GestureTypes.rotation),
state: state
};
_executeCallback(this.observer, args);
};
CustomRotateGestureDetector.prototype.updateAngle = function(event) {
var newPointersAngle = this.getPointersAngle(event);
var result = (newPointersAngle - this.initalPointersAngle) * TO_DEGREES % 360;
if (result < -180) {
result += 360;
}
if (result > 180) {
result -= 360;
}
this.angle = result;
};
CustomRotateGestureDetector.prototype.getPointersAngle = function(event) {
var firstX = event.getX(event.findPointerIndex(this.trackedPtrId1));
var firstY = event.getY(event.findPointerIndex(this.trackedPtrId1));
var secondX = event.getX(event.findPointerIndex(this.trackedPtrId2));
var secondY = event.getY(event.findPointerIndex(this.trackedPtrId2));
return Math.atan2(secondY - firstY, secondX - firstX);
};
return CustomRotateGestureDetector;
}();
var Pointer = function() {
function Pointer(id, event) {
this.event = event;
this.ios = undefined;
this.android = id;
}
Pointer.prototype.getX = function() {
return this.event.getX(this.android) / utils.layout.getDisplayDensity();
};
Pointer.prototype.getY = function() {
return this.event.getY(this.android) / utils.layout.getDisplayDensity();
};
return Pointer;
}();
var TouchGestureEventData = function() {
function TouchGestureEventData() {
this.eventName = definition.toString(definition.GestureTypes.touch);
this.type = definition.GestureTypes.touch;
this.ios = undefined;
}
TouchGestureEventData.prototype.prepare = function(view, e) {
this.view = view;
this.object = view;
this.android = e;
this.action = this.getActionType(e);
this._activePointers = undefined;
this._allPointers = undefined;
};
TouchGestureEventData.prototype.getPointerCount = function() {
return this.android.getPointerCount();
};
TouchGestureEventData.prototype.getActivePointers = function() {
if (!this._activePointers) {
this._activePointers = [ new Pointer(this.android.getActionIndex(), this.android) ];
}
return this._activePointers;
};
TouchGestureEventData.prototype.getAllPointers = function() {
if (!this._allPointers) {
this._allPointers = [];
for (var i = 0; i < this.getPointerCount(); i++) {
this._allPointers.push(new Pointer(i, this.android));
}
}
return this._allPointers;
};
TouchGestureEventData.prototype.getX = function() {
return this.getActivePointers()[0].getX();
};
TouchGestureEventData.prototype.getY = function() {
return this.getActivePointers()[0].getY();
};
TouchGestureEventData.prototype.getActionType = function(e) {
switch (e.getActionMasked()) {
case android.view.MotionEvent.ACTION_DOWN:
case android.view.MotionEvent.ACTION_POINTER_DOWN:
return common.TouchAction.down;

case android.view.MotionEvent.ACTION_MOVE:
return common.TouchAction.move;

case android.view.MotionEvent.ACTION_UP:
case android.view.MotionEvent.ACTION_POINTER_UP:
return common.TouchAction.up;

case android.view.MotionEvent.ACTION_CANCEL:
return common.TouchAction.cancel;
}
return "";
};
return TouchGestureEventData;
}();
}, function(module, exports, __webpack_require__) {
var definition = __webpack_require__(53);
(function(GestureTypes) {
GestureTypes[GestureTypes["tap"] = 1] = "tap";
GestureTypes[GestureTypes["doubleTap"] = 2] = "doubleTap";
GestureTypes[GestureTypes["pinch"] = 4] = "pinch";
GestureTypes[GestureTypes["pan"] = 8] = "pan";
GestureTypes[GestureTypes["swipe"] = 16] = "swipe";
GestureTypes[GestureTypes["rotation"] = 32] = "rotation";
GestureTypes[GestureTypes["longPress"] = 64] = "longPress";
GestureTypes[GestureTypes["touch"] = 128] = "touch";
})(exports.GestureTypes || (exports.GestureTypes = {}));
var GestureTypes = exports.GestureTypes;
(function(GestureStateTypes) {
GestureStateTypes[GestureStateTypes["cancelled"] = 0] = "cancelled";
GestureStateTypes[GestureStateTypes["began"] = 1] = "began";
GestureStateTypes[GestureStateTypes["changed"] = 2] = "changed";
GestureStateTypes[GestureStateTypes["ended"] = 3] = "ended";
})(exports.GestureStateTypes || (exports.GestureStateTypes = {}));
var GestureStateTypes = exports.GestureStateTypes;
(function(SwipeDirection) {
SwipeDirection[SwipeDirection["right"] = 1] = "right";
SwipeDirection[SwipeDirection["left"] = 2] = "left";
SwipeDirection[SwipeDirection["up"] = 4] = "up";
SwipeDirection[SwipeDirection["down"] = 8] = "down";
})(exports.SwipeDirection || (exports.SwipeDirection = {}));
var SwipeDirection = exports.SwipeDirection;
var TouchAction;
(function(TouchAction) {
TouchAction.down = "down";
TouchAction.up = "up";
TouchAction.move = "move";
TouchAction.cancel = "cancel";
})(TouchAction = exports.TouchAction || (exports.TouchAction = {}));
function observe(target, type, callback, context) {
var observer = new definition.GesturesObserver(target, callback, context);
observer.observe(type);
return observer;
}
exports.observe = observe;
function toString(type, separator) {
var types = new Array();
if (type & definition.GestureTypes.tap) {
types.push("tap");
}
if (type & definition.GestureTypes.doubleTap) {
types.push("doubleTap");
}
if (type & definition.GestureTypes.pinch) {
types.push("pinch");
}
if (type & definition.GestureTypes.pan) {
types.push("pan");
}
if (type & definition.GestureTypes.swipe) {
types.push("swipe");
}
if (type & definition.GestureTypes.rotation) {
types.push("rotation");
}
if (type & definition.GestureTypes.longPress) {
types.push("longPress");
}
if (type & definition.GestureTypes.touch) {
types.push("touch");
}
return types.join(separator);
}
exports.toString = toString;
function fromString(type) {
var t = type.trim().toLowerCase();
if (t === "tap") {
return definition.GestureTypes.tap;
} else if (t === "doubletap") {
return definition.GestureTypes.doubleTap;
} else if (t === "pinch") {
return definition.GestureTypes.pinch;
} else if (t === "pan") {
return definition.GestureTypes.pan;
} else if (t === "swipe") {
return definition.GestureTypes.swipe;
} else if (t === "rotation") {
return definition.GestureTypes.rotation;
} else if (t === "longpress") {
return definition.GestureTypes.longPress;
} else if (t === "touch") {
return definition.GestureTypes.touch;
}
return undefined;
}
exports.fromString = fromString;
var GesturesObserver = function() {
function GesturesObserver(target, callback, context) {
this._target = target;
this._callback = callback;
this._context = context;
}
Object.defineProperty(GesturesObserver.prototype, "callback", {
get: function() {
return this._callback;
},
enumerable: true,
configurable: true
});
Object.defineProperty(GesturesObserver.prototype, "target", {
get: function() {
return this._target;
},
enumerable: true,
configurable: true
});
Object.defineProperty(GesturesObserver.prototype, "context", {
get: function() {
return this._context;
},
enumerable: true,
configurable: true
});
GesturesObserver.prototype.androidOnTouchEvent = function(motionEvent) {};
GesturesObserver.prototype.observe = function(type) {};
GesturesObserver.prototype.disconnect = function() {
if (this.target) {
var list = this.target.getGestureObservers(this.type);
if (list && list.length > 0) {
for (var i = 0; i < list.length; i++) {
if (list[i].callback === this.callback) {
break;
}
}
list.length = 0;
this.target._gestureObservers[this.type] = undefined;
delete this.target._gestureObservers[this.type];
}
}
this._target = null;
this._callback = null;
this._context = null;
};
return GesturesObserver;
}();
exports.GesturesObserver = GesturesObserver;
}, function(module, exports, __webpack_require__) {
var types = __webpack_require__(14);
var common = __webpack_require__(56);
global.moduleMerge(common, exports);
var utils;
function ensureUtils() {
if (!utils) {
utils = __webpack_require__(27);
}
}
var fs;
function ensureFS() {
if (!fs) {
fs = __webpack_require__(32);
}
}
var enums;
function ensureEnums() {
if (!enums) {
enums = __webpack_require__(24);
}
}
var ImageSource = function() {
function ImageSource() {}
ImageSource.prototype.fromAsset = function(asset) {
var _this = this;
return new Promise(function(resolve, reject) {
asset.getImageAsync(function(image, err) {
if (image) {
_this.setRotationAngleFromFile(asset.android);
_this.setNativeSource(image);
resolve(_this);
} else {
reject(err);
}
});
});
};
ImageSource.prototype.loadFromResource = function(name) {
this.android = null;
ensureUtils();
var res = utils.ad.getApplicationContext().getResources();
if (res) {
var identifier = res.getIdentifier(name, "drawable", utils.ad.getApplication().getPackageName());
if (0 < identifier) {
var bitmapDrawable = res.getDrawable(identifier);
if (bitmapDrawable && bitmapDrawable.getBitmap) {
this.android = bitmapDrawable.getBitmap();
}
}
}
return this.android != null;
};
ImageSource.prototype.fromResource = function(name) {
var _this = this;
return new Promise(function(resolve, reject) {
resolve(_this.loadFromResource(name));
});
};
ImageSource.prototype.setRotationAngleFromFile = function(filename) {
this.rotationAngle = 0;
var ei = new android.media.ExifInterface(filename);
var orientation = ei.getAttributeInt(android.media.ExifInterface.TAG_ORIENTATION, android.media.ExifInterface.ORIENTATION_NORMAL);
switch (orientation) {
case android.media.ExifInterface.ORIENTATION_ROTATE_90:
this.rotationAngle = 90;
break;

case android.media.ExifInterface.ORIENTATION_ROTATE_180:
this.rotationAngle = 180;
break;

case android.media.ExifInterface.ORIENTATION_ROTATE_270:
this.rotationAngle = 270;
break;
}
};
ImageSource.prototype.loadFromFile = function(path) {
ensureFS();
var fileName = types.isString(path) ? path.trim() : "";
if (fileName.indexOf("~/") === 0) {
fileName = fs.path.join(fs.knownFolders.currentApp().path, fileName.replace("~/", ""));
}
this.setRotationAngleFromFile(fileName);
this.android = android.graphics.BitmapFactory.decodeFile(fileName, null);
return this.android != null;
};
ImageSource.prototype.fromFile = function(path) {
var _this = this;
return new Promise(function(resolve, reject) {
resolve(_this.loadFromFile(path));
});
};
ImageSource.prototype.loadFromData = function(data) {
this.android = android.graphics.BitmapFactory.decodeStream(data);
return this.android != null;
};
ImageSource.prototype.fromData = function(data) {
var _this = this;
return new Promise(function(resolve, reject) {
resolve(_this.loadFromData(data));
});
};
ImageSource.prototype.loadFromBase64 = function(source) {
if (types.isString(source)) {
var bytes = android.util.Base64.decode(source, android.util.Base64.DEFAULT);
this.android = android.graphics.BitmapFactory.decodeByteArray(bytes, 0, bytes.length);
}
return this.android != null;
};
ImageSource.prototype.fromBase64 = function(data) {
var _this = this;
return new Promise(function(resolve, reject) {
resolve(_this.loadFromBase64(data));
});
};
ImageSource.prototype.setNativeSource = function(source) {
this.android = source;
return source != null;
};
ImageSource.prototype.saveToFile = function(path, format, quality) {
if (quality === void 0) {
quality = 100;
}
if (!this.android) {
return false;
}
var targetFormat = getTargetFormat(format);
var outputStream = new java.io.BufferedOutputStream(new java.io.FileOutputStream(path));
var res = this.android.compress(targetFormat, quality, outputStream);
outputStream.close();
return res;
};
ImageSource.prototype.toBase64String = function(format, quality) {
if (quality === void 0) {
quality = 100;
}
if (!this.android) {
return null;
}
var targetFormat = getTargetFormat(format);
var outputStream = new java.io.ByteArrayOutputStream();
var base64Stream = new android.util.Base64OutputStream(outputStream, android.util.Base64.NO_WRAP);
this.android.compress(targetFormat, quality, base64Stream);
base64Stream.close();
outputStream.close();
return outputStream.toString();
};
Object.defineProperty(ImageSource.prototype, "height", {
get: function() {
if (this.android) {
return this.android.getHeight();
}
return NaN;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ImageSource.prototype, "width", {
get: function() {
if (this.android) {
return this.android.getWidth();
}
return NaN;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ImageSource.prototype, "rotationAngle", {
get: function() {
return this._rotationAngle;
},
set: function(value) {
this._rotationAngle = value;
},
enumerable: true,
configurable: true
});
return ImageSource;
}();
exports.ImageSource = ImageSource;
function getTargetFormat(format) {
ensureEnums();
switch (format) {
case enums.ImageFormat.jpeg || enums.ImageFormat.jpg:
return android.graphics.Bitmap.CompressFormat.JPEG;

default:
return android.graphics.Bitmap.CompressFormat.PNG;
}
}
}, function(module, exports, __webpack_require__) {
var utils = __webpack_require__(27);
var http;
function ensureHttp() {
if (!http) {
http = __webpack_require__(57);
}
}
var definition = __webpack_require__(55);
function fromAsset(asset) {
var image = new definition.ImageSource();
return image.fromAsset(asset);
}
exports.fromAsset = fromAsset;
function fromResource(name) {
var image = new definition.ImageSource();
return image.loadFromResource(name) ? image : null;
}
exports.fromResource = fromResource;
function fromFile(path) {
var image = new definition.ImageSource();
return image.loadFromFile(path) ? image : null;
}
exports.fromFile = fromFile;
function fromData(data) {
var image = new definition.ImageSource();
return image.loadFromData(data) ? image : null;
}
exports.fromData = fromData;
function fromBase64(source) {
var image = new definition.ImageSource();
return image.loadFromBase64(source) ? image : null;
}
exports.fromBase64 = fromBase64;
function fromNativeSource(source) {
var image = new definition.ImageSource();
return image.setNativeSource(source) ? image : null;
}
exports.fromNativeSource = fromNativeSource;
function fromUrl(url) {
ensureHttp();
return http.getImage(url);
}
exports.fromUrl = fromUrl;
function fromFileOrResource(path) {
if (!isFileOrResourcePath(path)) {
throw new Error('Path "' + '" is not a valid file or resource.');
}
if (path.indexOf(utils.RESOURCE_PREFIX) === 0) {
return fromResource(path.substr(utils.RESOURCE_PREFIX.length));
}
return fromFile(path);
}
exports.fromFileOrResource = fromFileOrResource;
function isFileOrResourcePath(path) {
return utils.isFileOrResourcePath(path);
}
exports.isFileOrResourcePath = isFileOrResourcePath;
}, function(module, exports, __webpack_require__) {
var httpRequest = __webpack_require__(58);
global.moduleMerge(httpRequest, exports);
function getString(arg) {
return new Promise(function(resolve, reject) {
httpRequest.request(typeof arg === "string" ? {
url: arg,
method: "GET"
} : arg).then(function(r) {
try {
var str = r.content.toString();
resolve(str);
} catch (e) {
reject(e);
}
}, function(e) {
return reject(e);
});
});
}
exports.getString = getString;
function getJSON(arg) {
return new Promise(function(resolve, reject) {
httpRequest.request(typeof arg === "string" ? {
url: arg,
method: "GET"
} : arg).then(function(r) {
try {
var json = r.content.toJSON();
resolve(json);
} catch (e) {
reject(e);
}
}, function(e) {
return reject(e);
});
});
}
exports.getJSON = getJSON;
function getImage(arg) {
return httpRequest.request(typeof arg === "string" ? {
url: arg,
method: "GET"
} : arg).then(function(responce) {
return responce.content.toImage();
});
}
exports.getImage = getImage;
function getFile(arg, destinationFilePath) {
return new Promise(function(resolve, reject) {
httpRequest.request(typeof arg === "string" ? {
url: arg,
method: "GET"
} : arg).then(function(r) {
try {
var file = r.content.toFile(destinationFilePath);
resolve(file);
} catch (e) {
reject(e);
}
}, function(e) {
return reject(e);
});
});
}
exports.getFile = getFile;
function addHeader(headers, key, value) {
if (!headers[key]) {
headers[key] = value;
} else if (Array.isArray(headers[key])) {
headers[key].push(value);
} else {
var values = [ headers[key] ];
values.push(value);
headers[key] = values;
}
}
exports.addHeader = addHeader;
}, function(module, exports, __webpack_require__) {
var types = __webpack_require__(14);
var http = __webpack_require__(57);
var requestIdCounter = 0;
var pendingRequests = {};
var utils;
function ensureUtils() {
if (!utils) {
utils = __webpack_require__(27);
}
}
var imageSource;
function ensureImageSource() {
if (!imageSource) {
imageSource = __webpack_require__(55);
}
}
var platform;
function ensurePlatform() {
if (!platform) {
platform = __webpack_require__(35);
}
}
var completeCallback;
function ensureCompleteCallback() {
if (completeCallback) {
return;
}
completeCallback = new org.nativescript.widgets.Async.CompleteCallback({
onComplete: function(result, context) {
onRequestComplete(context, result);
}
});
}
function onRequestComplete(requestId, result) {
var callbacks = pendingRequests[requestId];
delete pendingRequests[requestId];
if (result.error) {
callbacks.rejectCallback(new Error(result.error.toString()));
return;
}
var headers = {};
if (result.headers) {
var jHeaders = result.headers;
var length = jHeaders.size();
var i;
var pair;
for (i = 0; i < length; i++) {
pair = jHeaders.get(i);
http.addHeader(headers, pair.key, pair.value);
}
}
callbacks.resolveCallback({
content: {
raw: result.raw,
toString: function(encoding) {
var str;
if (encoding) {
str = decodeResponse(result.raw, encoding);
} else {
str = result.responseAsString;
}
if (types.isString(str)) {
return str;
} else {
throw new Error("Response content may not be converted to string");
}
},
toJSON: function(encoding) {
ensureUtils();
var str;
if (encoding) {
str = decodeResponse(result.raw, encoding);
} else {
str = result.responseAsString;
}
return utils.parseJSON(str);
},
toImage: function() {
ensureImageSource();
return new Promise(function(resolveImage, rejectImage) {
if (result.responseAsImage != null) {
resolveImage(imageSource.fromNativeSource(result.responseAsImage));
} else {
rejectImage(new Error("Response content may not be converted to an Image"));
}
});
},
toFile: function(destinationFilePath) {
var fs = __webpack_require__(32);
var fileName = callbacks.url;
if (!destinationFilePath) {
destinationFilePath = fs.path.join(fs.knownFolders.documents().path, fileName.substring(fileName.lastIndexOf("/") + 1));
}
var stream;
try {
var javaFile = new java.io.File(destinationFilePath);
stream = new java.io.FileOutputStream(javaFile);
stream.write(result.raw.toByteArray());
return fs.File.fromPath(destinationFilePath);
} catch (exception) {
throw new Error("Cannot save file with path: " + destinationFilePath + ".");
} finally {
if (stream) {
stream.close();
}
}
}
},
statusCode: result.statusCode,
headers: headers
});
}
function buildJavaOptions(options) {
if (!types.isString(options.url)) {
throw new Error("Http request must provide a valid url.");
}
var javaOptions = new org.nativescript.widgets.Async.Http.RequestOptions();
javaOptions.url = options.url;
if (types.isString(options.method)) {
javaOptions.method = options.method;
}
if (types.isString(options.content) || options.content instanceof FormData) {
javaOptions.content = options.content.toString();
}
if (types.isNumber(options.timeout)) {
javaOptions.timeout = options.timeout;
}
if (types.isBoolean(options.dontFollowRedirects)) {
javaOptions.dontFollowRedirects = options.dontFollowRedirects;
}
if (options.headers) {
var arrayList = new java.util.ArrayList();
var pair = org.nativescript.widgets.Async.Http.KeyValuePair;
for (var key in options.headers) {
arrayList.add(new pair(key, options.headers[key] + ""));
}
javaOptions.headers = arrayList;
}
ensurePlatform();
var screen = platform.screen.mainScreen;
javaOptions.screenWidth = screen.widthPixels;
javaOptions.screenHeight = screen.heightPixels;
return javaOptions;
}
function request(options) {
if (!types.isDefined(options)) {
return;
}
return new Promise(function(resolve, reject) {
try {
var javaOptions = buildJavaOptions(options);
var callbacks = {
url: options.url,
resolveCallback: resolve,
rejectCallback: reject
};
pendingRequests[requestIdCounter] = callbacks;
ensureCompleteCallback();
org.nativescript.widgets.Async.Http.MakeRequest(javaOptions, completeCallback, new java.lang.Integer(requestIdCounter));
requestIdCounter++;
} catch (ex) {
reject(ex);
}
});
}
exports.request = request;
function decodeResponse(raw, encoding) {
var charsetName = "UTF-8";
if (encoding === 1) {
charsetName = "GBK";
}
return raw.toString(charsetName);
}
}, function(module, exports, __webpack_require__) {
var styleModule = __webpack_require__(15);
var stylePropertyModule = __webpack_require__(22);
var convertersModule = __webpack_require__(23);
exports.Property = stylePropertyModule.Property;
exports.Style = styleModule.Style;
var properties;
(function(properties) {
properties.fontSizeProperty = styleModule.fontSizeProperty;
properties.colorProperty = styleModule.colorProperty;
properties.placeholderColorProperty = styleModule.placeholderColorProperty;
properties.backgroundColorProperty = styleModule.backgroundColorProperty;
properties.textAlignmentProperty = styleModule.textAlignmentProperty;
properties.getPropertyByName = stylePropertyModule.getPropertyByName;
properties.getPropertyByCssName = stylePropertyModule.getPropertyByCssName;
properties.eachProperty = stylePropertyModule.eachProperty;
properties.eachInheritableProperty = stylePropertyModule.eachInheritableProperty;
})(properties = exports.properties || (exports.properties = {}));
var converters;
(function(converters) {
converters.colorConverter = convertersModule.colorConverter;
converters.fontSizeConverter = convertersModule.fontSizeConverter;
converters.textAlignConverter = convertersModule.textAlignConverter;
converters.numberConverter = convertersModule.numberConverter;
converters.visibilityConverter = convertersModule.visibilityConverter;
})(converters = exports.converters || (exports.converters = {}));
}, function(module, exports, __webpack_require__) {
var trace = __webpack_require__(16);
var cssSelector = __webpack_require__(61);
var cssParser = __webpack_require__(63);
var application = __webpack_require__(3);
var keyframeAnimation = __webpack_require__(65);
var cssAnimationParser = __webpack_require__(66);
var observable = __webpack_require__(17);
var utils_1 = __webpack_require__(27);
var css_selector_1 = __webpack_require__(61);
var style_property_1 = __webpack_require__(22);
var special_properties_1 = __webpack_require__(48);
var animationsSymbol = Symbol("animations");
var types;
function ensureTypes() {
if (!types) {
types = __webpack_require__(14);
}
}
var fs;
function ensureFS() {
if (!fs) {
fs = __webpack_require__(32);
}
}
var pattern = /('|")(.*?)\1/;
var CssState = function() {
function CssState(view, match) {
this.view = view;
this.match = match;
}
Object.defineProperty(CssState.prototype, "changeMap", {
get: function() {
return this.match.changeMap;
},
enumerable: true,
configurable: true
});
CssState.prototype.apply = function() {
var _this = this;
this.view.style._resetCssValues();
var matchingSelectors = this.match.selectors.filter(function(sel) {
return sel.dynamic ? sel.match(_this.view) : true;
});
matchingSelectors.forEach(function(s) {
return applyDescriptors(_this.view, s.ruleset);
});
};
return CssState;
}();
exports.CssState = CssState;
var StyleScope = function() {
function StyleScope() {
this._statesByKey = {};
this._viewIdToKey = {};
this._localCssSelectors = [];
this._localCssSelectorVersion = 0;
this._localCssSelectorsAppliedVersion = 0;
this._applicationCssSelectorsAppliedVersion = 0;
this._keyframes = {};
}
Object.defineProperty(StyleScope.prototype, "css", {
get: function() {
return this._css;
},
set: function(value) {
this._cssFileName = undefined;
this.setCss(value);
},
enumerable: true,
configurable: true
});
StyleScope.prototype.addCss = function(cssString, cssFileName) {
this.setCss(cssString, cssFileName, true);
};
StyleScope.prototype.setCss = function(cssString, cssFileName, append) {
if (append === void 0) {
append = false;
}
this._css = this._css && append ? this._css + cssString : cssString;
if (cssFileName) {
this._cssFileName = cssFileName;
}
this._reset();
var parsedSelectors = StyleScope.createSelectorsFromCss(this._css, cssFileName, this._keyframes);
if (append) {
this._localCssSelectors.push.apply(this._localCssSelectors, parsedSelectors);
} else {
this._localCssSelectors = parsedSelectors;
}
this._localCssSelectorVersion++;
this.ensureSelectors();
};
StyleScope.prototype.getKeyframeAnimationWithName = function(animationName) {
var keyframes = this._keyframes[animationName];
if (keyframes !== undefined) {
var animation = new keyframeAnimation.KeyframeAnimationInfo();
animation.keyframes = cssAnimationParser.CssAnimationParser.keyframesArrayFromCSS(keyframes);
return animation;
}
return undefined;
};
StyleScope.createSelectorsFromCss = function(css, cssFileName, keyframes) {
try {
var pageCssSyntaxTree = css ? cssParser.parse(css, {
source: cssFileName
}) : null;
var pageCssSelectors = [];
if (pageCssSyntaxTree) {
pageCssSelectors = pageCssSelectors.concat(StyleScope.createSelectorsFromImports(pageCssSyntaxTree, keyframes));
pageCssSelectors = pageCssSelectors.concat(StyleScope.createSelectorsFromSyntaxTree(pageCssSyntaxTree, keyframes));
}
return pageCssSelectors;
} catch (e) {
trace.write("Css styling failed: " + e, trace.categories.Error, trace.messageType.error);
}
};
StyleScope.createSelectorsFromImports = function(tree, keyframes) {
var selectors = [];
ensureTypes();
if (!types.isNullOrUndefined(tree)) {
var imports = tree["stylesheet"]["rules"].filter(function(r) {
return r.type === "import";
});
for (var i = 0; i < imports.length; i++) {
var importItem = imports[i]["import"];
var match = importItem && importItem.match(pattern);
var url = match && match[2];
if (!types.isNullOrUndefined(url)) {
ensureFS();
var appDirectory = fs.knownFolders.currentApp().path;
var fileName = resolveFileNameFromUrl(url, appDirectory, fs.File.exists);
if (fileName !== null) {
var file = fs.File.fromPath(fileName);
var text = file.readTextSync();
if (text) {
selectors = selectors.concat(StyleScope.createSelectorsFromCss(text, fileName, keyframes));
}
}
}
}
}
return selectors;
};
StyleScope.prototype.ensureSelectors = function() {
var toMerge = [];
if (this._applicationCssSelectorsAppliedVersion !== application.cssSelectorVersion || this._localCssSelectorVersion !== this._localCssSelectorsAppliedVersion || !this._mergedCssSelectors) {
toMerge.push(application.cssSelectors);
this._applicationCssSelectorsAppliedVersion = application.cssSelectorVersion;
toMerge.push(this._localCssSelectors);
this._localCssSelectorsAppliedVersion = this._localCssSelectorVersion;
for (var keyframe in application.keyframes) {
this._keyframes[keyframe] = application.keyframes[keyframe];
}
}
if (toMerge.length > 0) {
this._mergedCssSelectors = toMerge.filter(function(m) {
return !!m;
}).reduce(function(merged, next) {
return merged.concat(next);
}, []);
this._applyKeyframesOnSelectors();
} else {
return false;
}
this._selectors = new css_selector_1.SelectorsMap(this._mergedCssSelectors);
return true;
};
StyleScope.prototype.applySelectors = function(view) {
this.ensureSelectors();
var state = this._selectors.query(view);
var nextState = new CssState(view, state);
view._setCssState(nextState);
};
StyleScope.prototype.query = function(node) {
this.ensureSelectors();
return this._selectors.query(node).selectors;
};
StyleScope.createSelectorsFromSyntaxTree = function(ast, keyframes) {
var nodes = ast.stylesheet.rules;
nodes.filter(isKeyframe).forEach(function(node) {
return keyframes[node.name] = node;
});
var rulesets = cssSelector.fromAstNodes(nodes);
rulesets.forEach(function(rule) {
return rule[animationsSymbol] = cssAnimationParser.CssAnimationParser.keyframeAnimationsFromCSSDeclarations(rule.declarations);
});
return rulesets;
};
StyleScope.prototype._reset = function() {
this._statesByKey = {};
this._viewIdToKey = {};
};
StyleScope.prototype._applyKeyframesOnSelectors = function() {
for (var i = this._mergedCssSelectors.length - 1; i >= 0; i--) {
var ruleset = this._mergedCssSelectors[i];
var animations = ruleset[animationsSymbol];
if (animations !== undefined) {
for (var _i = 0, animations_1 = animations; _i < animations_1.length; _i++) {
var animation = animations_1[_i];
var keyframe = this._keyframes[animation.name];
if (keyframe !== undefined) {
animation.keyframes = cssAnimationParser.CssAnimationParser.keyframesArrayFromCSS(keyframe);
}
}
}
}
};
StyleScope.prototype.getAnimations = function(ruleset) {
return ruleset[animationsSymbol];
};
return StyleScope;
}();
exports.StyleScope = StyleScope;
function resolveFileNameFromUrl(url, appDirectory, fileExists) {
var fileName = types.isString(url) ? url.trim() : "";
if (fileName.indexOf("~/") === 0) {
fileName = fileName.replace("~/", "");
}
var local = fs.path.join(appDirectory, fileName);
if (fileExists(local)) {
return local;
}
var external = fs.path.join(appDirectory, "tns_modules", fileName);
if (fileExists(external)) {
return external;
}
return null;
}
exports.resolveFileNameFromUrl = resolveFileNameFromUrl;
function applyInlineSyle(view, style) {
try {
var syntaxTree = cssParser.parse("local { " + style + " }", undefined);
var filteredDeclarations = syntaxTree.stylesheet.rules.filter(isRule)[0].declarations.filter(isDeclaration);
applyInlineStyle(view, filteredDeclarations);
} catch (ex) {
trace.write("Applying local style failed: " + ex, trace.categories.Error, trace.messageType.error);
}
}
exports.applyInlineSyle = applyInlineSyle;
function isRule(node) {
return node.type === "rule";
}
function isDeclaration(node) {
return node.type === "declaration";
}
function isKeyframe(node) {
return node.type === "keyframes";
}
function applyDescriptors(view, ruleset) {
var modifier = observable.ValueSource.Css;
ruleset.declarations.forEach(function(d) {
return style_property_1.withStyleProperty(d.property, d.value, function(property, value) {
if (types.isString(property)) {
var propertyName = property;
var attrHandled = false;
var specialSetter = special_properties_1.getSpecialPropertySetter(propertyName);
if (!attrHandled && specialSetter) {
specialSetter(view, value);
attrHandled = true;
}
if (!attrHandled && propertyName in view) {
view[propertyName] = utils_1.convertString(value);
}
} else {
var resolvedProperty = property;
try {
view.style._setValue(resolvedProperty, value, modifier);
} catch (ex) {
if (trace.enabled) {
trace.write("Error setting property: " + resolvedProperty.name + " view: " + view + " value: " + value + " " + ex, trace.categories.Style, trace.messageType.error);
}
}
}
});
});
var ruleAnimations = ruleset[animationsSymbol];
if (ruleAnimations && view.isLoaded && view._nativeView !== undefined) {
var _loop_1 = function(animationInfo) {
var animation = keyframeAnimation.KeyframeAnimation.keyframeAnimationFromInfo(animationInfo, modifier);
if (animation) {
view._registerAnimation(animation);
animation.play(view).then(function() {
view._unregisterAnimation(animation);
}).catch(function(e) {
view._unregisterAnimation(animation);
});
}
};
for (var _i = 0, ruleAnimations_1 = ruleAnimations; _i < ruleAnimations_1.length; _i++) {
var animationInfo = ruleAnimations_1[_i];
_loop_1(animationInfo);
}
}
}
function applyInlineStyle(view, declarations) {
declarations.forEach(function(d) {
return style_property_1.withStyleProperty(d.property, d.value, function(property, value) {
var resolvedProperty = property;
view.style._setValue(resolvedProperty, value, observable.ValueSource.Local);
});
});
}
}, function(module, exports, __webpack_require__) {
var types_1 = __webpack_require__(14);
var utils_1 = __webpack_require__(27);
var selectorParser = __webpack_require__(62);
var Match;
(function(Match) {
Match.Dynamic = true;
Match.Static = false;
})(Match || (Match = {}));
function SelectorProperties(specificity, rarity, dynamic) {
if (dynamic === void 0) {
dynamic = false;
}
return function(cls) {
cls.prototype.specificity = specificity;
cls.prototype.rarity = rarity;
cls.prototype.combinator = "";
cls.prototype.dynamic = dynamic;
return cls;
};
}
var SelectorCore = function() {
function SelectorCore() {}
SelectorCore.prototype.lookupSort = function(sorter, base) {
sorter.sortAsUniversal(base || this);
};
SelectorCore = __decorate([ SelectorProperties(0, 0, Match.Static) ], SelectorCore);
return SelectorCore;
}();
exports.SelectorCore = SelectorCore;
var SimpleSelector = function(_super) {
__extends(SimpleSelector, _super);
function SimpleSelector() {
_super.apply(this, arguments);
}
SimpleSelector.prototype.accumulateChanges = function(node, map) {
if (!this.dynamic) {
return this.match(node);
} else if (this.mayMatch(node)) {
this.trackChanges(node, map);
return true;
}
return false;
};
SimpleSelector.prototype.mayMatch = function(node) {
return this.match(node);
};
SimpleSelector.prototype.trackChanges = function(node, map) {};
return SimpleSelector;
}(SelectorCore);
exports.SimpleSelector = SimpleSelector;
function wrap(text) {
return text ? " " + text + " " : "";
}
var InvalidSelector = function(_super) {
__extends(InvalidSelector, _super);
function InvalidSelector(e) {
_super.call(this);
this.e = e;
}
InvalidSelector.prototype.toString = function() {
return "<error: " + this.e + ">";
};
InvalidSelector.prototype.match = function(node) {
return false;
};
InvalidSelector.prototype.lookupSort = function(sorter, base) {};
InvalidSelector = __decorate([ SelectorProperties(0, 4, Match.Static) ], InvalidSelector);
return InvalidSelector;
}(SimpleSelector);
exports.InvalidSelector = InvalidSelector;
var UniversalSelector = function(_super) {
__extends(UniversalSelector, _super);
function UniversalSelector() {
_super.apply(this, arguments);
}
UniversalSelector.prototype.toString = function() {
return "*" + wrap(this.combinator);
};
UniversalSelector.prototype.match = function(node) {
return true;
};
UniversalSelector = __decorate([ SelectorProperties(0, 0, Match.Static) ], UniversalSelector);
return UniversalSelector;
}(SimpleSelector);
exports.UniversalSelector = UniversalSelector;
var IdSelector = function(_super) {
__extends(IdSelector, _super);
function IdSelector(id) {
_super.call(this);
this.id = id;
}
IdSelector.prototype.toString = function() {
return "#" + this.id + wrap(this.combinator);
};
IdSelector.prototype.match = function(node) {
return node.id === this.id;
};
IdSelector.prototype.lookupSort = function(sorter, base) {
sorter.sortById(this.id, base || this);
};
IdSelector = __decorate([ SelectorProperties(65536, 3, Match.Static) ], IdSelector);
return IdSelector;
}(SimpleSelector);
exports.IdSelector = IdSelector;
var TypeSelector = function(_super) {
__extends(TypeSelector, _super);
function TypeSelector(cssType) {
_super.call(this);
this.cssType = cssType;
}
TypeSelector.prototype.toString = function() {
return "" + this.cssType + wrap(this.combinator);
};
TypeSelector.prototype.match = function(node) {
return node.cssType === this.cssType;
};
TypeSelector.prototype.lookupSort = function(sorter, base) {
sorter.sortByType(this.cssType, base || this);
};
TypeSelector = __decorate([ SelectorProperties(1, 1, Match.Static) ], TypeSelector);
return TypeSelector;
}(SimpleSelector);
exports.TypeSelector = TypeSelector;
var ClassSelector = function(_super) {
__extends(ClassSelector, _super);
function ClassSelector(cssClass) {
_super.call(this);
this.cssClass = cssClass;
}
ClassSelector.prototype.toString = function() {
return "." + this.cssClass + wrap(this.combinator);
};
ClassSelector.prototype.match = function(node) {
return node.cssClasses && node.cssClasses.has(this.cssClass);
};
ClassSelector.prototype.lookupSort = function(sorter, base) {
sorter.sortByClass(this.cssClass, base || this);
};
ClassSelector = __decorate([ SelectorProperties(256, 2, Match.Static) ], ClassSelector);
return ClassSelector;
}(SimpleSelector);
exports.ClassSelector = ClassSelector;
var AttributeSelector = function(_super) {
__extends(AttributeSelector, _super);
function AttributeSelector(attribute, test, value) {
_super.call(this);
this.attribute = attribute;
this.test = test;
this.value = value;
if (!test) {
this.match = function(node) {
return !types_1.isNullOrUndefined(node[attribute]);
};
return;
}
if (!value) {
this.match = function(node) {
return false;
};
}
var escapedValue = utils_1.escapeRegexSymbols(value);
var regexp = null;
switch (test) {
case "^=":
regexp = new RegExp("^" + escapedValue);
break;

case "$=":
regexp = new RegExp(escapedValue + "$");
break;

case "*=":
regexp = new RegExp(escapedValue);
break;

case "=":
regexp = new RegExp("^" + escapedValue + "$");
break;

case "~=":
if (/\s/.test(value)) {
this.match = function(node) {
return false;
};
return;
}
regexp = new RegExp("(^|\\s)" + escapedValue + "(\\s|$)");
break;

case "|=":
regexp = new RegExp("^" + escapedValue + "(-|$)");
break;
}
if (regexp) {
this.match = function(node) {
return regexp.test(node[attribute] + "");
};
return;
} else {
this.match = function(node) {
return false;
};
return;
}
}
AttributeSelector.prototype.toString = function() {
return "[" + this.attribute + wrap(this.test) + (this.test && this.value || "") + "]" + wrap(this.combinator);
};
AttributeSelector.prototype.match = function(node) {
return false;
};
AttributeSelector.prototype.mayMatch = function(node) {
return true;
};
AttributeSelector.prototype.trackChanges = function(node, map) {
map.addAttribute(node, this.attribute);
};
AttributeSelector = __decorate([ SelectorProperties(256, 0, Match.Dynamic) ], AttributeSelector);
return AttributeSelector;
}(SimpleSelector);
exports.AttributeSelector = AttributeSelector;
var PseudoClassSelector = function(_super) {
__extends(PseudoClassSelector, _super);
function PseudoClassSelector(cssPseudoClass) {
_super.call(this);
this.cssPseudoClass = cssPseudoClass;
}
PseudoClassSelector.prototype.toString = function() {
return ":" + this.cssPseudoClass + wrap(this.combinator);
};
PseudoClassSelector.prototype.match = function(node) {
return node.cssPseudoClasses && node.cssPseudoClasses.has(this.cssPseudoClass);
};
PseudoClassSelector.prototype.mayMatch = function(node) {
return true;
};
PseudoClassSelector.prototype.trackChanges = function(node, map) {
map.addPseudoClass(node, this.cssPseudoClass);
};
PseudoClassSelector = __decorate([ SelectorProperties(256, 0, Match.Dynamic) ], PseudoClassSelector);
return PseudoClassSelector;
}(SimpleSelector);
exports.PseudoClassSelector = PseudoClassSelector;
var SimpleSelectorSequence = function(_super) {
__extends(SimpleSelectorSequence, _super);
function SimpleSelectorSequence(selectors) {
_super.call(this);
this.selectors = selectors;
this.specificity = selectors.reduce(function(sum, sel) {
return sel.specificity + sum;
}, 0);
this.head = this.selectors.reduce(function(prev, curr) {
return !prev || curr.rarity > prev.rarity ? curr : prev;
}, null);
this.dynamic = selectors.some(function(sel) {
return sel.dynamic;
});
}
SimpleSelectorSequence.prototype.toString = function() {
return "" + this.selectors.join("") + wrap(this.combinator);
};
SimpleSelectorSequence.prototype.match = function(node) {
return this.selectors.every(function(sel) {
return sel.match(node);
});
};
SimpleSelectorSequence.prototype.mayMatch = function(node) {
return this.selectors.every(function(sel) {
return sel.mayMatch(node);
});
};
SimpleSelectorSequence.prototype.trackChanges = function(node, map) {
this.selectors.forEach(function(sel) {
return sel.trackChanges(node, map);
});
};
SimpleSelectorSequence.prototype.lookupSort = function(sorter, base) {
this.head.lookupSort(sorter, base || this);
};
return SimpleSelectorSequence;
}(SimpleSelector);
exports.SimpleSelectorSequence = SimpleSelectorSequence;
var Selector = function(_super) {
__extends(Selector, _super);
function Selector(selectors) {
_super.call(this);
this.selectors = selectors;
var lastGroup;
var groups = [];
selectors.reverse().forEach(function(sel) {
switch (sel.combinator) {
case undefined:
case " ":
groups.push(lastGroup = []);

case ">":
lastGroup.push(sel);
break;

default:
throw new Error('Unsupported combinator "' + sel.combinator + '".');
}
});
this.groups = groups.map(function(g) {
return new Selector.ChildGroup(g);
});
this.last = selectors[0];
this.specificity = selectors.reduce(function(sum, sel) {
return sel.specificity + sum;
}, 0);
this.dynamic = selectors.some(function(sel) {
return sel.dynamic;
});
}
Selector.prototype.toString = function() {
return this.selectors.join("");
};
Selector.prototype.match = function(node) {
return this.groups.every(function(group, i) {
if (i === 0) {
node = group.match(node);
return !!node;
} else {
var ancestor = node;
while (ancestor = ancestor.parent) {
if (node = group.match(ancestor)) {
return true;
}
}
return false;
}
});
};
Selector.prototype.lookupSort = function(sorter, base) {
this.last.lookupSort(sorter, this);
};
Selector.prototype.accumulateChanges = function(node, map) {
if (!this.dynamic) {
return this.match(node);
}
var bounds = [];
var mayMatch = this.groups.every(function(group, i) {
if (i === 0) {
var nextNode = group.mayMatch(node);
bounds.push({
left: node,
right: node
});
node = nextNode;
return !!node;
} else {
var ancestor = node;
while (ancestor = ancestor.parent) {
var nextNode = group.mayMatch(ancestor);
if (nextNode) {
bounds.push({
left: ancestor,
right: null
});
node = nextNode;
return true;
}
}
return false;
}
});
if (!mayMatch) {
return false;
}
if (!map) {
return mayMatch;
}
for (var i = 0; i < this.groups.length; i++) {
var group_1 = this.groups[i];
if (!group_1.dynamic) {
continue;
}
var bound = bounds[i];
var node_1 = bound.left;
do {
if (group_1.mayMatch(node_1)) {
group_1.trackChanges(node_1, map);
}
} while (node_1 !== bound.right && (node_1 = node_1.parent));
}
return mayMatch;
};
return Selector;
}(SelectorCore);
exports.Selector = Selector;
var Selector;
(function(Selector) {
var ChildGroup = function() {
function ChildGroup(selectors) {
this.selectors = selectors;
this.dynamic = selectors.some(function(sel) {
return sel.dynamic;
});
}
ChildGroup.prototype.match = function(node) {
return this.selectors.every(function(sel, i) {
return (i === 0 ? node : node = node.parent) && sel.match(node);
}) ? node : null;
};
ChildGroup.prototype.mayMatch = function(node) {
return this.selectors.every(function(sel, i) {
return (i === 0 ? node : node = node.parent) && sel.mayMatch(node);
}) ? node : null;
};
ChildGroup.prototype.trackChanges = function(node, map) {
this.selectors.forEach(function(sel, i) {
return (i === 0 ? node : node = node.parent) && sel.trackChanges(node, map);
});
};
return ChildGroup;
}();
Selector.ChildGroup = ChildGroup;
})(Selector = exports.Selector || (exports.Selector = {}));
var RuleSet = function() {
function RuleSet(selectors, declarations) {
var _this = this;
this.selectors = selectors;
this.declarations = declarations;
this.selectors.forEach(function(sel) {
return sel.ruleset = _this;
});
}
RuleSet.prototype.toString = function() {
return this.selectors.join(", ") + " {" + this.declarations.map(function(d, i) {
return "" + (i === 0 ? " " : "") + d.property + ": " + d.value;
}).join("; ") + " }";
};
RuleSet.prototype.lookupSort = function(sorter) {
this.selectors.forEach(function(sel) {
return sel.lookupSort(sorter);
});
};
return RuleSet;
}();
exports.RuleSet = RuleSet;
function fromAstNodes(astRules) {
return astRules.filter(isRule).map(function(rule) {
var declarations = rule.declarations.filter(isDeclaration).map(createDeclaration);
var selectors = rule.selectors.map(createSelector);
var ruleset = new RuleSet(selectors, declarations);
return ruleset;
});
}
exports.fromAstNodes = fromAstNodes;
function createDeclaration(decl) {
return {
property: decl.property.toLowerCase(),
value: decl.value
};
}
function createSelector(sel) {
try {
var ast = selectorParser.parse(sel);
if (ast.length === 0) {
return new InvalidSelector(new Error("Empty selector"));
}
var selectors = ast.map(createSimpleSelector);
var sequences = [];
for (var seqStart = 0, seqEnd = 0, last = selectors.length - 1; seqEnd <= last; seqEnd++) {
var sel_1 = selectors[seqEnd];
var astComb = ast[seqEnd].comb;
if (astComb || seqEnd === last) {
if (seqStart === seqEnd) {
sel_1.combinator = astComb;
sequences.push(sel_1);
} else {
var sequence = new SimpleSelectorSequence(selectors.slice(seqStart, seqEnd + 1));
sequence.combinator = astComb;
sequences.push(sequence);
}
seqStart = seqEnd + 1;
}
}
if (sequences.length === 1) {
return sequences[0];
} else {
return new Selector(sequences);
}
} catch (e) {
return new InvalidSelector(e);
}
}
function createSimpleSelector(sel) {
if (selectorParser.isUniversal(sel)) {
return new UniversalSelector();
} else if (selectorParser.isId(sel)) {
return new IdSelector(sel.ident);
} else if (selectorParser.isType(sel)) {
return new TypeSelector(sel.ident.replace(/-/, "").toLowerCase());
} else if (selectorParser.isClass(sel)) {
return new ClassSelector(sel.ident);
} else if (selectorParser.isPseudo(sel)) {
return new PseudoClassSelector(sel.ident);
} else if (selectorParser.isAttribute(sel)) {
if (sel.test) {
return new AttributeSelector(sel.prop, sel.test, sel.value);
} else {
return new AttributeSelector(sel.prop);
}
}
}
function isRule(node) {
return node.type === "rule";
}
function isDeclaration(node) {
return node.type === "declaration";
}
var SelectorsMap = function() {
function SelectorsMap(rulesets) {
var _this = this;
this.id = {};
this.class = {};
this.type = {};
this.universal = [];
this.position = 0;
rulesets.forEach(function(rule) {
return rule.lookupSort(_this);
});
}
SelectorsMap.prototype.query = function(node) {
var _this = this;
var selectorClasses = [ this.universal, this.id[node.id], this.type[node.cssType] ];
if (node.cssClasses) {
node.cssClasses.forEach(function(c) {
return selectorClasses.push(_this.class[c]);
});
}
var selectors = selectorClasses.filter(function(arr) {
return !!arr;
}).reduce(function(cur, next) {
return cur.concat(next);
}, []);
var selectorsMatch = new SelectorsMatch();
selectorsMatch.selectors = selectors.filter(function(sel) {
return sel.sel.accumulateChanges(node, selectorsMatch);
}).sort(function(a, b) {
return a.sel.specificity - b.sel.specificity || a.pos - b.pos;
}).map(function(docSel) {
return docSel.sel;
});
return selectorsMatch;
};
SelectorsMap.prototype.sortById = function(id, sel) {
this.addToMap(this.id, id, sel);
};
SelectorsMap.prototype.sortByClass = function(cssClass, sel) {
this.addToMap(this.class, cssClass, sel);
};
SelectorsMap.prototype.sortByType = function(cssType, sel) {
this.addToMap(this.type, cssType, sel);
};
SelectorsMap.prototype.sortAsUniversal = function(sel) {
this.universal.push(this.makeDocSelector(sel));
};
SelectorsMap.prototype.addToMap = function(map, head, sel) {
this.position++;
var list = map[head];
if (list) {
list.push(this.makeDocSelector(sel));
} else {
map[head] = [ this.makeDocSelector(sel) ];
}
};
SelectorsMap.prototype.makeDocSelector = function(sel) {
return {
sel: sel,
pos: this.position++
};
};
return SelectorsMap;
}();
exports.SelectorsMap = SelectorsMap;
var SelectorsMatch = function() {
function SelectorsMatch() {
this.changeMap = new Map();
}
SelectorsMatch.prototype.addAttribute = function(node, attribute) {
var deps = this.properties(node);
if (!deps.attributes) {
deps.attributes = new Set();
}
deps.attributes.add(attribute);
};
SelectorsMatch.prototype.addPseudoClass = function(node, pseudoClass) {
var deps = this.properties(node);
if (!deps.pseudoClasses) {
deps.pseudoClasses = new Set();
}
deps.pseudoClasses.add(pseudoClass);
};
SelectorsMatch.prototype.properties = function(node) {
var set = this.changeMap.get(node);
if (!set) {
this.changeMap.set(node, set = {});
}
return set;
};
return SelectorsMatch;
}();
exports.SelectorsMatch = SelectorsMatch;
}, function(module, exports) {
function isUniversal(sel) {
return sel.type === "*";
}
exports.isUniversal = isUniversal;
function isType(sel) {
return sel.type === "";
}
exports.isType = isType;
function isClass(sel) {
return sel.type === ".";
}
exports.isClass = isClass;
function isId(sel) {
return sel.type === "#";
}
exports.isId = isId;
function isPseudo(sel) {
return sel.type === ":";
}
exports.isPseudo = isPseudo;
function isAttribute(sel) {
return sel.type === "[]";
}
exports.isAttribute = isAttribute;
var regex = /(\s*)(?:(\*)|(#|\.|:|\b)([_-\w][_-\w\d]*)|\[\s*([_-\w][_-\w\d]*)\s*(?:(=|\^=|\$=|\*=|\~=|\|=)\s*(?:([_-\w][_-\w\d]*)|"((?:[^\\"]|\\(?:"|n|r|f|\\|0-9a-f))*)"|'((?:[^\\']|\\(?:'|n|r|f|\\|0-9a-f))*)')\s*)?\])(?:\s*(\+|~|>|\s))?/g;
function parse(selector) {
var selectors = [];
var result;
var lastIndex = regex.lastIndex = 0;
while (result = regex.exec(selector)) {
var pos = result.index;
if (lastIndex !== pos) {
throw new Error("Unexpected characters at index, near: " + lastIndex + ": " + result.input.substr(lastIndex, 32));
} else if (!result[0] || result[0].length === 0) {
throw new Error("Last selector match got zero character result at index " + lastIndex + ", near: " + result.input.substr(lastIndex, 32));
}
pos += getLeadingWhiteSpace(result).length;
lastIndex = regex.lastIndex;
var type = getType(result);
var selector_1 = void 0;
switch (type) {
case "*":
selector_1 = {
pos: pos,
type: type
};
break;

case "#":
case ".":
case ":":
case "":
var ident = getIdentifier(result);
selector_1 = {
pos: pos,
type: type,
ident: ident
};
break;

case "[]":
var prop = getProperty(result);
var test = getPropertyTest(result);
var value = getPropertyValue(result);
selector_1 = test ? {
pos: pos,
type: type,
prop: prop,
test: test,
value: value
} : {
pos: pos,
type: type,
prop: prop
};
break;

default:
throw new Error("Unhandled type.");
}
var comb = getCombinator(result);
if (comb) {
selector_1.comb = comb;
}
selectors.push(selector_1);
}
if (selectors.length > 0) {
delete selectors[selectors.length - 1].comb;
}
return selectors;
}
exports.parse = parse;
function getLeadingWhiteSpace(result) {
return result[1] || "";
}
function getType(result) {
return result[5] && "[]" || result[2] || result[3];
}
function getIdentifier(result) {
return result[4];
}
function getProperty(result) {
return result[5];
}
function getPropertyTest(result) {
return result[6] || undefined;
}
function getPropertyValue(result) {
return result[7] || result[8] || result[9];
}
function getCombinator(result) {
return result[result.length - 1] || undefined;
}
}, function(module, exports, __webpack_require__) {
exports.parse = __webpack_require__(64);
}, function(module, exports) {
var commentre = /\/\*[^*]*\*+([^/*][^*]*\*+)*\//g;
module.exports = function(css, options) {
options = options || {};
var lineno = 1;
var column = 1;
function updatePosition(str) {
var lines = str.match(/\n/g);
if (lines) lineno += lines.length;
var i = str.lastIndexOf("\n");
column = ~i ? str.length - i : column + str.length;
}
function position() {
var start = {
line: lineno,
column: column
};
return function(node) {
node.position = new Position(start);
whitespace();
return node;
};
}
function Position(start) {
this.start = start;
this.end = {
line: lineno,
column: column
};
this.source = options.source;
}
Position.prototype.content = css;
var errorsList = [];
function error(msg) {
var err = new Error(options.source + ":" + lineno + ":" + column + ": " + msg);
err.reason = msg;
err.filename = options.source;
err.line = lineno;
err.column = column;
err.source = css;
if (options.silent) {
errorsList.push(err);
} else {
throw err;
}
}
function stylesheet() {
var rulesList = rules();
return {
type: "stylesheet",
stylesheet: {
rules: rulesList,
parsingErrors: errorsList
}
};
}
function open() {
return match(/^{\s*/);
}
function close() {
return match(/^}/);
}
function rules() {
var node;
var rules = [];
whitespace();
comments(rules);
while (css.length && css.charAt(0) != "}" && (node = atrule() || rule())) {
if (node !== false) {
rules.push(node);
comments(rules);
}
}
return rules;
}
function match(re) {
var m = re.exec(css);
if (!m) return;
var str = m[0];
updatePosition(str);
css = css.slice(str.length);
return m;
}
function whitespace() {
match(/^\s*/);
}
function comments(rules) {
var c;
rules = rules || [];
while (c = comment()) {
if (c !== false) {
rules.push(c);
}
}
return rules;
}
function comment() {
var pos = position();
if ("/" != css.charAt(0) || "*" != css.charAt(1)) return;
var i = 2;
while ("" != css.charAt(i) && ("*" != css.charAt(i) || "/" != css.charAt(i + 1))) ++i;
i += 2;
if ("" === css.charAt(i - 1)) {
return error("End of comment missing");
}
var str = css.slice(2, i - 2);
column += 2;
updatePosition(str);
css = css.slice(i);
column += 2;
return pos({
type: "comment",
comment: str
});
}
function selector() {
var m = match(/^([^{]+)/);
if (!m) return;
return trim(m[0]).replace(/\/\*([^*]|[\r\n]|(\*+([^*/]|[\r\n])))*\*\/+/g, "").replace(/"(?:\\"|[^"])*"|'(?:\\'|[^'])*'/g, function(m) {
return m.replace(/,/g, "‌");
}).split(/\s*(?![^(]*\)),\s*/).map(function(s) {
return s.replace(/\u200C/g, ",");
});
}
function declaration() {
var pos = position();
var prop = match(/^(\*?[-#\/\*\\\w]+(\[[0-9a-z_-]+\])?)\s*/);
if (!prop) return;
prop = trim(prop[0]);
if (!match(/^:\s*/)) return error("property missing ':'");
var val = match(/^((?:'(?:\\'|.)*?'|"(?:\\"|.)*?"|\([^\)]*?\)|[^};])+)/);
var ret = pos({
type: "declaration",
property: prop.replace(commentre, ""),
value: val ? trim(val[0]).replace(commentre, "") : ""
});
match(/^[;\s]*/);
return ret;
}
function declarations() {
var decls = [];
if (!open()) return error("missing '{'");
comments(decls);
var decl;
while (decl = declaration()) {
if (decl !== false) {
decls.push(decl);
comments(decls);
}
}
if (!close()) return error("missing '}'");
return decls;
}
function keyframe() {
var m;
var vals = [];
var pos = position();
while (m = match(/^((\d+\.\d+|\.\d+|\d+)%?|[a-z]+)\s*/)) {
vals.push(m[1]);
match(/^,\s*/);
}
if (!vals.length) return;
return pos({
type: "keyframe",
values: vals,
declarations: declarations()
});
}
function atkeyframes() {
var pos = position();
var m = match(/^@([-\w]+)?keyframes\s*/);
if (!m) return;
var vendor = m[1];
var m = match(/^([-\w]+)\s*/);
if (!m) return error("@keyframes missing name");
var name = m[1];
if (!open()) return error("@keyframes missing '{'");
var frame;
var frames = comments();
while (frame = keyframe()) {
frames.push(frame);
frames = frames.concat(comments());
}
if (!close()) return error("@keyframes missing '}'");
return pos({
type: "keyframes",
name: name,
vendor: vendor,
keyframes: frames
});
}
function atsupports() {
var pos = position();
var m = match(/^@supports *([^{]+)/);
if (!m) return;
var supports = trim(m[1]);
if (!open()) return error("@supports missing '{'");
var style = comments().concat(rules());
if (!close()) return error("@supports missing '}'");
return pos({
type: "supports",
supports: supports,
rules: style
});
}
function athost() {
var pos = position();
var m = match(/^@host\s*/);
if (!m) return;
if (!open()) return error("@host missing '{'");
var style = comments().concat(rules());
if (!close()) return error("@host missing '}'");
return pos({
type: "host",
rules: style
});
}
function atmedia() {
var pos = position();
var m = match(/^@media *([^{]+)/);
if (!m) return;
var media = trim(m[1]);
if (!open()) return error("@media missing '{'");
var style = comments().concat(rules());
if (!close()) return error("@media missing '}'");
return pos({
type: "media",
media: media,
rules: style
});
}
function atcustommedia() {
var pos = position();
var m = match(/^@custom-media\s+(--[^\s]+)\s*([^{;]+);/);
if (!m) return;
return pos({
type: "custom-media",
name: trim(m[1]),
media: trim(m[2])
});
}
function atpage() {
var pos = position();
var m = match(/^@page */);
if (!m) return;
var sel = selector() || [];
if (!open()) return error("@page missing '{'");
var decls = comments();
var decl;
while (decl = declaration()) {
decls.push(decl);
decls = decls.concat(comments());
}
if (!close()) return error("@page missing '}'");
return pos({
type: "page",
selectors: sel,
declarations: decls
});
}
function atdocument() {
var pos = position();
var m = match(/^@([-\w]+)?document *([^{]+)/);
if (!m) return;
var vendor = trim(m[1]);
var doc = trim(m[2]);
if (!open()) return error("@document missing '{'");
var style = comments().concat(rules());
if (!close()) return error("@document missing '}'");
return pos({
type: "document",
document: doc,
vendor: vendor,
rules: style
});
}
function atfontface() {
var pos = position();
var m = match(/^@font-face\s*/);
if (!m) return;
if (!open()) return error("@font-face missing '{'");
var decls = comments();
var decl;
while (decl = declaration()) {
decls.push(decl);
decls = decls.concat(comments());
}
if (!close()) return error("@font-face missing '}'");
return pos({
type: "font-face",
declarations: decls
});
}
var atimport = _compileAtrule("import");
var atcharset = _compileAtrule("charset");
var atnamespace = _compileAtrule("namespace");
function _compileAtrule(name) {
var re = new RegExp("^@" + name + "\\s*([^;]+);");
return function() {
var pos = position();
var m = match(re);
if (!m) return;
var ret = {
type: name
};
ret[name] = m[1].trim();
return pos(ret);
};
}
function atrule() {
if (css[0] != "@") return;
return atkeyframes() || atmedia() || atcustommedia() || atsupports() || atimport() || atcharset() || atnamespace() || atdocument() || atpage() || athost() || atfontface();
}
function rule() {
var pos = position();
var sel = selector();
if (!sel) return error("selector missing");
comments();
return pos({
type: "rule",
selectors: sel,
declarations: declarations()
});
}
return addParent(stylesheet());
};
function trim(str) {
return str ? str.replace(/^\s+|\s+$/g, "") : "";
}
function addParent(obj, parent) {
var isNode = obj && typeof obj.type === "string";
var childParent = isNode ? obj : parent;
for (var k in obj) {
var value = obj[k];
if (Array.isArray(value)) {
value.forEach(function(v) {
addParent(v, childParent);
});
} else if (value && typeof value === "object") {
addParent(value, childParent);
}
}
if (isNode) {
Object.defineProperty(obj, "parent", {
configurable: true,
writable: true,
enumerable: false,
value: parent || null
});
}
return obj;
}
}, function(module, exports, __webpack_require__) {
var animationModule = __webpack_require__(25);
var enums = __webpack_require__(24);
var style = __webpack_require__(15);
var KeyframeDeclaration = function() {
function KeyframeDeclaration() {}
return KeyframeDeclaration;
}();
exports.KeyframeDeclaration = KeyframeDeclaration;
var KeyframeInfo = function() {
function KeyframeInfo() {}
return KeyframeInfo;
}();
exports.KeyframeInfo = KeyframeInfo;
var KeyframeAnimationInfo = function() {
function KeyframeAnimationInfo() {
this.name = "";
this.duration = .3;
this.delay = 0;
this.iterations = 1;
this.curve = enums.AnimationCurve.ease;
this.isForwards = false;
this.isReverse = false;
}
return KeyframeAnimationInfo;
}();
exports.KeyframeAnimationInfo = KeyframeAnimationInfo;
var KeyframeAnimation = function() {
function KeyframeAnimation() {
this.delay = 0;
this.iterations = 1;
}
KeyframeAnimation.keyframeAnimationFromInfo = function(info, valueSourceModifier) {
var animations = new Array();
var length = info.keyframes.length;
var startDuration = 0;
if (info.isReverse) {
for (var index_1 = length - 1; index_1 >= 0; index_1--) {
var keyframe = info.keyframes[index_1];
startDuration = KeyframeAnimation.parseKeyframe(info, keyframe, animations, startDuration, valueSourceModifier);
}
} else {
for (var index_2 = 0; index_2 < length; index_2++) {
var keyframe = info.keyframes[index_2];
startDuration = KeyframeAnimation.parseKeyframe(info, keyframe, animations, startDuration, valueSourceModifier);
}
for (var index_3 = length - 1; index_3 > 0; index_3--) {
var a1 = animations[index_3];
var a2 = animations[index_3 - 1];
if (a2["curve"] !== undefined) {
a1["curve"] = a2["curve"];
a2["curve"] = undefined;
}
}
}
for (var index_4 = 1; index_4 < length; index_4++) {
var a = animations[index_4];
if (a["curve"] === undefined) {
a["curve"] = info.curve;
}
}
var animation = new KeyframeAnimation();
animation.delay = info.delay;
animation.iterations = info.iterations;
animation.animations = animations;
animation._isForwards = info.isForwards;
return animation;
};
KeyframeAnimation.parseKeyframe = function(info, keyframe, animations, startDuration, valueSourceModifier) {
var animation = {};
for (var _i = 0, _a = keyframe.declarations; _i < _a.length; _i++) {
var declaration = _a[_i];
animation[declaration.property] = declaration.value;
}
var duration = keyframe.duration;
if (duration === 0) {
duration = .01;
} else {
duration = info.duration * duration - startDuration;
startDuration += duration;
}
animation["duration"] = info.isReverse ? info.duration - duration : duration;
animation["curve"] = keyframe.curve;
animation["forceLayer"] = true;
animation["valueSource"] = valueSourceModifier;
animations.push(animation);
return startDuration;
};
Object.defineProperty(KeyframeAnimation.prototype, "isPlaying", {
get: function() {
return this._isPlaying;
},
enumerable: true,
configurable: true
});
KeyframeAnimation.prototype.cancel = function() {
if (this._isPlaying) {
this._isPlaying = false;
for (var i = this._nativeAnimations.length - 1; i >= 0; i--) {
var animation = this._nativeAnimations[i];
if (animation.isPlaying) {
animation.cancel();
}
}
if (this._nativeAnimations.length > 0) {
var animation = this._nativeAnimations[0];
this._resetAnimationValues(this._target, animation);
}
this._rejectAnimationFinishedPromise();
}
};
KeyframeAnimation.prototype.play = function(view) {
var _this = this;
if (this._isPlaying) {
throw new Error("Animation is already playing.");
}
var animationFinishedPromise = new Promise(function(resolve, reject) {
_this._resolve = resolve;
_this._reject = reject;
});
this._isPlaying = true;
this._nativeAnimations = new Array();
this._target = view;
if (this.delay !== 0) {
setTimeout(function() {
return _this.animate(view, 0, _this.iterations);
}, this.delay);
} else {
this.animate(view, 0, this.iterations);
}
return animationFinishedPromise;
};
KeyframeAnimation.prototype.animate = function(view, index, iterations) {
var _this = this;
if (!this._isPlaying) {
return;
}
if (index === 0) {
var animation = this.animations[0];
var modifier = animation["valueSource"];
if ("backgroundColor" in animation) {
view.style._setValue(style.backgroundColorProperty, animation["backgroundColor"], modifier);
}
if ("scale" in animation) {
view.style._setValue(style.scaleXProperty, animation["scale"].x, modifier);
view.style._setValue(style.scaleYProperty, animation["scale"].y, modifier);
}
if ("translate" in animation) {
view.style._setValue(style.translateXProperty, animation["translate"].x, modifier);
view.style._setValue(style.translateYProperty, animation["translate"].y, modifier);
}
if ("rotate" in animation) {
view.style._setValue(style.rotateProperty, animation["rotate"], modifier);
}
if ("opacity" in animation) {
view.style._setValue(style.opacityProperty, animation["opacity"], modifier);
}
setTimeout(function() {
return _this.animate(view, 1, iterations);
}, 1);
} else if (index < 0 || index >= this.animations.length) {
iterations -= 1;
if (iterations > 0) {
this.animate(view, 0, iterations);
} else {
if (this._isForwards === false) {
var animation = this.animations[this.animations.length - 1];
this._resetAnimationValues(view, animation);
}
this._resolveAnimationFinishedPromise();
}
} else {
var animationDef = this.animations[index];
animationDef.target = view;
var animation = new animationModule.Animation([ animationDef ]);
animation.play().then(function() {
_this.animate(view, index + 1, iterations);
});
this._nativeAnimations.push(animation);
}
};
KeyframeAnimation.prototype._resolveAnimationFinishedPromise = function() {
this._nativeAnimations = new Array();
this._isPlaying = false;
this._target = null;
this._resolve();
};
KeyframeAnimation.prototype._rejectAnimationFinishedPromise = function() {
this._nativeAnimations = new Array();
this._isPlaying = false;
this._target = null;
this._reject(new Error("Animation cancelled."));
};
KeyframeAnimation.prototype._resetAnimationValues = function(view, animation) {
var modifier = animation["valueSource"];
if ("backgroundColor" in animation) {
view.style._resetValue(style.backgroundColorProperty, modifier);
}
if ("scale" in animation) {
view.style._resetValue(style.scaleXProperty, modifier);
view.style._resetValue(style.scaleYProperty, modifier);
}
if ("translate" in animation) {
view.style._resetValue(style.translateXProperty, modifier);
view.style._resetValue(style.translateYProperty, modifier);
}
if ("rotate" in animation) {
view.style._resetValue(style.rotateProperty, modifier);
}
if ("opacity" in animation) {
view.style._resetValue(style.opacityProperty, modifier);
}
};
return KeyframeAnimation;
}();
exports.KeyframeAnimation = KeyframeAnimation;
}, function(module, exports, __webpack_require__) {
var keyframeAnimationModule = __webpack_require__(65);
var converters = __webpack_require__(23);
var types = __webpack_require__(14);
var colorModule = __webpack_require__(19);
var styleProperty = __webpack_require__(22);
var animationProperties = {
"animation-name": function(info, declaration) {
return info.name = declaration.value;
},
"animation-duration": function(info, declaration) {
return info.duration = converters.timeConverter(declaration.value);
},
"animation-delay": function(info, declaration) {
return info.delay = converters.timeConverter(declaration.value);
},
"animation-timing-function": function(info, declaration) {
return info.curve = converters.animationTimingFunctionConverter(declaration.value);
},
"animation-iteration-count": function(info, declaration) {
return declaration.value === "infinite" ? info.iterations = Number.MAX_VALUE : info.iterations = converters.numberConverter(declaration.value);
},
"animation-direction": function(info, declaration) {
return info.isReverse = declaration.value === "reverse";
},
"animation-fill-mode": function(info, declaration) {
return info.isForwards = declaration.value === "forwards";
}
};
var CssAnimationParser = function() {
function CssAnimationParser() {}
CssAnimationParser.keyframeAnimationsFromCSSDeclarations = function(declarations) {
var animations = new Array();
var animationInfo = undefined;
if (declarations === null || declarations === undefined) {
return undefined;
}
for (var _i = 0, declarations_1 = declarations; _i < declarations_1.length; _i++) {
var declaration = declarations_1[_i];
if (declaration.property === "animation") {
CssAnimationParser.keyframeAnimationsFromCSSProperty(declaration.value, animations);
} else {
var propertyHandler = animationProperties[declaration.property];
if (propertyHandler) {
if (animationInfo === undefined) {
animationInfo = new keyframeAnimationModule.KeyframeAnimationInfo();
animations.push(animationInfo);
}
propertyHandler(animationInfo, declaration);
}
}
}
return animations.length === 0 ? undefined : animations;
};
CssAnimationParser.keyframesArrayFromCSS = function(cssKeyframes) {
var parsedKeyframes = new Array();
for (var _i = 0, _a = cssKeyframes.keyframes; _i < _a.length; _i++) {
var keyframe = _a[_i];
var declarations = CssAnimationParser.parseKeyframeDeclarations(keyframe);
for (var _b = 0, _c = keyframe.values; _b < _c.length; _b++) {
var time_1 = _c[_b];
if (time_1 === "from") {
time_1 = 0;
} else if (time_1 === "to") {
time_1 = 1;
} else {
time_1 = parseFloat(time_1) / 100;
if (time_1 < 0) {
time_1 = 0;
}
if (time_1 > 100) {
time_1 = 100;
}
}
var current = parsedKeyframes[time_1];
if (current === undefined) {
current = {};
current.duration = time_1;
parsedKeyframes[time_1] = current;
}
for (var _d = 0, _e = keyframe.declarations; _d < _e.length; _d++) {
var declaration = _e[_d];
if (declaration.property === "animation-timing-function") {
current.curve = converters.animationTimingFunctionConverter(declaration.value);
}
}
current.declarations = declarations;
}
}
var array = new Array();
for (var parsedKeyframe in parsedKeyframes) {
array.push(parsedKeyframes[parsedKeyframe]);
}
array.sort(function(a, b) {
return a.duration - b.duration;
});
return array;
};
CssAnimationParser.keyframeAnimationsFromCSSProperty = function(value, animations) {
if (types.isString(value)) {
var values = value.split(/[,]+/);
for (var _i = 0, values_1 = values; _i < values_1.length; _i++) {
var parsedValue = values_1[_i];
var animationInfo = new keyframeAnimationModule.KeyframeAnimationInfo();
var arr = parsedValue.trim().split(/[ ]+/);
if (arr.length > 0) {
animationInfo.name = arr[0];
}
if (arr.length > 1) {
animationInfo.duration = converters.timeConverter(arr[1]);
}
if (arr.length > 2) {
animationInfo.curve = converters.animationTimingFunctionConverter(arr[2]);
}
if (arr.length > 3) {
animationInfo.delay = converters.timeConverter(arr[3]);
}
if (arr.length > 4) {
animationInfo.iterations = parseInt(arr[4]);
}
if (arr.length > 5) {
animationInfo.isReverse = arr[4] === "reverse";
}
if (arr.length > 6) {
animationInfo.isForwards = arr[5] === "forwards";
}
if (arr.length > 7) {
throw new Error("Invalid value for animation: " + value);
}
animations.push(animationInfo);
}
}
};
CssAnimationParser.parseKeyframeDeclarations = function(keyframe) {
var declarations = {};
var transforms = {
scale: undefined,
translate: undefined
};
for (var _i = 0, _a = keyframe.declarations; _i < _a.length; _i++) {
var declaration = _a[_i];
var property = styleProperty.getPropertyByCssName(declaration.property);
if (property) {
var val = declaration.value;
if (property.name === "opacity") {
val = parseFloat(val);
} else if (property.name === "backgroundColor") {
val = new colorModule.Color(val);
}
declarations[property.name] = val;
} else {
var pairs = styleProperty.getShorthandPairs(declaration.property, declaration.value);
if (pairs) {
for (var j = 0; j < pairs.length; j++) {
var pair = pairs[j];
if (!this.preprocessAnimationValues(pair, transforms)) {
declarations[pair.property.name] = pair.value;
}
}
}
}
}
if (transforms.scale !== undefined) {
declarations["scale"] = transforms.scale;
}
if (transforms.translate !== undefined) {
declarations["translate"] = transforms.translate;
}
var array = new Array();
for (var declaration in declarations) {
var keyframeDeclaration = {};
keyframeDeclaration.property = declaration;
keyframeDeclaration.value = declarations[declaration];
array.push(keyframeDeclaration);
}
return array;
};
CssAnimationParser.preprocessAnimationValues = function(pair, transforms) {
if (pair.property.name === "scaleX") {
if (transforms.scale === undefined) {
transforms.scale = {
x: 1,
y: 1
};
}
transforms.scale.x = pair.value;
return true;
}
if (pair.property.name === "scaleY") {
if (transforms.scale === undefined) {
transforms.scale = {
x: 1,
y: 1
};
}
transforms.scale.y = pair.value;
return true;
}
if (pair.property.name === "translateX") {
if (transforms.translate === undefined) {
transforms.translate = {
x: 0,
y: 0
};
}
transforms.translate.x = pair.value;
return true;
}
if (pair.property.name === "translateY") {
if (transforms.translate === undefined) {
transforms.translate = {
x: 0,
y: 0
};
}
transforms.translate.y = pair.value;
return true;
}
return false;
};
return CssAnimationParser;
}();
exports.CssAnimationParser = CssAnimationParser;
}, function(module, exports, __webpack_require__) {
function __export(m) {
for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
__export(__webpack_require__(68));
var ScopeError = function(_super) {
__extends(ScopeError, _super);
function ScopeError(inner, message) {
var formattedMessage;
if (message && inner.message) {
formattedMessage = message + "\n > " + inner.message.replace("\n", "\n  ");
} else {
formattedMessage = message || inner.message || undefined;
}
_super.call(this, formattedMessage);
this.stack = "Error: " + this.message + "\n" + inner.stack.substr(inner.stack.indexOf("\n") + 1);
this.message = formattedMessage;
}
return ScopeError;
}(Error);
exports.ScopeError = ScopeError;
var SourceError = function(_super) {
__extends(SourceError, _super);
function SourceError(child, source, message) {
_super.call(this, child, message ? message + " @" + source + "" : source + "");
}
return SourceError;
}(ScopeError);
exports.SourceError = SourceError;
}, function(module, exports, __webpack_require__) {
var file_system_1 = __webpack_require__(32);
exports.debug = true;
var applicationRootPath;
function ensureAppRootPath() {
if (!applicationRootPath) {
applicationRootPath = file_system_1.knownFolders.currentApp().path;
applicationRootPath = applicationRootPath.substr(0, applicationRootPath.length - "app/".length);
}
}
var Source = function() {
function Source(uri, line, column) {
ensureAppRootPath();
if (uri.length > applicationRootPath.length && uri.substr(0, applicationRootPath.length) === applicationRootPath) {
this._uri = "file://" + uri.substr(applicationRootPath.length);
} else {
this._uri = uri;
}
this._line = line;
this._column = column;
}
Object.defineProperty(Source.prototype, "uri", {
get: function() {
return this._uri;
},
enumerable: true,
configurable: true
});
Object.defineProperty(Source.prototype, "line", {
get: function() {
return this._line;
},
enumerable: true,
configurable: true
});
Object.defineProperty(Source.prototype, "column", {
get: function() {
return this._column;
},
enumerable: true,
configurable: true
});
Source.prototype.toString = function() {
return this._uri + ":" + this._line + ":" + this._column;
};
Source.get = function(object) {
return object[Source._source];
};
Source.set = function(object, src) {
object[Source._source] = src;
};
Source._source = Symbol("source");
return Source;
}();
exports.Source = Source;
}, function(module, exports, __webpack_require__) {
function __export(m) {
for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
var flexbox_layout_common_1 = __webpack_require__(70);
var utils_1 = __webpack_require__(27);
function setLayoutParamsProperty(view, setter) {
var nativeView = view._nativeView;
if (nativeView) {
var lp = nativeView.getLayoutParams() || new org.nativescript.widgets.FlexboxLayout.LayoutParams();
if (lp instanceof org.nativescript.widgets.FlexboxLayout.LayoutParams) {
setter(lp);
nativeView.setLayoutParams(lp);
}
}
}
function _onNativeOrderPropertyChanged(view, newValue) {
setLayoutParamsProperty(view, function(lp) {
return lp.order = newValue;
});
if (view.parent && view.parent instanceof FlexboxLayout && view.parent.android) {
view.parent.android.invalidateOrdersCache();
}
}
exports._onNativeOrderPropertyChanged = _onNativeOrderPropertyChanged;
function _onNativeFlexGrowPropertyChanged(view, newValue) {
setLayoutParamsProperty(view, function(lp) {
return lp.flexGrow = newValue;
});
}
exports._onNativeFlexGrowPropertyChanged = _onNativeFlexGrowPropertyChanged;
function _onNativeFlexShrinkPropertyChanged(view, newValue) {
setLayoutParamsProperty(view, function(lp) {
return lp.flexShrink = newValue;
});
}
exports._onNativeFlexShrinkPropertyChanged = _onNativeFlexShrinkPropertyChanged;
function _onNativeAlignSelfPropertyChanged(view, newValue) {
setLayoutParamsProperty(view, function(lp) {
return lp.alignSelf = alignSelfMap[newValue];
});
}
exports._onNativeAlignSelfPropertyChanged = _onNativeAlignSelfPropertyChanged;
function _onNativeFlexWrapBeforePropertyChanged(view, newValue) {
setLayoutParamsProperty(view, function(lp) {
return lp.wrapBefore = newValue;
});
}
exports._onNativeFlexWrapBeforePropertyChanged = _onNativeFlexWrapBeforePropertyChanged;
__export(__webpack_require__(70));
var FlexboxLayoutWidget = org.nativescript.widgets.FlexboxLayout;
var flexDirectionMap = (_a = {}, _a[flexbox_layout_common_1.FlexDirection.ROW] = FlexboxLayoutWidget.FLEX_DIRECTION_ROW, 
_a[flexbox_layout_common_1.FlexDirection.ROW_REVERSE] = FlexboxLayoutWidget.FLEX_DIRECTION_ROW_REVERSE, 
_a[flexbox_layout_common_1.FlexDirection.COLUMN] = FlexboxLayoutWidget.FLEX_DIRECTION_COLUMN, 
_a[flexbox_layout_common_1.FlexDirection.COLUMN_REVERSE] = FlexboxLayoutWidget.FLEX_DIRECTION_COLUMN_REVERSE, 
_a);
var flexWrapMap = (_b = {}, _b[flexbox_layout_common_1.FlexWrap.NOWRAP] = FlexboxLayoutWidget.FLEX_WRAP_NOWRAP, 
_b[flexbox_layout_common_1.FlexWrap.WRAP] = FlexboxLayoutWidget.FLEX_WRAP_WRAP, 
_b[flexbox_layout_common_1.FlexWrap.WRAP_REVERSE] = FlexboxLayoutWidget.FLEX_WRAP_WRAP_REVERSE, 
_b);
var justifyContentMap = (_c = {}, _c[flexbox_layout_common_1.JustifyContent.CENTER] = FlexboxLayoutWidget.JUSTIFY_CONTENT_CENTER, 
_c[flexbox_layout_common_1.JustifyContent.FLEX_END] = FlexboxLayoutWidget.JUSTIFY_CONTENT_FLEX_END, 
_c[flexbox_layout_common_1.JustifyContent.FLEX_START] = FlexboxLayoutWidget.JUSTIFY_CONTENT_FLEX_START, 
_c[flexbox_layout_common_1.JustifyContent.SPACE_AROUND] = FlexboxLayoutWidget.JUSTIFY_CONTENT_SPACE_AROUND, 
_c[flexbox_layout_common_1.JustifyContent.SPACE_BETWEEN] = FlexboxLayoutWidget.JUSTIFY_CONTENT_SPACE_BETWEEN, 
_c);
var alignItemsMap = (_d = {}, _d[flexbox_layout_common_1.AlignItems.BASELINE] = FlexboxLayoutWidget.ALIGN_ITEMS_BASELINE, 
_d[flexbox_layout_common_1.AlignItems.CENTER] = FlexboxLayoutWidget.ALIGN_ITEMS_CENTER, 
_d[flexbox_layout_common_1.AlignItems.FLEX_END] = FlexboxLayoutWidget.ALIGN_ITEMS_FLEX_END, 
_d[flexbox_layout_common_1.AlignItems.FLEX_START] = FlexboxLayoutWidget.ALIGN_ITEMS_FLEX_START, 
_d[flexbox_layout_common_1.AlignItems.STRETCH] = FlexboxLayoutWidget.ALIGN_ITEMS_STRETCH, 
_d);
var alignContentMap = (_e = {}, _e[flexbox_layout_common_1.AlignContent.CENTER] = FlexboxLayoutWidget.ALIGN_CONTENT_CENTER, 
_e[flexbox_layout_common_1.AlignContent.FLEX_END] = FlexboxLayoutWidget.ALIGN_CONTENT_FLEX_END, 
_e[flexbox_layout_common_1.AlignContent.FLEX_START] = FlexboxLayoutWidget.ALIGN_CONTENT_FLEX_START, 
_e[flexbox_layout_common_1.AlignContent.SPACE_AROUND] = FlexboxLayoutWidget.ALIGN_CONTENT_SPACE_AROUND, 
_e[flexbox_layout_common_1.AlignContent.SPACE_BETWEEN] = FlexboxLayoutWidget.ALIGN_CONTENT_SPACE_BETWEEN, 
_e[flexbox_layout_common_1.AlignContent.STRETCH] = FlexboxLayoutWidget.ALIGN_CONTENT_STRETCH, 
_e);
var alignSelfMap = (_f = {}, _f[flexbox_layout_common_1.AlignSelf.AUTO] = FlexboxLayoutWidget.LayoutParams.ALIGN_SELF_AUTO, 
_f[flexbox_layout_common_1.AlignSelf.FLEX_START] = FlexboxLayoutWidget.LayoutParams.ALIGN_SELF_FLEX_START, 
_f[flexbox_layout_common_1.AlignSelf.FLEX_END] = FlexboxLayoutWidget.LayoutParams.ALIGN_SELF_FLEX_END, 
_f[flexbox_layout_common_1.AlignSelf.CENTER] = FlexboxLayoutWidget.LayoutParams.ALIGN_SELF_CENTER, 
_f[flexbox_layout_common_1.AlignSelf.BASELINE] = FlexboxLayoutWidget.LayoutParams.ALIGN_SELF_BASELINE, 
_f[flexbox_layout_common_1.AlignSelf.STRETCH] = FlexboxLayoutWidget.LayoutParams.ALIGN_SELF_STRETCH, 
_f);
var FlexboxLayout = function(_super) {
__extends(FlexboxLayout, _super);
function FlexboxLayout() {
_super.call(this);
}
Object.defineProperty(FlexboxLayout.prototype, "android", {
get: function() {
return this._layout;
},
enumerable: true,
configurable: true
});
Object.defineProperty(FlexboxLayout.prototype, "_nativeView", {
get: function() {
return this._layout;
},
enumerable: true,
configurable: true
});
FlexboxLayout.prototype._createUI = function() {
this._layout = new org.nativescript.widgets.FlexboxLayout(this._context);
};
FlexboxLayout.prototype._invalidateOrdersCache = function() {
this._nativeView.invalidateOrdersCache();
};
FlexboxLayout.prototype._setNativeFlexDirection = function(flexDirection) {
var value = flexDirectionMap[flexDirection];
this.android.setFlexDirection(value);
};
FlexboxLayout.prototype._setNativeFlexWrap = function(flexWrap) {
this.android.setFlexWrap(flexWrapMap[flexWrap]);
};
FlexboxLayout.prototype._setNativeJustifyContent = function(justifyContent) {
this.android.setJustifyContent(justifyContentMap[justifyContent]);
};
FlexboxLayout.prototype._setNativeAlignItems = function(alignItems) {
this.android.setAlignItems(alignItemsMap[alignItems]);
};
FlexboxLayout.prototype._setNativeAlignContent = function(alignContent) {
this.android.setAlignContent(alignContentMap[alignContent]);
};
return FlexboxLayout;
}(flexbox_layout_common_1.FlexboxLayoutBase);
exports.FlexboxLayout = FlexboxLayout;
function _setAndroidLayoutParams(lp, view) {
lp.order = FlexboxLayout.getOrder(view);
lp.flexGrow = FlexboxLayout.getFlexGrow(view);
lp.flexShrink = FlexboxLayout.getFlexShrink(view);
lp.alignSelf = alignSelfMap[FlexboxLayout.getAlignSelf(view)];
lp.wrapBefore = FlexboxLayout.getFlexWrapBefore(view);
lp.minWidth = utils_1.layout.toDevicePixels(view.minWidth);
lp.minHeight = utils_1.layout.toDevicePixels(view.minHeight);
}
exports._setAndroidLayoutParams = _setAndroidLayoutParams;
var _a, _b, _c, _d, _e, _f;
}, function(module, exports, __webpack_require__) {
var layout_base_1 = __webpack_require__(71);
var proxy_1 = __webpack_require__(41);
var dependency_observable_1 = __webpack_require__(17);
var special_properties_1 = __webpack_require__(48);
var platform_1 = __webpack_require__(35);
var types_1 = __webpack_require__(14);
var styleProperty = __webpack_require__(22);
var style = __webpack_require__(15);
var flexbox = __webpack_require__(69);
var ORDER_DEFAULT = 1;
var FLEX_GROW_DEFAULT = 0;
var FLEX_SHRINK_DEFAULT = 1;
function makeValidator() {
var values = [];
for (var _i = 0; _i < arguments.length; _i++) {
values[_i - 0] = arguments[_i];
}
var set = new Set(values);
return function(value) {
return set.has(value);
};
}
function makeParser(isValid, def) {
return function(value) {
var lower = value && value.toLowerCase();
return isValid(lower) ? lower : def;
};
}
var FlexDirection;
(function(FlexDirection) {
FlexDirection.ROW = "row";
FlexDirection.ROW_REVERSE = "row-reverse";
FlexDirection.COLUMN = "column";
FlexDirection.COLUMN_REVERSE = "column-reverse";
FlexDirection.isValid = makeValidator(FlexDirection.ROW, FlexDirection.ROW_REVERSE, FlexDirection.COLUMN, FlexDirection.COLUMN_REVERSE);
FlexDirection.parse = makeParser(FlexDirection.isValid, FlexDirection.ROW);
})(FlexDirection = exports.FlexDirection || (exports.FlexDirection = {}));
var FlexWrap;
(function(FlexWrap) {
FlexWrap.NOWRAP = "nowrap";
FlexWrap.WRAP = "wrap";
FlexWrap.WRAP_REVERSE = "wrap-reverse";
FlexWrap.isValid = makeValidator(FlexWrap.NOWRAP, FlexWrap.WRAP, FlexWrap.WRAP_REVERSE);
FlexWrap.parse = makeParser(FlexWrap.isValid, FlexWrap.NOWRAP);
})(FlexWrap = exports.FlexWrap || (exports.FlexWrap = {}));
var JustifyContent;
(function(JustifyContent) {
JustifyContent.FLEX_START = "flex-start";
JustifyContent.FLEX_END = "flex-end";
JustifyContent.CENTER = "center";
JustifyContent.SPACE_BETWEEN = "space-between";
JustifyContent.SPACE_AROUND = "space-around";
JustifyContent.isValid = makeValidator(JustifyContent.FLEX_START, JustifyContent.FLEX_END, JustifyContent.CENTER, JustifyContent.SPACE_BETWEEN, JustifyContent.SPACE_AROUND);
JustifyContent.parse = makeParser(JustifyContent.isValid, JustifyContent.FLEX_START);
})(JustifyContent = exports.JustifyContent || (exports.JustifyContent = {}));
var FlexBasisPercent;
(function(FlexBasisPercent) {
FlexBasisPercent.DEFAULT = -1;
})(FlexBasisPercent = exports.FlexBasisPercent || (exports.FlexBasisPercent = {}));
var AlignItems;
(function(AlignItems) {
AlignItems.FLEX_START = "flex-start";
AlignItems.FLEX_END = "flex-end";
AlignItems.CENTER = "center";
AlignItems.BASELINE = "baseline";
AlignItems.STRETCH = "stretch";
AlignItems.isValid = makeValidator(AlignItems.FLEX_START, AlignItems.FLEX_END, AlignItems.CENTER, AlignItems.BASELINE, AlignItems.STRETCH);
AlignItems.parse = makeParser(AlignItems.isValid, AlignItems.FLEX_START);
})(AlignItems = exports.AlignItems || (exports.AlignItems = {}));
var AlignContent;
(function(AlignContent) {
AlignContent.FLEX_START = "flex-start";
AlignContent.FLEX_END = "flex-end";
AlignContent.CENTER = "center";
AlignContent.SPACE_BETWEEN = "space-between";
AlignContent.SPACE_AROUND = "space-around";
AlignContent.STRETCH = "stretch";
AlignContent.isValid = makeValidator(AlignContent.FLEX_START, AlignContent.FLEX_END, AlignContent.CENTER, AlignContent.SPACE_BETWEEN, AlignContent.SPACE_AROUND, AlignContent.STRETCH);
AlignContent.parse = makeParser(AlignContent.isValid, AlignContent.FLEX_START);
})(AlignContent = exports.AlignContent || (exports.AlignContent = {}));
var Order;
(function(Order) {
function isValid(value) {
return isFinite(parseInt(value));
}
Order.isValid = isValid;
Order.parse = parseInt;
})(Order = exports.Order || (exports.Order = {}));
var FlexGrow;
(function(FlexGrow) {
function isValid(value) {
var parsed = parseInt(value);
return isFinite(parsed) && value >= 0;
}
FlexGrow.isValid = isValid;
FlexGrow.parse = parseFloat;
})(FlexGrow = exports.FlexGrow || (exports.FlexGrow = {}));
var FlexShrink;
(function(FlexShrink) {
function isValid(value) {
var parsed = parseInt(value);
return isFinite(parsed) && value >= 0;
}
FlexShrink.isValid = isValid;
FlexShrink.parse = parseFloat;
})(FlexShrink = exports.FlexShrink || (exports.FlexShrink = {}));
var FlexWrapBefore;
(function(FlexWrapBefore) {
function isValid(value) {
if (types_1.isBoolean(value)) {
return true;
}
if (types_1.isString(value)) {
var str = value.trim().toLowerCase();
return str === "true" || str === "false";
}
return false;
}
FlexWrapBefore.isValid = isValid;
function parse(value) {
return value && value.toString().trim().toLowerCase() === "true";
}
FlexWrapBefore.parse = parse;
})(FlexWrapBefore = exports.FlexWrapBefore || (exports.FlexWrapBefore = {}));
var AlignSelf;
(function(AlignSelf) {
AlignSelf.AUTO = "auto";
AlignSelf.FLEX_START = "flex-start";
AlignSelf.FLEX_END = "flex-end";
AlignSelf.CENTER = "center";
AlignSelf.BASELINE = "baseline";
AlignSelf.STRETCH = "stretch";
AlignSelf.isValid = makeValidator(AlignSelf.AUTO, AlignSelf.FLEX_START, AlignSelf.FLEX_END, AlignSelf.CENTER, AlignSelf.BASELINE, AlignSelf.STRETCH);
AlignSelf.parse = makeParser(AlignSelf.isValid, AlignSelf.AUTO);
})(AlignSelf = exports.AlignSelf || (exports.AlignSelf = {}));
function validateArgs(element) {
if (!element) {
throw new Error("element cannot be null or undefinied.");
}
return element;
}
var FlexboxLayoutBase = function(_super) {
__extends(FlexboxLayoutBase, _super);
function FlexboxLayoutBase() {
_super.call(this);
}
Object.defineProperty(FlexboxLayoutBase.prototype, "flexDirection", {
get: function() {
return this.style._getValue(exports.flexDirectionProperty);
},
set: function(value) {
this.style._setValue(exports.flexDirectionProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(FlexboxLayoutBase.prototype, "flexWrap", {
get: function() {
return this.style._getValue(exports.flexWrapProperty);
},
set: function(value) {
this.style._setValue(exports.flexWrapProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(FlexboxLayoutBase.prototype, "justifyContent", {
get: function() {
return this.style._getValue(exports.justifyContentProperty);
},
set: function(value) {
this.style._setValue(exports.justifyContentProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(FlexboxLayoutBase.prototype, "alignItems", {
get: function() {
return this.style._getValue(exports.alignItemsProperty);
},
set: function(value) {
this.style._setValue(exports.alignItemsProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(FlexboxLayoutBase.prototype, "alignContent", {
get: function() {
return this.style._getValue(exports.alignContentProperty);
},
set: function(value) {
this.style._setValue(exports.alignContentProperty, value);
},
enumerable: true,
configurable: true
});
FlexboxLayoutBase.setOrder = function(view, order) {
validateArgs(view).style._setValue(exports.orderProperty, order);
};
FlexboxLayoutBase.getOrder = function(view) {
return validateArgs(view).style._getValue(exports.orderProperty);
};
FlexboxLayoutBase.setFlexGrow = function(view, grow) {
validateArgs(view).style._setValue(exports.flexGrowProperty, grow);
};
FlexboxLayoutBase.getFlexGrow = function(view) {
return validateArgs(view).style._getValue(exports.flexGrowProperty);
};
FlexboxLayoutBase.setFlexShrink = function(view, shrink) {
validateArgs(view).style._setValue(exports.flexShrinkProperty, shrink);
};
FlexboxLayoutBase.getFlexShrink = function(view) {
return validateArgs(view).style._getValue(exports.flexShrinkProperty);
};
FlexboxLayoutBase.setAlignSelf = function(view, align) {
validateArgs(view).style._setValue(exports.alignSelfProperty, align);
};
FlexboxLayoutBase.getAlignSelf = function(view) {
return validateArgs(view).style._getValue(exports.alignSelfProperty);
};
FlexboxLayoutBase.setFlexWrapBefore = function(view, wrap) {
validateArgs(view).style._setValue(exports.flexWrapBeforeProperty, wrap);
};
FlexboxLayoutBase.getFlexWrapBefore = function(view) {
return validateArgs(view).style._getValue(exports.flexWrapBeforeProperty);
};
return FlexboxLayoutBase;
}(layout_base_1.LayoutBase);
exports.FlexboxLayoutBase = FlexboxLayoutBase;
var flexboxAffectsLayout = platform_1.isAndroid ? dependency_observable_1.PropertyMetadataSettings.None : dependency_observable_1.PropertyMetadataSettings.AffectsLayout;
exports.flexDirectionProperty = new styleProperty.Property("flexDirection", "flex-direction", new proxy_1.PropertyMetadata(FlexDirection.ROW, flexboxAffectsLayout, undefined, FlexDirection.isValid), FlexDirection.parse);
exports.flexWrapProperty = new styleProperty.Property("flexWrap", "flex-wrap", new proxy_1.PropertyMetadata(FlexWrap.NOWRAP, flexboxAffectsLayout, undefined, FlexWrap.isValid), FlexWrap.parse);
exports.justifyContentProperty = new styleProperty.Property("justifyContent", "justify-content", new proxy_1.PropertyMetadata(JustifyContent.FLEX_START, flexboxAffectsLayout, undefined, JustifyContent.isValid), JustifyContent.parse);
exports.alignItemsProperty = new styleProperty.Property("alignItems", "align-items", new proxy_1.PropertyMetadata(AlignItems.STRETCH, flexboxAffectsLayout, undefined, AlignItems.isValid), AlignItems.parse);
exports.alignContentProperty = new styleProperty.Property("alignContent", "align-content", new proxy_1.PropertyMetadata(AlignContent.STRETCH, flexboxAffectsLayout, undefined, AlignContent.isValid), AlignContent.parse);
exports.orderProperty = new styleProperty.Property("order", "order", new proxy_1.PropertyMetadata(ORDER_DEFAULT, dependency_observable_1.PropertyMetadataSettings.None, undefined, Order.isValid), Order.parse);
exports.flexGrowProperty = new styleProperty.Property("flexGrow", "flex-grow", new proxy_1.PropertyMetadata(FLEX_GROW_DEFAULT, dependency_observable_1.PropertyMetadataSettings.None, undefined, FlexGrow.isValid), FlexGrow.parse);
exports.flexShrinkProperty = new styleProperty.Property("flexShrink", "flex-shrink", new proxy_1.PropertyMetadata(FLEX_SHRINK_DEFAULT, dependency_observable_1.PropertyMetadataSettings.None, undefined, FlexShrink.isValid), FlexShrink.parse);
exports.flexWrapBeforeProperty = new styleProperty.Property("flexWrapBefore", "flex-wrap-before", new proxy_1.PropertyMetadata(false, dependency_observable_1.PropertyMetadataSettings.None, undefined, FlexWrapBefore.isValid), FlexWrapBefore.parse);
exports.alignSelfProperty = new styleProperty.Property("alignSelf", "align-self", new proxy_1.PropertyMetadata(AlignSelf.AUTO, dependency_observable_1.PropertyMetadataSettings.None, undefined, AlignSelf.isValid), AlignSelf.parse);
special_properties_1.registerSpecialProperty("order", function(instance, propertyValue) {
FlexboxLayoutBase.setOrder(instance, !isNaN(+propertyValue) && +propertyValue);
});
special_properties_1.registerSpecialProperty("flexGrow", function(instance, propertyValue) {
FlexboxLayoutBase.setFlexGrow(instance, !isNaN(+propertyValue) && +propertyValue);
});
special_properties_1.registerSpecialProperty("flexShrink", function(instance, propertyValue) {
FlexboxLayoutBase.setFlexShrink(instance, !isNaN(+propertyValue) && +propertyValue);
});
special_properties_1.registerSpecialProperty("alignSelf", function(instance, propertyValue) {
FlexboxLayoutBase.setAlignSelf(instance, propertyValue);
});
special_properties_1.registerSpecialProperty("flexWrapBefore", function(instance, propertyValue) {
FlexboxLayoutBase.setFlexWrapBefore(instance, types_1.isString(propertyValue) ? FlexWrapBefore.parse(propertyValue) : propertyValue);
});
var flexboxGuard = function(handler) {
return function(view, newValue) {
return view instanceof FlexboxLayoutBase ? handler(view, newValue) : void 0;
};
};
style.registerHandler(exports.flexDirectionProperty, new style.StylePropertyChangedHandler(flexboxGuard(function(flexbox, newValue) {
return flexbox._setNativeFlexDirection(newValue);
}), flexboxGuard(function(flexbox, newValue) {
return flexbox._setNativeFlexDirection(FlexDirection.ROW);
})), "FlexboxLayout");
style.registerHandler(exports.flexWrapProperty, new style.StylePropertyChangedHandler(flexboxGuard(function(flexbox, newValue) {
return flexbox._setNativeFlexWrap(newValue);
}), flexboxGuard(function(flexbox, newValue) {
return flexbox._setNativeFlexWrap(FlexWrap.NOWRAP);
})), "FlexboxLayout");
style.registerHandler(exports.justifyContentProperty, new style.StylePropertyChangedHandler(flexboxGuard(function(flexbox, newValue) {
return flexbox._setNativeJustifyContent(newValue);
}), flexboxGuard(function(flexbox, newValue) {
return flexbox._setNativeJustifyContent(JustifyContent.FLEX_START);
})), "FlexboxLayout");
style.registerHandler(exports.alignItemsProperty, new style.StylePropertyChangedHandler(flexboxGuard(function(flexbox, newValue) {
return flexbox._setNativeAlignItems(newValue);
}), flexboxGuard(function(flexbox, newValue) {
return flexbox._setNativeAlignItems(AlignItems.STRETCH);
})), "FlexboxLayout");
style.registerHandler(exports.alignContentProperty, new style.StylePropertyChangedHandler(flexboxGuard(function(flexbox, newValue) {
return flexbox._setNativeAlignContent(newValue);
}), flexboxGuard(function(flexbox, newValue) {
return flexbox._setNativeAlignContent(AlignContent.STRETCH);
})), "FlexboxLayout");
style.registerHandler(exports.orderProperty, new style.StylePropertyChangedHandler(function(view, value) {
return flexbox._onNativeOrderPropertyChanged(view, value);
}, function(view, value) {
return flexbox._onNativeOrderPropertyChanged(view, 1);
}), "View");
style.registerHandler(exports.flexGrowProperty, new style.StylePropertyChangedHandler(function(view, value) {
return flexbox._onNativeFlexGrowPropertyChanged(view, value);
}, function(view, value) {
return flexbox._onNativeFlexGrowPropertyChanged(view, 0);
}), "View");
style.registerHandler(exports.flexShrinkProperty, new style.StylePropertyChangedHandler(function(view, value) {
return flexbox._onNativeFlexShrinkPropertyChanged(view, value);
}, function(view, value) {
return flexbox._onNativeFlexShrinkPropertyChanged(view, 1);
}), "View");
style.registerHandler(exports.flexWrapBeforeProperty, new style.StylePropertyChangedHandler(function(view, value) {
return flexbox._onNativeFlexWrapBeforePropertyChanged(view, value);
}, function(view, value) {
return flexbox._onNativeFlexWrapBeforePropertyChanged(view, false);
}), "View");
style.registerHandler(exports.alignSelfProperty, new style.StylePropertyChangedHandler(function(view, value) {
return flexbox._onNativeAlignSelfPropertyChanged(view, value);
}, function(view, value) {
return flexbox._onNativeAlignSelfPropertyChanged(view, AlignSelf.AUTO);
}), "View");
styleProperty.registerShorthandCallback("flex-flow", function(value) {
var properties = [];
var trimmed = value && value.trim();
if (trimmed) {
var values = trimmed.split(/\s+/);
if (values.length >= 1 && FlexDirection.isValid(values[0])) {
properties.push({
property: exports.flexDirectionProperty,
value: FlexDirection.parse(values[0])
});
}
if (value.length >= 2 && FlexWrap.isValid(values[1])) {
properties.push({
property: exports.flexWrapProperty,
value: FlexWrap.parse(values[1])
});
}
}
return properties;
});
styleProperty.registerShorthandCallback("flex", function(value) {
var properties = [];
var trimmed = value && value.trim();
if (trimmed) {
var values = trimmed.split(/\s+/);
if (values.length === 1) {
switch (values[0]) {
case "inital":
properties.push({
property: exports.flexGrowProperty,
value: 0
});
properties.push({
property: exports.flexShrinkProperty,
value: 1
});
break;

case "auto":
properties.push({
property: exports.flexGrowProperty,
value: 1
});
properties.push({
property: exports.flexShrinkProperty,
value: 1
});
break;

case "none":
properties.push({
property: exports.flexGrowProperty,
value: 0
});
properties.push({
property: exports.flexShrinkProperty,
value: 0
});
break;

default:
if (FlexGrow.isValid(values[0])) {
properties.push({
property: exports.flexGrowProperty,
value: FlexGrow.parse(values[0])
});
properties.push({
property: exports.flexShrinkProperty,
value: 1
});
}
}
}
if (values.length >= 2) {
if (FlexGrow.isValid(values[0]) && FlexShrink.isValid(values[1])) {
properties.push({
property: exports.flexGrowProperty,
value: FlexGrow.parse(values[0])
});
properties.push({
property: exports.flexShrinkProperty,
value: FlexShrink.parse(values[1])
});
}
}
}
return properties;
});
}, function(module, exports, __webpack_require__) {
var common = __webpack_require__(72);
var LayoutBase = function(_super) {
__extends(LayoutBase, _super);
function LayoutBase() {
_super.apply(this, arguments);
}
LayoutBase.prototype._onClipToBoundsChanged = function(oldValue, newValue) {
console.warn("clipToBounds with value false is not supported on Android. You can use this.android.getParent().setClipChildren(false) as an alternative");
};
return LayoutBase;
}(common.LayoutBase);
exports.LayoutBase = LayoutBase;
}, function(module, exports, __webpack_require__) {
var types = __webpack_require__(14);
var view = __webpack_require__(12);
var dependencyObservable = __webpack_require__(17);
var dependency_observable_1 = __webpack_require__(17);
var proxy_1 = __webpack_require__(41);
var clipToBoundsProperty = new dependency_observable_1.Property("clipToBounds", "LayoutBase", new proxy_1.PropertyMetadata(true, dependencyObservable.PropertyMetadataSettings.None));
function onClipToBoundsPropertyChanged(data) {
var layout = data.object;
layout._onClipToBoundsChanged(data.oldValue, data.newValue);
}
clipToBoundsProperty.metadata.onSetNativeValue = onClipToBoundsPropertyChanged;
var LayoutBase = function(_super) {
__extends(LayoutBase, _super);
function LayoutBase() {
_super.apply(this, arguments);
this._subViews = new Array();
}
LayoutBase.prototype._addChildFromBuilder = function(name, value) {
if (value instanceof view.View) {
this.addChild(value);
}
};
LayoutBase.prototype.getChildrenCount = function() {
return this._subViews.length;
};
Object.defineProperty(LayoutBase.prototype, "_childrenCount", {
get: function() {
return this._subViews.length;
},
enumerable: true,
configurable: true
});
LayoutBase.prototype.getChildAt = function(index) {
return this._subViews[index];
};
LayoutBase.prototype.getChildIndex = function(child) {
return this._subViews.indexOf(child);
};
LayoutBase.prototype.getChildById = function(id) {
return view.getViewById(this, id);
};
LayoutBase.prototype._registerLayoutChild = function(child) {};
LayoutBase.prototype._unregisterLayoutChild = function(child) {};
LayoutBase.prototype.addChild = function(child) {
this._subViews.push(child);
this._addView(child);
this._registerLayoutChild(child);
};
LayoutBase.prototype.insertChild = function(child, atIndex) {
this._subViews.splice(atIndex, 0, child);
this._addView(child, atIndex);
this._registerLayoutChild(child);
};
LayoutBase.prototype.removeChild = function(child) {
this._removeView(child);
var index = this._subViews.indexOf(child);
this._subViews.splice(index, 1);
this._unregisterLayoutChild(child);
};
LayoutBase.prototype.removeChildren = function() {
while (this.getChildrenCount() !== 0) {
this.removeChild(this._subViews[this.getChildrenCount() - 1]);
}
};
Object.defineProperty(LayoutBase.prototype, "padding", {
get: function() {
return this.style.padding;
},
set: function(value) {
this.style.padding = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(LayoutBase.prototype, "paddingTop", {
get: function() {
return this.style.paddingTop;
},
set: function(value) {
this.style.paddingTop = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(LayoutBase.prototype, "paddingRight", {
get: function() {
return this.style.paddingRight;
},
set: function(value) {
this.style.paddingRight = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(LayoutBase.prototype, "paddingBottom", {
get: function() {
return this.style.paddingBottom;
},
set: function(value) {
this.style.paddingBottom = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(LayoutBase.prototype, "paddingLeft", {
get: function() {
return this.style.paddingLeft;
},
set: function(value) {
this.style.paddingLeft = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(LayoutBase.prototype, "clipToBounds", {
get: function() {
return this._getValue(LayoutBase.clipToBoundsProperty);
},
set: function(value) {
this._setValue(LayoutBase.clipToBoundsProperty, value);
},
enumerable: true,
configurable: true
});
LayoutBase.prototype._onClipToBoundsChanged = function(oldValue, newValue) {};
LayoutBase.prototype._childIndexToNativeChildIndex = function(index) {
if (types.isUndefined(index)) {
return undefined;
}
var result = 0;
for (var i = 0; i < index && i < this._subViews.length; i++) {
result += this._subViews[i]._getNativeViewsCount();
}
return result;
};
LayoutBase.prototype._eachChildView = function(callback) {
var i;
var length = this._subViews.length;
var retVal;
for (i = 0; i < length; i++) {
retVal = callback(this._subViews[i]);
if (retVal === false) {
break;
}
}
};
LayoutBase.prototype.eachLayoutChild = function(callback) {
var lastChild = null;
this._eachChildView(function(cv) {
cv._eachLayoutView(function(lv) {
if (lastChild && lastChild._isVisible) {
callback(lastChild, false);
}
lastChild = lv;
});
return true;
});
if (lastChild && lastChild._isVisible) {
callback(lastChild, true);
}
};
LayoutBase.adjustChildrenLayoutParams = function(layoutBase, widthMeasureSpec, heightMeasureSpec) {
for (var i = 0, count = layoutBase.getChildrenCount(); i < count; i++) {
var child = layoutBase.getChildAt(i);
view.View.adjustChildLayoutParams(child, widthMeasureSpec, heightMeasureSpec);
}
};
LayoutBase.restoreOriginalParams = function(layoutBase) {
for (var i = 0, count = layoutBase.getChildrenCount(); i < count; i++) {
var child = layoutBase.getChildAt(i);
view.View.restoreChildOriginalParams(child);
}
};
LayoutBase.clipToBoundsProperty = clipToBoundsProperty;
return LayoutBase;
}(view.CustomLayoutView);
exports.LayoutBase = LayoutBase;
}, function(module, exports, __webpack_require__) {
var app = __webpack_require__(3);
var enums = __webpack_require__(24);
var pageCommon = __webpack_require__(74);
var platform = __webpack_require__(35);
var style = __webpack_require__(15);
var actionBar = __webpack_require__(76);
var gridLayout = __webpack_require__(78);
var colorModule = __webpack_require__(19);
global.moduleMerge(pageCommon, exports);
var trace;
function ensureTrace() {
if (!trace) {
trace = __webpack_require__(16);
}
}
var color;
function ensureColor() {
if (!color) {
color = __webpack_require__(19);
}
}
exports.DIALOG_FRAGMENT_TAG = "dialog";
var SYSTEM_UI_FLAG_LIGHT_STATUS_BAR = 8192;
var STATUS_BAR_LIGHT_BCKG = "#F5F5F5";
var STATUS_BAR_DARK_BCKG = "#66000000";
var DialogFragmentClass;
function ensureDialogFragmentClass() {
if (DialogFragmentClass) {
return;
}
var DialogFragmentClassInner = function(_super) {
__extends(DialogFragmentClassInner, _super);
function DialogFragmentClassInner(_owner, _fullscreen, _shownCallback, _dismissCallback) {
_super.call(this);
this._owner = _owner;
this._fullscreen = _fullscreen;
this._shownCallback = _shownCallback;
this._dismissCallback = _dismissCallback;
return global.__native(this);
}
DialogFragmentClassInner.prototype.onCreateDialog = function(savedInstanceState) {
var dialog = new android.app.Dialog(this._owner._context);
dialog.requestWindowFeature(android.view.Window.FEATURE_NO_TITLE);
this._owner.horizontalAlignment = this._fullscreen ? enums.HorizontalAlignment.stretch : enums.HorizontalAlignment.center;
this._owner.verticalAlignment = this._fullscreen ? enums.VerticalAlignment.stretch : enums.VerticalAlignment.center;
this._owner.actionBarHidden = true;
dialog.setContentView(this._owner._nativeView, this._owner._nativeView.getLayoutParams());
var window = dialog.getWindow();
window.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.TRANSPARENT));
if (this._fullscreen) {
window.setLayout(android.view.ViewGroup.LayoutParams.FILL_PARENT, android.view.ViewGroup.LayoutParams.FILL_PARENT);
}
return dialog;
};
DialogFragmentClassInner.prototype.onStart = function() {
_super.prototype.onStart.call(this);
if (!this._owner.isLoaded) {
this._owner.onLoaded();
}
this._shownCallback();
};
DialogFragmentClassInner.prototype.onDestroyView = function() {
_super.prototype.onDestroyView.call(this);
if (this._owner.isLoaded) {
this._owner.onUnloaded();
}
this._owner._isAddedToNativeVisualTree = false;
this._owner._onDetached(true);
};
DialogFragmentClassInner.prototype.onDismiss = function(dialog) {
_super.prototype.onDismiss.call(this, dialog);
this._dismissCallback();
};
return DialogFragmentClassInner;
}(android.app.DialogFragment);
DialogFragmentClass = DialogFragmentClassInner;
}
var Page = function(_super) {
__extends(Page, _super);
function Page() {
_super.apply(this, arguments);
this._isBackNavigation = false;
}
Object.defineProperty(Page.prototype, "android", {
get: function() {
return this._grid;
},
enumerable: true,
configurable: true
});
Object.defineProperty(Page.prototype, "_nativeView", {
get: function() {
return this._grid;
},
enumerable: true,
configurable: true
});
Page.prototype._createUI = function() {
this._grid = new org.nativescript.widgets.GridLayout(this._context);
this._grid.addRow(new org.nativescript.widgets.ItemSpec(1, org.nativescript.widgets.GridUnitType.auto));
this._grid.addRow(new org.nativescript.widgets.ItemSpec(1, org.nativescript.widgets.GridUnitType.star));
};
Page.prototype._addViewToNativeVisualTree = function(child, atIndex) {
if (this._nativeView && child._nativeView) {
if (child instanceof actionBar.ActionBar) {
gridLayout.GridLayout.setRow(child, 0);
child.horizontalAlignment = enums.HorizontalAlignment.stretch;
child.verticalAlignment = enums.VerticalAlignment.top;
} else {
gridLayout.GridLayout.setRow(child, 1);
}
}
return _super.prototype._addViewToNativeVisualTree.call(this, child, atIndex);
};
Page.prototype._onDetached = function(force) {
var skipDetached = !force && this.frame.android.cachePagesOnNavigate && !this._isBackNavigation;
if (skipDetached) {
ensureTrace();
if (trace.enabled) {
trace.write("Caching " + this, trace.categories.NativeLifecycle);
}
} else {
_super.prototype._onDetached.call(this);
}
};
Page.prototype.onNavigatedFrom = function(isBackNavigation) {
this._isBackNavigation = isBackNavigation;
_super.prototype.onNavigatedFrom.call(this, isBackNavigation);
};
Page.prototype._showNativeModalView = function(parent, context, closeCallback, fullscreen) {
var _this = this;
_super.prototype._showNativeModalView.call(this, parent, context, closeCallback, fullscreen);
if (!this.backgroundColor) {
ensureColor();
this.backgroundColor = new color.Color("White");
}
this._onAttached(parent._context);
this._isAddedToNativeVisualTree = true;
this._syncNativeProperties();
ensureDialogFragmentClass();
this._dialogFragment = new DialogFragmentClass(this, !!fullscreen, function() {
return _this._raiseShownModallyEvent();
}, function() {
return _this.closeModal();
});
_super.prototype._raiseShowingModallyEvent.call(this);
this._dialogFragment.show(parent.frame.android.activity.getFragmentManager(), exports.DIALOG_FRAGMENT_TAG);
};
Page.prototype._hideNativeModalView = function(parent) {
this._dialogFragment.dismissAllowingStateLoss();
this._dialogFragment = null;
parent._modal = undefined;
_super.prototype._hideNativeModalView.call(this, parent);
};
Page.prototype._updateActionBar = function() {
this.actionBar.update();
};
Page.prototype._updateStatusBar = function() {
this._updateStatusBarStyle(this.statusBarStyle);
this._updateStatusBarBackground();
};
Page.prototype._updateStatusBarStyle = function(value) {
if (value && platform.device.sdkVersion >= "23") {
var window = app.android.startActivity.getWindow();
var decorView = window.getDecorView();
if (value === enums.StatusBarStyle.light) {
var nativeColor = new colorModule.Color(STATUS_BAR_LIGHT_BCKG).android;
window.setStatusBarColor(nativeColor);
decorView.setSystemUiVisibility(SYSTEM_UI_FLAG_LIGHT_STATUS_BAR);
} else {
var nativeColor = new colorModule.Color(STATUS_BAR_DARK_BCKG).android;
window.setStatusBarColor(nativeColor);
decorView.setSystemUiVisibility(0);
}
}
};
Page.prototype._updateStatusBarBackground = function() {
if (this.androidStatusBarBackground && platform.device.sdkVersion >= "23") {
var window = app.android.startActivity.getWindow();
var nativeColor = this.androidStatusBarBackground.android;
window.setStatusBarColor(nativeColor);
}
};
return Page;
}(pageCommon.Page);
exports.Page = Page;
var PageStyler = function() {
function PageStyler() {}
PageStyler.setStatusBarStyleProperty = function(v, newValue) {
var page = v;
page._updateStatusBarStyle(newValue);
};
PageStyler.resetStatusBarStyleProperty = function(v, nativeValue) {
var page = v;
page._updateStatusBarStyle(nativeValue);
};
PageStyler.getStatusBarStyleProperty = function(v) {
var page = v;
return page.statusBarStyle;
};
PageStyler.setAndroidStatusBarBackgroundProperty = function(v, newValue) {
if (platform.device.sdkVersion >= "21") {
var window = app.android.startActivity.getWindow();
var nativeColor = new colorModule.Color(newValue).android;
window.setStatusBarColor(nativeColor);
}
};
PageStyler.resetAndroidStatusBarBackgroundProperty = function(v, nativeValue) {
if (platform.device.sdkVersion >= "21") {
var window = app.android.startActivity.getWindow();
var nativeColor = nativeValue instanceof colorModule.Color ? nativeValue.android : new colorModule.Color(nativeValue).android;
window.setStatusBarColor(nativeColor);
}
};
PageStyler.getAndroidStatusBarBackgroundProperty = function(v) {
var page = v;
return page.androidStatusBarBackground;
};
PageStyler.registerHandlers = function() {
style.registerHandler(style.statusBarStyleProperty, new style.StylePropertyChangedHandler(PageStyler.setStatusBarStyleProperty, PageStyler.resetStatusBarStyleProperty, PageStyler.getStatusBarStyleProperty), "Page");
style.registerHandler(style.androidStatusBarBackgroundProperty, new style.StylePropertyChangedHandler(PageStyler.setAndroidStatusBarBackgroundProperty, PageStyler.resetAndroidStatusBarBackgroundProperty, PageStyler.getAndroidStatusBarBackgroundProperty), "Page");
};
return PageStyler;
}();
exports.PageStyler = PageStyler;
PageStyler.registerHandlers();
}, function(module, exports, __webpack_require__) {
var content_view_1 = __webpack_require__(75);
var view = __webpack_require__(12);
var styleScope = __webpack_require__(60);
var action_bar_1 = __webpack_require__(76);
var dependency_observable_1 = __webpack_require__(17);
var style = __webpack_require__(15);
var proxy = __webpack_require__(41);
var types = __webpack_require__(14);
var fs;
function ensureFS() {
if (!fs) {
fs = __webpack_require__(32);
}
}
var frame;
function ensureFrame() {
if (!frame) {
frame = __webpack_require__(10);
}
}
var AffectsLayout = global.android ? dependency_observable_1.PropertyMetadataSettings.None : dependency_observable_1.PropertyMetadataSettings.AffectsLayout;
var backgroundSpanUnderStatusBarProperty = new dependency_observable_1.Property("backgroundSpanUnderStatusBar", "Page", new proxy.PropertyMetadata(false, AffectsLayout));
var statusBarStyleProperty = new dependency_observable_1.Property("statusBarStyle", "Page", new proxy.PropertyMetadata(undefined));
function onStatusBarStylePropertyChanged(data) {
var page = data.object;
if (page.isLoaded) {
page._updateStatusBar();
}
}
statusBarStyleProperty.metadata.onSetNativeValue = onStatusBarStylePropertyChanged;
var androidStatusBarBackgroundProperty = new dependency_observable_1.Property("androidStatusBarBackground", "Page", new proxy.PropertyMetadata(undefined));
var actionBarHiddenProperty = new dependency_observable_1.Property("actionBarHidden", "Page", new proxy.PropertyMetadata(undefined, AffectsLayout));
function onActionBarHiddenPropertyChanged(data) {
var page = data.object;
if (page.isLoaded) {
page._updateActionBar(true);
}
}
actionBarHiddenProperty.metadata.onSetNativeValue = onActionBarHiddenPropertyChanged;
var enableSwipeBackNavigationProperty = new dependency_observable_1.Property("isoSwipeBackNavigationEnabled", "Page", new proxy.PropertyMetadata(true));
function enableSwipeBackNavigationPropertyChanged(data) {
var page = data.object;
if (page.isLoaded) {
page._updateEnableSwipeBackNavigation(data.newValue);
}
}
enableSwipeBackNavigationProperty.metadata.onSetNativeValue = enableSwipeBackNavigationPropertyChanged;
var Page = function(_super) {
__extends(Page, _super);
function Page() {
_super.call(this);
this._styleScope = new styleScope.StyleScope();
this._cssFiles = {};
this.actionBar = new action_bar_1.ActionBar();
}
Page.prototype.onLoaded = function() {
this.style._setValue(style.backgroundColorProperty, "white", dependency_observable_1.ValueSource.Inherited);
this._applyCss();
if (this.actionBarHidden !== undefined) {
this._updateActionBar();
}
this._updateStatusBar();
_super.prototype.onLoaded.call(this);
};
Object.defineProperty(Page.prototype, "backgroundSpanUnderStatusBar", {
get: function() {
return this._getValue(Page.backgroundSpanUnderStatusBarProperty);
},
set: function(value) {
this._setValue(Page.backgroundSpanUnderStatusBarProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(Page.prototype, "statusBarStyle", {
get: function() {
return this.style._getValue(Page.statusBarStyleProperty);
},
set: function(value) {
this.style._setValue(Page.statusBarStyleProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(Page.prototype, "androidStatusBarBackground", {
get: function() {
return this.style.androidStatusBarBackground;
},
set: function(value) {
this.style.androidStatusBarBackground = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(Page.prototype, "actionBarHidden", {
get: function() {
return this._getValue(Page.actionBarHiddenProperty);
},
set: function(value) {
this._setValue(Page.actionBarHiddenProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(Page.prototype, "enableSwipeBackNavigation", {
get: function() {
return this._getValue(Page.iosSwipeBackNavigationEnabledProperty);
},
set: function(value) {
this._setValue(Page.iosSwipeBackNavigationEnabledProperty, value);
},
enumerable: true,
configurable: true
});
Page.prototype._updateActionBar = function(disableNavBarAnimation) {};
Page.prototype._updateStatusBar = function() {};
Page.prototype._updateEnableSwipeBackNavigation = function(hidden) {};
Object.defineProperty(Page.prototype, "navigationContext", {
get: function() {
return this._navigationContext;
},
enumerable: true,
configurable: true
});
Object.defineProperty(Page.prototype, "css", {
get: function() {
if (this._styleScope) {
return this._styleScope.css;
}
return undefined;
},
set: function(value) {
this._styleScope.css = value;
this._refreshCss();
},
enumerable: true,
configurable: true
});
Object.defineProperty(Page.prototype, "actionBar", {
get: function() {
return this._actionBar;
},
set: function(value) {
if (!value) {
throw new Error("ActionBar cannot be null or undefined.");
}
if (this._actionBar !== value) {
if (this._actionBar) {
this._actionBar.page = undefined;
this._removeView(this._actionBar);
}
this._actionBar = value;
this._actionBar.page = this;
this._addView(this._actionBar);
}
},
enumerable: true,
configurable: true
});
Object.defineProperty(Page.prototype, "page", {
get: function() {
return this;
},
enumerable: true,
configurable: true
});
Page.prototype._refreshCss = function() {
if (this._cssApplied) {
this._resetCssValues();
}
this._cssApplied = false;
if (this.isLoaded) {
this._applyCss();
}
};
Page.prototype.addCss = function(cssString) {
this._addCssInternal(cssString, undefined);
};
Page.prototype._addCssInternal = function(cssString, cssFileName) {
this._styleScope.addCss(cssString, cssFileName);
this._refreshCss();
};
Page.prototype.addCssFile = function(cssFileName) {
ensureFS();
if (cssFileName.indexOf("~/") === 0) {
cssFileName = fs.path.join(fs.knownFolders.currentApp().path, cssFileName.replace("~/", ""));
}
if (!this._cssFiles[cssFileName]) {
if (fs.File.exists(cssFileName)) {
var file = fs.File.fromPath(cssFileName);
var text = file.readTextSync();
if (text) {
this._addCssInternal(text, cssFileName);
this._cssFiles[cssFileName] = true;
}
}
}
};
Page.prototype.getKeyframeAnimationWithName = function(animationName) {
return this._styleScope.getKeyframeAnimationWithName(animationName);
};
Object.defineProperty(Page.prototype, "frame", {
get: function() {
return this.parent;
},
enumerable: true,
configurable: true
});
Page.prototype.createNavigatedData = function(eventName, isBackNavigation) {
return {
eventName: eventName,
object: this,
context: this.navigationContext,
isBackNavigation: isBackNavigation
};
};
Page.prototype.onNavigatingTo = function(context, isBackNavigation, bindingContext) {
this._navigationContext = context;
if (!isBackNavigation && !types.isNullOrUndefined(bindingContext)) {
this.bindingContext = bindingContext;
}
this.notify(this.createNavigatedData(Page.navigatingToEvent, isBackNavigation));
};
Page.prototype.onNavigatedTo = function(isBackNavigation) {
this.notify(this.createNavigatedData(Page.navigatedToEvent, isBackNavigation));
};
Page.prototype.onNavigatingFrom = function(isBackNavigation) {
this.notify(this.createNavigatedData(Page.navigatingFromEvent, isBackNavigation));
};
Page.prototype.onNavigatedFrom = function(isBackNavigation) {
this.notify(this.createNavigatedData(Page.navigatedFromEvent, isBackNavigation));
this._navigationContext = undefined;
};
Page.prototype.showModal = function() {
ensureFrame();
if (arguments.length === 0) {
this._showNativeModalView(frame.topmost().currentPage, undefined, undefined, true);
return this;
} else {
var context_1 = arguments[1];
var closeCallback = arguments[2];
var fullscreen = arguments[3];
var page = void 0;
if (arguments[0] instanceof Page) {
page = arguments[0];
} else {
page = frame.resolvePageFromEntry({
moduleName: arguments[0]
});
}
page._showNativeModalView(this, context_1, closeCallback, fullscreen);
return page;
}
};
Page.prototype.closeModal = function() {
if (this._closeModalCallback) {
this._closeModalCallback.apply(undefined, arguments);
}
};
Object.defineProperty(Page.prototype, "modal", {
get: function() {
return this._modal;
},
enumerable: true,
configurable: true
});
Page.prototype._addChildFromBuilder = function(name, value) {
if (value instanceof action_bar_1.ActionBar) {
this.actionBar = value;
} else {
_super.prototype._addChildFromBuilder.call(this, name, value);
}
};
Page.prototype._showNativeModalView = function(parent, context, closeCallback, fullscreen) {
parent._modal = this;
var that = this;
this._modalContext = context;
this._closeModalCallback = function() {
if (that._closeModalCallback) {
that._closeModalCallback = null;
that._modalContext = null;
that._hideNativeModalView(parent);
if (typeof closeCallback === "function") {
closeCallback.apply(undefined, arguments);
}
}
};
};
Page.prototype._hideNativeModalView = function(parent) {};
Page.prototype._raiseShownModallyEvent = function() {
var args = {
eventName: Page.shownModallyEvent,
object: this,
context: this._modalContext,
closeCallback: this._closeModalCallback
};
this.notify(args);
};
Page.prototype._raiseShowingModallyEvent = function() {
var args = {
eventName: Page.showingModallyEvent,
object: this,
context: this._modalContext,
closeCallback: this._closeModalCallback
};
this.notify(args);
};
Page.prototype._getStyleScope = function() {
return this._styleScope;
};
Page.prototype._eachChildView = function(callback) {
_super.prototype._eachChildView.call(this, callback);
callback(this.actionBar);
};
Object.defineProperty(Page.prototype, "_childrenCount", {
get: function() {
return (this.content ? 1 : 0) + (this.actionBar ? 1 : 0);
},
enumerable: true,
configurable: true
});
Page.prototype._applyCss = function() {
if (this._cssApplied) {
return;
}
this._styleScope.ensureSelectors();
var scope = this._styleScope;
var checkSelectors = function(view) {
scope.applySelectors(view);
return true;
};
checkSelectors(this);
view.eachDescendant(this, checkSelectors);
this._cssApplied = true;
};
Page.prototype._resetCssValues = function() {
var resetCssValuesFunc = function(view) {
view.style._resetCssValues();
return true;
};
resetCssValuesFunc(this);
view.eachDescendant(this, resetCssValuesFunc);
};
Page.backgroundSpanUnderStatusBarProperty = backgroundSpanUnderStatusBarProperty;
Page.statusBarStyleProperty = statusBarStyleProperty;
Page.androidStatusBarBackgroundProperty = androidStatusBarBackgroundProperty;
Page.actionBarHiddenProperty = actionBarHiddenProperty;
Page.iosSwipeBackNavigationEnabledProperty = enableSwipeBackNavigationProperty;
Page.navigatingToEvent = "navigatingTo";
Page.navigatedToEvent = "navigatedTo";
Page.navigatingFromEvent = "navigatingFrom";
Page.navigatedFromEvent = "navigatedFrom";
Page.shownModallyEvent = "shownModally";
Page.showingModallyEvent = "showingModally";
return Page;
}(content_view_1.ContentView);
exports.Page = Page;
}, function(module, exports, __webpack_require__) {
var view = __webpack_require__(12);
var utils = __webpack_require__(27);
var ContentView = function(_super) {
__extends(ContentView, _super);
function ContentView() {
_super.apply(this, arguments);
}
Object.defineProperty(ContentView.prototype, "content", {
get: function() {
return this._content;
},
set: function(value) {
var oldView = this._content;
if (this._content) {
this._removeView(this._content);
}
this._content = value;
if (this._content) {
this._addView(this._content);
}
this._onContentChanged(oldView, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(ContentView.prototype, "layoutView", {
get: function() {
var result;
if (this._content) {
var first_1 = true;
this._content._eachLayoutView(function(child) {
if (first_1) {
first_1 = false;
result = child;
} else {
throw new Error("More than one layout child inside a ContentView");
}
});
}
return result;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ContentView.prototype, "_childrenCount", {
get: function() {
if (this._content) {
return 1;
}
return 0;
},
enumerable: true,
configurable: true
});
ContentView.prototype._onContentChanged = function(oldView, newView) {};
ContentView.prototype._addChildFromBuilder = function(name, value) {
if (value instanceof view.View) {
this.content = value;
}
};
ContentView.prototype._eachChildView = function(callback) {
if (this._content) {
callback(this._content);
}
};
ContentView.prototype.onMeasure = function(widthMeasureSpec, heightMeasureSpec) {
view.View.adjustChildLayoutParams(this.layoutView, widthMeasureSpec, heightMeasureSpec);
var result = view.View.measureChild(this, this.layoutView, widthMeasureSpec, heightMeasureSpec);
var width = utils.layout.getMeasureSpecSize(widthMeasureSpec);
var widthMode = utils.layout.getMeasureSpecMode(widthMeasureSpec);
var height = utils.layout.getMeasureSpecSize(heightMeasureSpec);
var heightMode = utils.layout.getMeasureSpecMode(heightMeasureSpec);
var density = utils.layout.getDisplayDensity();
var measureWidth = Math.max(result.measuredWidth, this.minWidth * density);
var measureHeight = Math.max(result.measuredHeight, this.minHeight * density);
var widthAndState = view.View.resolveSizeAndState(measureWidth, width, widthMode, 0);
var heightAndState = view.View.resolveSizeAndState(measureHeight, height, heightMode, 0);
this.setMeasuredDimension(widthAndState, heightAndState);
};
ContentView.prototype.onLayout = function(left, top, right, bottom) {
view.View.layoutChild(this, this.layoutView, 0, 0, right - left, bottom - top);
view.View.restoreChildOriginalParams(this.layoutView);
};
return ContentView;
}(view.CustomLayoutView);
exports.ContentView = ContentView;
}, function(module, exports, __webpack_require__) {
var common = __webpack_require__(77);
var types = __webpack_require__(14);
var enums = __webpack_require__(24);
var application = __webpack_require__(3);
var style = __webpack_require__(15);
var R_ID_HOME = 16908332;
var ACTION_ITEM_ID_OFFSET = 1e3;
global.moduleMerge(common, exports);
var trace;
function ensureTrace() {
if (!trace) {
trace = __webpack_require__(16);
}
}
var utils;
function ensureUtils() {
if (!utils) {
utils = __webpack_require__(27);
}
}
var imageSource;
function ensureImageSource() {
if (!imageSource) {
imageSource = __webpack_require__(55);
}
}
var actionItemIdGenerator = ACTION_ITEM_ID_OFFSET;
function generateItemId() {
actionItemIdGenerator++;
return actionItemIdGenerator;
}
var ActionItem = function(_super) {
__extends(ActionItem, _super);
function ActionItem() {
_super.call(this);
this._androidPosition = {
position: enums.AndroidActionItemPosition.actionBar,
systemIcon: undefined
};
this._itemId = generateItemId();
}
Object.defineProperty(ActionItem.prototype, "android", {
get: function() {
return this._androidPosition;
},
set: function(value) {
throw new Error("ActionItem.android is read-only");
},
enumerable: true,
configurable: true
});
ActionItem.prototype._getItemId = function() {
return this._itemId;
};
return ActionItem;
}(common.ActionItem);
exports.ActionItem = ActionItem;
var AndroidActionBarSettings = function() {
function AndroidActionBarSettings(actionBar) {
this._iconVisibility = enums.AndroidActionBarIconVisibility.auto;
this._actionBar = actionBar;
}
Object.defineProperty(AndroidActionBarSettings.prototype, "icon", {
get: function() {
return this._icon;
},
set: function(value) {
if (value !== this._icon) {
this._icon = value;
this._actionBar._onIconPropertyChanged();
}
},
enumerable: true,
configurable: true
});
Object.defineProperty(AndroidActionBarSettings.prototype, "iconVisibility", {
get: function() {
return this._iconVisibility;
},
set: function(value) {
if (value !== this._iconVisibility) {
this._iconVisibility = value;
this._actionBar._onIconPropertyChanged();
}
},
enumerable: true,
configurable: true
});
return AndroidActionBarSettings;
}();
exports.AndroidActionBarSettings = AndroidActionBarSettings;
var NavigationButton = function(_super) {
__extends(NavigationButton, _super);
function NavigationButton() {
_super.apply(this, arguments);
}
return NavigationButton;
}(ActionItem);
exports.NavigationButton = NavigationButton;
var ActionBar = function(_super) {
__extends(ActionBar, _super);
function ActionBar() {
_super.call(this);
this._appResources = application.android.context.getResources();
this._android = new AndroidActionBarSettings(this);
}
Object.defineProperty(ActionBar.prototype, "android", {
get: function() {
return this._android;
},
set: function(value) {
throw new Error("ActionBar.android is read-only");
},
enumerable: true,
configurable: true
});
Object.defineProperty(ActionBar.prototype, "_nativeView", {
get: function() {
return this._toolbar;
},
enumerable: true,
configurable: true
});
ActionBar.prototype._createUI = function() {
this._toolbar = new android.support.v7.widget.Toolbar(this._context);
var ownerRef = new WeakRef(this);
this._toolbar.setOnMenuItemClickListener(new android.support.v7.widget.Toolbar.OnMenuItemClickListener({
onMenuItemClick: function(item) {
var ownerValue = ownerRef.get();
if (!ownerValue) {
return false;
}
var itemId = item.getItemId();
return ownerValue._onAndroidItemSelected(itemId);
}
}));
};
ActionBar.prototype.onLoaded = function() {
_super.prototype.onLoaded.call(this);
this.update();
};
ActionBar.prototype.update = function() {
if (!this._toolbar) {
return;
}
if (!this.page.frame || !this.page.frame._getNavBarVisible(this.page)) {
this._toolbar.setVisibility(android.view.View.GONE);
return;
}
this._toolbar.setVisibility(android.view.View.VISIBLE);
this._addActionItems();
this._updateTitleAndTitleView();
this._updateIcon();
this._updateNavigationButton();
};
ActionBar.prototype._onAndroidItemSelected = function(itemId) {
if (this.navigationButton && itemId === R_ID_HOME) {
this.navigationButton._raiseTap();
return true;
}
var menuItem = undefined;
var items = this.actionItems.getItems();
for (var i = 0; i < items.length; i++) {
if (items[i]._getItemId() === itemId) {
menuItem = items[i];
break;
}
}
if (menuItem) {
menuItem._raiseTap();
return true;
}
return false;
};
ActionBar.prototype._updateNavigationButton = function() {
var navButton = this.navigationButton;
if (navButton && common.isVisible(navButton)) {
if (navButton.android.systemIcon) {
var systemResourceId = getSystemResourceId(navButton.android.systemIcon);
if (systemResourceId) {
this._toolbar.setNavigationIcon(systemResourceId);
}
} else if (navButton.icon) {
var drawableOrId = getDrawableOrResourceId(navButton.icon, this._appResources);
this._toolbar.setNavigationIcon(drawableOrId);
}
var navBtn_1 = new WeakRef(navButton);
this._toolbar.setNavigationOnClickListener(new android.view.View.OnClickListener({
onClick: function(v) {
var owner = navBtn_1.get();
if (owner) {
owner._raiseTap();
}
}
}));
} else {
this._toolbar.setNavigationIcon(null);
}
};
ActionBar.prototype._updateIcon = function() {
var visibility = getIconVisibility(this.android.iconVisibility);
if (visibility) {
var icon = this.android.icon;
if (types.isDefined(icon)) {
var drawableOrId = getDrawableOrResourceId(icon, this._appResources);
if (drawableOrId) {
this._toolbar.setLogo(drawableOrId);
}
} else {
var defaultIcon = application.android.nativeApp.getApplicationInfo().icon;
this._toolbar.setLogo(defaultIcon);
}
} else {
this._toolbar.setLogo(null);
}
};
ActionBar.prototype._updateTitleAndTitleView = function() {
if (!this.titleView) {
var title = this.title;
if (types.isDefined(title)) {
this._toolbar.setTitle(title);
} else {
var appContext = application.android.context;
var appInfo = appContext.getApplicationInfo();
var appLabel = appContext.getPackageManager().getApplicationLabel(appInfo);
if (appLabel) {
this._toolbar.setTitle(appLabel);
}
}
}
};
ActionBar.prototype._addActionItems = function() {
var menu = this._toolbar.getMenu();
var items = this.actionItems.getVisibleItems();
menu.clear();
for (var i = 0; i < items.length; i++) {
var item = items[i];
var menuItem = menu.add(android.view.Menu.NONE, item._getItemId(), android.view.Menu.NONE, item.text + "");
if (item.actionView && item.actionView.android) {
item.android.position = enums.AndroidActionItemPosition.actionBar;
menuItem.setActionView(item.actionView.android);
ActionBar._setOnClickListener(item);
} else if (item.android.systemIcon) {
var systemResourceId = getSystemResourceId(item.android.systemIcon);
if (systemResourceId) {
menuItem.setIcon(systemResourceId);
}
} else if (item.icon) {
var drawableOrId = getDrawableOrResourceId(item.icon, this._appResources);
if (drawableOrId) {
menuItem.setIcon(drawableOrId);
} else {
throw new Error("Error loading icon from " + item.icon);
}
}
var showAsAction = getShowAsAction(item);
menuItem.setShowAsAction(showAsAction);
}
};
ActionBar._setOnClickListener = function(item) {
item.actionView.android.setOnClickListener(new android.view.View.OnClickListener({
onClick: function(v) {
item._raiseTap();
}
}));
};
ActionBar.prototype._onTitlePropertyChanged = function() {
if (this._toolbar) {
this._updateTitleAndTitleView();
}
};
ActionBar.prototype._onIconPropertyChanged = function() {
if (this._toolbar) {
this._updateIcon();
}
};
ActionBar.prototype._clearAndroidReference = function() {
this._toolbar = undefined;
};
ActionBar.prototype._addViewToNativeVisualTree = function(child, atIndex) {
_super.prototype._addViewToNativeVisualTree.call(this, child);
if (this._toolbar && child._nativeView) {
if (types.isNullOrUndefined(atIndex) || atIndex >= this._nativeView.getChildCount()) {
this._toolbar.addView(child._nativeView);
} else {
this._toolbar.addView(child._nativeView, atIndex);
}
return true;
}
return false;
};
ActionBar.prototype._removeViewFromNativeVisualTree = function(child) {
_super.prototype._removeViewFromNativeVisualTree.call(this, child);
if (this._toolbar && child._nativeView) {
this._toolbar.removeView(child._nativeView);
ensureTrace();
trace.notifyEvent(child, "childInLayoutRemovedFromNativeVisualTree");
}
};
return ActionBar;
}(common.ActionBar);
exports.ActionBar = ActionBar;
function getDrawableOrResourceId(icon, resources) {
if (!types.isString(icon)) {
return undefined;
}
ensureUtils();
if (icon.indexOf(utils.RESOURCE_PREFIX) === 0) {
var resourceId = resources.getIdentifier(icon.substr(utils.RESOURCE_PREFIX.length), "drawable", application.android.packageName);
if (resourceId > 0) {
return resourceId;
}
} else {
var drawable;
ensureImageSource();
var is = imageSource.fromFileOrResource(icon);
if (is) {
drawable = new android.graphics.drawable.BitmapDrawable(is.android);
}
return drawable;
}
return undefined;
}
function getShowAsAction(menuItem) {
switch (menuItem.android.position) {
case enums.AndroidActionItemPosition.actionBarIfRoom:
return android.view.MenuItem.SHOW_AS_ACTION_IF_ROOM;

case enums.AndroidActionItemPosition.popup:
return android.view.MenuItem.SHOW_AS_ACTION_NEVER;

case enums.AndroidActionItemPosition.actionBar:
default:
return android.view.MenuItem.SHOW_AS_ACTION_ALWAYS;
}
}
function getIconVisibility(iconVisibility) {
switch (iconVisibility) {
case enums.AndroidActionBarIconVisibility.always:
return true;

case enums.AndroidActionBarIconVisibility.auto:
case enums.AndroidActionBarIconVisibility.never:
default:
return false;
}
}
function getSystemResourceId(systemIcon) {
return android.content.res.Resources.getSystem().getIdentifier(systemIcon, "drawable", "android");
}
var ActionBarStyler = function() {
function ActionBarStyler() {}
ActionBarStyler.setColorProperty = function(v, newValue) {
var toolbar = v._nativeView;
toolbar.setTitleTextColor(newValue);
};
ActionBarStyler.resetColorProperty = function(v, nativeValue) {
if (types.isNullOrUndefined(nativeValue)) {
nativeValue = android.graphics.Color.BLACK;
}
v._nativeView.setTitleTextColor(nativeValue);
};
ActionBarStyler.getBackgroundColorProperty = function(view) {
var toolbar = view._nativeView;
return toolbar.getBackground();
};
ActionBarStyler.setBackgroundColorProperty = function(v, newValue) {
var toolbar = v._nativeView;
if (toolbar) {
toolbar.setBackgroundColor(newValue);
}
};
ActionBarStyler.resetBackgroundColorProperty = function(v, nativeValue) {
var toolbar = v._nativeView;
if (toolbar) {
toolbar.setBackgroundColor(nativeValue);
}
};
ActionBarStyler.registerHandlers = function() {
style.registerHandler(style.colorProperty, new style.StylePropertyChangedHandler(ActionBarStyler.setColorProperty, ActionBarStyler.resetColorProperty), "ActionBar");
style.registerHandler(style.backgroundColorProperty, new style.StylePropertyChangedHandler(ActionBarStyler.setBackgroundColorProperty, ActionBarStyler.resetBackgroundColorProperty, ActionBarStyler.getBackgroundColorProperty), "ActionBar");
};
return ActionBarStyler;
}();
exports.ActionBarStyler = ActionBarStyler;
ActionBarStyler.registerHandlers();
}, function(module, exports, __webpack_require__) {
var dts = __webpack_require__(76);
var bindable = __webpack_require__(42);
var dependencyObservable = __webpack_require__(17);
var enums = __webpack_require__(24);
var proxy = __webpack_require__(41);
var view = __webpack_require__(12);
var ACTION_ITEMS = "actionItems";
var style;
function ensureStyle() {
if (!style) {
style = __webpack_require__(15);
}
}
var knownCollections;
(function(knownCollections) {
knownCollections.actionItems = "actionItems";
})(knownCollections = exports.knownCollections || (exports.knownCollections = {}));
function onTitlePropertyChanged(data) {
var actionBar = data.object;
actionBar._onTitlePropertyChanged();
}
var ActionBar = function(_super) {
__extends(ActionBar, _super);
function ActionBar() {
_super.call(this);
this._actionItems = new ActionItems(this);
}
Object.defineProperty(ActionBar.prototype, "title", {
get: function() {
return this._getValue(ActionBar.titleProperty);
},
set: function(value) {
this._setValue(ActionBar.titleProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(ActionBar.prototype, "navigationButton", {
get: function() {
return this._navigationButton;
},
set: function(value) {
if (this._navigationButton !== value) {
if (this._navigationButton) {
this._navigationButton.actionBar = undefined;
}
this._navigationButton = value;
if (this._navigationButton) {
this._navigationButton.actionBar = this;
}
this.update();
}
},
enumerable: true,
configurable: true
});
Object.defineProperty(ActionBar.prototype, "actionItems", {
get: function() {
return this._actionItems;
},
set: function(value) {
throw new Error("actionItems property is read-only");
},
enumerable: true,
configurable: true
});
Object.defineProperty(ActionBar.prototype, "titleView", {
get: function() {
return this._titleView;
},
set: function(value) {
if (this._titleView !== value) {
ensureStyle();
if (this._titleView) {
this._removeView(this._titleView);
this._titleView.style._resetValue(style.horizontalAlignmentProperty, dependencyObservable.ValueSource.Inherited);
this._titleView.style._resetValue(style.verticalAlignmentProperty, dependencyObservable.ValueSource.Inherited);
}
this._titleView = value;
if (this._titleView) {
this._titleView.style._setValue(style.horizontalAlignmentProperty, enums.HorizontalAlignment.center, dependencyObservable.ValueSource.Inherited);
this._titleView.style._setValue(style.verticalAlignmentProperty, enums.VerticalAlignment.center, dependencyObservable.ValueSource.Inherited);
this._addView(this._titleView);
}
this.update();
}
},
enumerable: true,
configurable: true
});
Object.defineProperty(ActionBar.prototype, "page", {
get: function() {
return this._page;
},
set: function(value) {
this._page = value;
this.unbind("bindingContext");
this.bind({
sourceProperty: "bindingContext",
targetProperty: "bindingContext"
}, this._page);
},
enumerable: true,
configurable: true
});
Object.defineProperty(ActionBar.prototype, "android", {
get: function() {
return undefined;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ActionBar.prototype, "_childrenCount", {
get: function() {
var actionViewsCount = 0;
this._actionItems.getItems().forEach(function(actionItem) {
if (actionItem.actionView) {
actionViewsCount++;
}
});
return actionViewsCount + (this.titleView ? 1 : 0);
},
enumerable: true,
configurable: true
});
ActionBar.prototype.update = function() {};
ActionBar.prototype._onTitlePropertyChanged = function() {};
ActionBar.prototype._addArrayFromBuilder = function(name, value) {
if (name === ACTION_ITEMS) {
this.actionItems.setItems(value);
}
};
ActionBar.prototype._addChildFromBuilder = function(name, value) {
if (value instanceof dts.NavigationButton) {
this.navigationButton = value;
} else if (value instanceof dts.ActionItem) {
this.actionItems.addItem(value);
} else if (value instanceof view.View) {
this.titleView = value;
}
};
ActionBar.prototype._onBindingContextChanged = function(oldValue, newValue) {
_super.prototype._onBindingContextChanged.call(this, oldValue, newValue);
if (this._navigationButton) {
this._navigationButton.bindingContext = newValue;
}
this._actionItems.getItems().forEach(function(item, i, arr) {
item.bindingContext = newValue;
});
};
ActionBar.prototype._eachChildView = function(callback) {
if (this.titleView) {
callback(this.titleView);
}
this.actionItems.getItems().forEach(function(actionItem) {
if (actionItem.actionView) {
callback(actionItem.actionView);
}
});
};
ActionBar.prototype._isEmpty = function() {
if (this.title || this.titleView || this.android && this.android.icon || this.navigationButton || this.actionItems.getItems().length > 0) {
return false;
}
return true;
};
ActionBar.titleProperty = new dependencyObservable.Property("title", "ActionBar", new proxy.PropertyMetadata(undefined, dependencyObservable.PropertyMetadataSettings.None, onTitlePropertyChanged));
return ActionBar;
}(view.View);
exports.ActionBar = ActionBar;
var ActionItems = function() {
function ActionItems(actionBar) {
this._items = new Array();
this._actionBar = actionBar;
}
ActionItems.prototype.addItem = function(item) {
if (!item) {
throw new Error("Cannot add empty item");
}
this._items.push(item);
item.actionBar = this._actionBar;
this.invalidate();
};
ActionItems.prototype.removeItem = function(item) {
if (!item) {
throw new Error("Cannot remove empty item");
}
var itemIndex = this._items.indexOf(item);
if (itemIndex < 0) {
throw new Error("Cannot find item to remove");
}
this._items.splice(itemIndex, 1);
item.actionBar = undefined;
this.invalidate();
};
ActionItems.prototype.getItems = function() {
return this._items.slice();
};
ActionItems.prototype.getVisibleItems = function() {
var visibleItems = [];
this._items.forEach(function(item) {
if (isVisible(item)) {
visibleItems.push(item);
}
});
return visibleItems;
};
ActionItems.prototype.getItemAt = function(index) {
if (index < 0 || index >= this._items.length) {
return undefined;
}
return this._items[index];
};
ActionItems.prototype.setItems = function(items) {
while (this._items.length > 0) {
this.removeItem(this._items[this._items.length - 1]);
}
for (var i = 0; i < items.length; i++) {
this.addItem(items[i]);
}
this.invalidate();
};
ActionItems.prototype.invalidate = function() {
if (this._actionBar) {
this._actionBar.update();
}
};
return ActionItems;
}();
exports.ActionItems = ActionItems;
var ActionItem = function(_super) {
__extends(ActionItem, _super);
function ActionItem() {
_super.apply(this, arguments);
}
Object.defineProperty(ActionItem.prototype, "actionView", {
get: function() {
return this._actionView;
},
set: function(value) {
if (this._actionView !== value) {
ensureStyle();
if (this._actionView && this._actionBar) {
this._actionBar._removeView(this._actionView);
this._actionView.style._resetValue(style.horizontalAlignmentProperty, dependencyObservable.ValueSource.Inherited);
this._actionView.style._resetValue(style.verticalAlignmentProperty, dependencyObservable.ValueSource.Inherited);
}
this._actionView = value;
this._addActionViewToActionBar();
if (this._actionBar) {
this._actionBar.update();
}
}
},
enumerable: true,
configurable: true
});
Object.defineProperty(ActionItem.prototype, "text", {
get: function() {
return this._getValue(ActionItem.textProperty);
},
set: function(value) {
this._setValue(ActionItem.textProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(ActionItem.prototype, "icon", {
get: function() {
return this._getValue(ActionItem.iconProperty);
},
set: function(value) {
this._setValue(ActionItem.iconProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(ActionItem.prototype, "visibility", {
get: function() {
return this._getValue(ActionItem.visibilityProperty);
},
set: function(value) {
this._setValue(ActionItem.visibilityProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(ActionItem.prototype, "actionBar", {
get: function() {
return this._actionBar;
},
set: function(value) {
if (value !== this._actionBar) {
this._actionBar = value;
if (this._actionBar) {
this.bindingContext = this._actionBar.bindingContext;
this._addActionViewToActionBar();
}
}
},
enumerable: true,
configurable: true
});
Object.defineProperty(ActionItem.prototype, "page", {
get: function() {
return this.actionBar ? this.actionBar.page : undefined;
},
enumerable: true,
configurable: true
});
ActionItem.prototype._raiseTap = function() {
this._emit(ActionItem.tapEvent);
};
ActionItem.onItemChanged = function(data) {
var menuItem = data.object;
if (menuItem.actionBar) {
menuItem.actionBar.update();
}
};
ActionItem.prototype._addActionViewToActionBar = function() {
if (this._actionView && !this._actionView._isAddedToNativeVisualTree && this._actionBar) {
ensureStyle();
this._actionView.style._setValue(style.horizontalAlignmentProperty, enums.HorizontalAlignment.center, dependencyObservable.ValueSource.Inherited);
this._actionView.style._setValue(style.verticalAlignmentProperty, enums.VerticalAlignment.center, dependencyObservable.ValueSource.Inherited);
this._actionBar._addView(this._actionView);
}
};
ActionItem.prototype._addChildFromBuilder = function(name, value) {
this.actionView = value;
};
ActionItem.tapEvent = "tap";
ActionItem.textProperty = new dependencyObservable.Property("text", "ActionItem", new dependencyObservable.PropertyMetadata("", null, ActionItem.onItemChanged));
ActionItem.iconProperty = new dependencyObservable.Property("icon", "ActionItem", new dependencyObservable.PropertyMetadata(null, null, ActionItem.onItemChanged));
ActionItem.visibilityProperty = new dependencyObservable.Property("visibility", "ActionItem", new dependencyObservable.PropertyMetadata(enums.Visibility.visible, null, ActionItem.onItemChanged));
return ActionItem;
}(bindable.Bindable);
exports.ActionItem = ActionItem;
function isVisible(item) {
return item.visibility === enums.Visibility.visible;
}
exports.isVisible = isVisible;
}, function(module, exports, __webpack_require__) {
var utils = __webpack_require__(27);
var common = __webpack_require__(79);
var view_1 = __webpack_require__(12);
global.moduleMerge(common, exports);
function setNativeProperty(data, setter) {
var view = data.object;
if (view instanceof view_1.View) {
var nativeView = view._nativeView;
var lp = nativeView.getLayoutParams() || new org.nativescript.widgets.CommonLayoutParams();
if (lp instanceof org.nativescript.widgets.CommonLayoutParams) {
setter(lp);
nativeView.setLayoutParams(lp);
}
}
}
function setNativeRowProperty(data) {
setNativeProperty(data, function(lp) {
lp.row = data.newValue;
});
}
function setNativeRowSpanProperty(data) {
setNativeProperty(data, function(lp) {
lp.rowSpan = data.newValue;
});
}
function setNativeColumnProperty(data) {
setNativeProperty(data, function(lp) {
lp.column = data.newValue;
});
}
function setNativeColumnSpanProperty(data) {
setNativeProperty(data, function(lp) {
lp.columnSpan = data.newValue;
});
}
common.GridLayout.rowProperty.metadata.onSetNativeValue = setNativeRowProperty;
common.GridLayout.rowSpanProperty.metadata.onSetNativeValue = setNativeRowSpanProperty;
common.GridLayout.columnProperty.metadata.onSetNativeValue = setNativeColumnProperty;
common.GridLayout.columnSpanProperty.metadata.onSetNativeValue = setNativeColumnSpanProperty;
function createNativeSpec(itemSpec) {
switch (itemSpec.gridUnitType) {
case common.GridUnitType.auto:
return new org.nativescript.widgets.ItemSpec(itemSpec.value, org.nativescript.widgets.GridUnitType.auto);

case common.GridUnitType.star:
return new org.nativescript.widgets.ItemSpec(itemSpec.value, org.nativescript.widgets.GridUnitType.star);

case common.GridUnitType.pixel:
return new org.nativescript.widgets.ItemSpec(itemSpec.value * utils.layout.getDisplayDensity(), org.nativescript.widgets.GridUnitType.pixel);

default:
throw new Error("Invalid gridUnitType: " + itemSpec.gridUnitType);
}
}
var ItemSpec = function(_super) {
__extends(ItemSpec, _super);
function ItemSpec() {
_super.apply(this, arguments);
}
Object.defineProperty(ItemSpec.prototype, "actualLength", {
get: function() {
if (this.nativeSpec) {
return Math.round(this.nativeSpec.getActualLength() / utils.layout.getDisplayDensity());
}
return 0;
},
enumerable: true,
configurable: true
});
return ItemSpec;
}(common.ItemSpec);
exports.ItemSpec = ItemSpec;
var GridLayout = function(_super) {
__extends(GridLayout, _super);
function GridLayout() {
_super.apply(this, arguments);
}
Object.defineProperty(GridLayout.prototype, "android", {
get: function() {
return this._layout;
},
enumerable: true,
configurable: true
});
Object.defineProperty(GridLayout.prototype, "_nativeView", {
get: function() {
return this._layout;
},
enumerable: true,
configurable: true
});
GridLayout.prototype._createUI = function() {
var _this = this;
this._layout = new org.nativescript.widgets.GridLayout(this._context);
this.getRows().forEach(function(itemSpec, index, rows) {
_this._onRowAdded(itemSpec);
}, this);
this.getColumns().forEach(function(itemSpec, index, rows) {
_this._onColumnAdded(itemSpec);
}, this);
};
GridLayout.prototype._onRowAdded = function(itemSpec) {
if (this._layout) {
var nativeSpec = createNativeSpec(itemSpec);
itemSpec.nativeSpec = nativeSpec;
this._layout.addRow(nativeSpec);
}
};
GridLayout.prototype._onColumnAdded = function(itemSpec) {
if (this._layout) {
var nativeSpec = createNativeSpec(itemSpec);
itemSpec.nativeSpec = nativeSpec;
this._layout.addColumn(nativeSpec);
}
};
GridLayout.prototype._onRowRemoved = function(itemSpec, index) {
itemSpec.nativeSpec = null;
if (this._layout) {
this._layout.removeRowAt(index);
}
};
GridLayout.prototype._onColumnRemoved = function(itemSpec, index) {
itemSpec.nativeSpec = null;
if (this._layout) {
this._layout.removeColumnAt(index);
}
};
GridLayout.prototype.invalidate = function() {};
return GridLayout;
}(common.GridLayout);
exports.GridLayout = GridLayout;
}, function(module, exports, __webpack_require__) {
var layout_base_1 = __webpack_require__(71);
var view_1 = __webpack_require__(12);
var bindable_1 = __webpack_require__(42);
var proxy_1 = __webpack_require__(41);
var dependency_observable_1 = __webpack_require__(17);
var special_properties_1 = __webpack_require__(48);
var numberUtils = __webpack_require__(80);
var types;
function ensureTypes() {
if (!types) {
types = __webpack_require__(14);
}
}
function validateArgs(element) {
if (!element) {
throw new Error("element cannot be null or undefinied.");
}
return element;
}
var GridUnitType;
(function(GridUnitType) {
GridUnitType.auto = "auto";
GridUnitType.pixel = "pixel";
GridUnitType.star = "star";
})(GridUnitType = exports.GridUnitType || (exports.GridUnitType = {}));
special_properties_1.registerSpecialProperty("row", function(instance, propertyValue) {
GridLayout.setRow(instance, !isNaN(+propertyValue) && +propertyValue);
});
special_properties_1.registerSpecialProperty("col", function(instance, propertyValue) {
GridLayout.setColumn(instance, !isNaN(+propertyValue) && +propertyValue);
});
special_properties_1.registerSpecialProperty("colSpan", function(instance, propertyValue) {
GridLayout.setColumnSpan(instance, !isNaN(+propertyValue) && +propertyValue);
});
special_properties_1.registerSpecialProperty("rowSpan", function(instance, propertyValue) {
GridLayout.setRowSpan(instance, !isNaN(+propertyValue) && +propertyValue);
});
var ItemSpec = function(_super) {
__extends(ItemSpec, _super);
function ItemSpec() {
_super.call(this);
this._actualLength = 0;
if (arguments.length === 0) {
this._value = 1;
this._unitType = GridUnitType.star;
} else if (arguments.length === 2) {
ensureTypes();
if (types.isNumber(arguments[0]) && types.isString(arguments[1])) {
if (arguments[0] < 0 || arguments[1] !== GridUnitType.auto && arguments[1] !== GridUnitType.star && arguments[1] !== GridUnitType.pixel) {
throw new Error("Invalid values.");
}
this._value = arguments[0];
this._unitType = arguments[1];
} else {
throw new Error("Arguments must be number and string.");
}
} else {
throw new Error("ItemSpec expects 0 or 2 arguments");
}
this.index = -1;
}
ItemSpec.create = function(value, type) {
var spec = new ItemSpec();
spec._value = value;
spec._unitType = type;
return spec;
};
Object.defineProperty(ItemSpec.prototype, "actualLength", {
get: function() {
return this._actualLength;
},
set: function(value) {
throw new Error("actualLength is read-only property");
},
enumerable: true,
configurable: true
});
ItemSpec.equals = function(value1, value2) {
return value1.gridUnitType === value2.gridUnitType && value1.value === value2.value && value1.owner === value2.owner && value1.index === value2.index;
};
Object.defineProperty(ItemSpec.prototype, "gridUnitType", {
get: function() {
return this._unitType;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ItemSpec.prototype, "isAbsolute", {
get: function() {
return this._unitType === GridUnitType.pixel;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ItemSpec.prototype, "isAuto", {
get: function() {
return this._unitType === GridUnitType.auto;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ItemSpec.prototype, "isStar", {
get: function() {
return this._unitType === GridUnitType.star;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ItemSpec.prototype, "value", {
get: function() {
return this._value;
},
enumerable: true,
configurable: true
});
return ItemSpec;
}(bindable_1.Bindable);
exports.ItemSpec = ItemSpec;
var GridLayout = function(_super) {
__extends(GridLayout, _super);
function GridLayout() {
_super.apply(this, arguments);
this._rows = new Array();
this._cols = new Array();
}
GridLayout.getColumn = function(element) {
return validateArgs(element)._getValue(GridLayout.columnProperty);
};
GridLayout.setColumn = function(element, value) {
validateArgs(element)._setValue(GridLayout.columnProperty, value);
};
GridLayout.getColumnSpan = function(element) {
return validateArgs(element)._getValue(GridLayout.columnSpanProperty);
};
GridLayout.setColumnSpan = function(element, value) {
validateArgs(element)._setValue(GridLayout.columnSpanProperty, value);
};
GridLayout.getRow = function(element) {
return validateArgs(element)._getValue(GridLayout.rowProperty);
};
GridLayout.setRow = function(element, value) {
validateArgs(element)._setValue(GridLayout.rowProperty, value);
};
GridLayout.getRowSpan = function(element) {
return validateArgs(element)._getValue(GridLayout.rowSpanProperty);
};
GridLayout.setRowSpan = function(element, value) {
validateArgs(element)._setValue(GridLayout.rowSpanProperty, value);
};
GridLayout.prototype.addRow = function(itemSpec) {
GridLayout.validateItemSpec(itemSpec);
itemSpec.owner = this;
this._rows.push(itemSpec);
this._onRowAdded(itemSpec);
this.invalidate();
};
GridLayout.prototype.addColumn = function(itemSpec) {
GridLayout.validateItemSpec(itemSpec);
itemSpec.owner = this;
this._cols.push(itemSpec);
this._onColumnAdded(itemSpec);
this.invalidate();
};
GridLayout.prototype.removeRow = function(itemSpec) {
if (!itemSpec) {
throw new Error("Value is null.");
}
var index = this._rows.indexOf(itemSpec);
if (itemSpec.owner !== this || index < 0) {
throw new Error("Row is not child of this GridLayout");
}
itemSpec.index = -1;
this._rows.splice(index, 1);
this._onRowRemoved(itemSpec, index);
this.invalidate();
};
GridLayout.prototype.removeColumn = function(itemSpec) {
if (!itemSpec) {
throw new Error("Value is null.");
}
var index = this._cols.indexOf(itemSpec);
if (itemSpec.owner !== this || index < 0) {
throw new Error("Column is not child of this GridLayout");
}
itemSpec.index = -1;
this._cols.splice(index, 1);
this._onColumnRemoved(itemSpec, index);
this.invalidate();
};
GridLayout.prototype.removeColumns = function() {
for (var i = this._cols.length - 1; i >= 0; i--) {
var colSpec = this._cols[i];
this._onColumnRemoved(colSpec, i);
colSpec.index = -1;
}
this._cols.length = 0;
this.invalidate();
};
GridLayout.prototype.removeRows = function() {
for (var i = this._rows.length - 1; i >= 0; i--) {
var rowSpec = this._rows[i];
this._onRowRemoved(rowSpec, i);
rowSpec.index = -1;
}
this._rows.length = 0;
this.invalidate();
};
GridLayout.prototype.onRowChanged = function(element, oldValue, newValue) {
this.invalidate();
};
GridLayout.prototype.onRowSpanChanged = function(element, oldValue, newValue) {
this.invalidate();
};
GridLayout.prototype.onColumnChanged = function(element, oldValue, newValue) {
this.invalidate();
};
GridLayout.prototype.onColumnSpanChanged = function(element, oldValue, newValue) {
this.invalidate();
};
GridLayout.prototype._onRowAdded = function(itemSpec) {};
GridLayout.prototype._onColumnAdded = function(itemSpec) {};
GridLayout.prototype._onRowRemoved = function(itemSpec, index) {};
GridLayout.prototype._onColumnRemoved = function(itemSpec, index) {};
GridLayout.prototype.getColumns = function() {
return this._cols.slice();
};
GridLayout.prototype.getRows = function() {
return this._rows.slice();
};
Object.defineProperty(GridLayout.prototype, "columnsInternal", {
get: function() {
return this._cols;
},
enumerable: true,
configurable: true
});
Object.defineProperty(GridLayout.prototype, "rowsInternal", {
get: function() {
return this._rows;
},
enumerable: true,
configurable: true
});
GridLayout.prototype.invalidate = function() {
this.requestLayout();
};
GridLayout.prototype._applyXmlAttribute = function(attributeName, attributeValue) {
if (attributeName === "columns") {
this._setColumns(attributeValue);
return true;
} else if (attributeName === "rows") {
this._setRows(attributeValue);
return true;
}
return _super.prototype._applyXmlAttribute.call(this, attributeName, attributeValue);
};
GridLayout.parseItemSpecs = function(value) {
var result = new Array();
var arr = value.split(/[\s,]+/);
for (var i = 0; i < arr.length; i++) {
var str = arr[i].trim();
if (str.length > 0) {
result.push(GridLayout.convertGridLength(arr[i].trim()));
}
}
return result;
};
GridLayout.convertGridLength = function(value) {
if (value === "auto") {
return ItemSpec.create(1, GridUnitType.auto);
} else if (value.indexOf("*") !== -1) {
var starCount = parseInt(value.replace("*", "") || "1");
return ItemSpec.create(starCount, GridUnitType.star);
} else if (!isNaN(parseInt(value))) {
return ItemSpec.create(parseInt(value), GridUnitType.pixel);
} else {
throw new Error("Cannot parse item spec from string: " + value);
}
};
GridLayout.onRowPropertyChanged = function(data) {
var element = GridLayout.getView(data.object);
var grid = element.parent;
if (grid instanceof GridLayout) {
grid.onRowChanged(element, data.oldValue, data.newValue);
}
};
GridLayout.onColumnPropertyChanged = function(data) {
var element = GridLayout.getView(data.object);
var grid = element.parent;
if (grid instanceof GridLayout) {
grid.onColumnChanged(element, data.oldValue, data.newValue);
}
};
GridLayout.onRowSpanPropertyChanged = function(data) {
var element = GridLayout.getView(data.object);
var grid = element.parent;
if (grid instanceof GridLayout) {
grid.onRowSpanChanged(element, data.oldValue, data.newValue);
}
};
GridLayout.onColumnSpanPropertyChanged = function(data) {
var element = GridLayout.getView(data.object);
var grid = element.parent;
if (grid instanceof GridLayout) {
grid.onColumnSpanChanged(element, data.oldValue, data.newValue);
}
};
GridLayout.validateItemSpec = function(itemSpec) {
if (!itemSpec) {
throw new Error("Value cannot be undefined.");
}
if (itemSpec.owner) {
throw new Error("itemSpec is already added to GridLayout.");
}
};
GridLayout.getView = function(object) {
if (object instanceof view_1.View) {
return object;
}
throw new Error("Element is not View or its descendant.");
};
GridLayout.prototype._setColumns = function(value) {
this.removeColumns();
var columns = GridLayout.parseItemSpecs(value);
for (var i = 0, count = columns.length; i < count; i++) {
this.addColumn(columns[i]);
}
};
GridLayout.prototype._setRows = function(value) {
this.removeRows();
var rows = GridLayout.parseItemSpecs(value);
for (var i = 0, count = rows.length; i < count; i++) {
this.addRow(rows[i]);
}
};
GridLayout.columnProperty = new dependency_observable_1.Property("Column", "GridLayout", new proxy_1.PropertyMetadata(0, dependency_observable_1.PropertyMetadataSettings.None, GridLayout.onColumnPropertyChanged, numberUtils.notNegative));
GridLayout.columnSpanProperty = new dependency_observable_1.Property("ColumnSpan", "GridLayout", new proxy_1.PropertyMetadata(1, dependency_observable_1.PropertyMetadataSettings.None, GridLayout.onColumnSpanPropertyChanged, numberUtils.greaterThanZero));
GridLayout.rowProperty = new dependency_observable_1.Property("Row", "GridLayout", new proxy_1.PropertyMetadata(0, dependency_observable_1.PropertyMetadataSettings.None, GridLayout.onRowPropertyChanged, numberUtils.notNegative));
GridLayout.rowSpanProperty = new dependency_observable_1.Property("RowSpan", "GridLayout", new proxy_1.PropertyMetadata(1, dependency_observable_1.PropertyMetadataSettings.None, GridLayout.onRowSpanPropertyChanged, numberUtils.greaterThanZero));
return GridLayout;
}(layout_base_1.LayoutBase);
exports.GridLayout = GridLayout;
}, function(module, exports) {
var epsilon = 1e-5;
function areClose(value1, value2) {
return Math.abs(value1 - value2) < epsilon;
}
exports.areClose = areClose;
function greaterThanOrClose(value1, value2) {
return value1 > value2 || areClose(value1, value2);
}
exports.greaterThanOrClose = greaterThanOrClose;
function greaterThan(value1, value2) {
return value1 > value2 && !areClose(value1, value2);
}
exports.greaterThan = greaterThan;
function lessThan(value1, value2) {
return value1 < value2 && !areClose(value1, value2);
}
exports.lessThan = lessThan;
function isZero(value) {
return Math.abs(value) < epsilon;
}
exports.isZero = isZero;
function greaterThanZero(value) {
return value > 0;
}
exports.greaterThanZero = greaterThanZero;
function notNegative(value) {
return value >= 0;
}
exports.notNegative = notNegative;
}, function(module, exports, __webpack_require__) {
var fs = __webpack_require__(32);
var types = __webpack_require__(14);
var trace = __webpack_require__(16);
var platform = __webpack_require__(35);
var MIN_WH = "minWH";
var MIN_W = "minW";
var MIN_H = "minH";
var PRIORITY_STEP = 1e4;
var minWidthHeightQualifier = {
isMatch: function(value) {
return value.indexOf(MIN_WH) === 0;
},
getMatchValue: function(value, context) {
var numVal = parseInt(value.substr(MIN_WH.length));
if (isNaN(numVal)) {
return -1;
}
var actualLength = Math.min(context.width, context.height);
if (actualLength < numVal) {
return -1;
}
return PRIORITY_STEP - (actualLength - numVal);
}
};
var minWidthQualifier = {
isMatch: function(value) {
return value.indexOf(MIN_W) === 0 && value.indexOf(MIN_WH) < 0;
},
getMatchValue: function(value, context) {
var numVal = parseInt(value.substr(MIN_W.length));
if (isNaN(numVal)) {
return -1;
}
var actualWidth = context.width;
if (actualWidth < numVal) {
return -1;
}
return PRIORITY_STEP - (actualWidth - numVal);
}
};
var minHeightQualifier = {
isMatch: function(value) {
return value.indexOf(MIN_H) === 0 && value.indexOf(MIN_WH) < 0;
},
getMatchValue: function(value, context) {
var numVal = parseInt(value.substr(MIN_H.length));
if (isNaN(numVal)) {
return -1;
}
var actualHeight = context.height;
if (actualHeight < numVal) {
return -1;
}
return PRIORITY_STEP - (actualHeight - numVal);
}
};
var platformQualifier = {
isMatch: function(value) {
return value === "android" || value === "ios";
},
getMatchValue: function(value, context) {
return value === context.os.toLowerCase() ? 1 : -1;
}
};
var orientationQualifier = {
isMatch: function(value) {
return value === "land" || value === "port";
},
getMatchValue: function(value, context) {
var isLandscape = context.width > context.height ? 1 : -1;
return value === "land" ? isLandscape : -isLandscape;
}
};
var supportedQualifiers = [ minWidthHeightQualifier, minWidthQualifier, minHeightQualifier, orientationQualifier, platformQualifier ];
var FileNameResolver = function() {
function FileNameResolver(context) {
this._cache = {};
this._context = context;
}
FileNameResolver.prototype.resolveFileName = function(path, ext) {
var key = path + ext;
var result = this._cache[key];
if (types.isUndefined(result)) {
result = this.resolveFileNameImpl(path, ext);
this._cache[key] = result;
}
return result;
};
FileNameResolver.prototype.clearCache = function() {
this._cache = {};
};
FileNameResolver.prototype.resolveFileNameImpl = function(path, ext) {
var result = null;
path = fs.path.normalize(path);
ext = "." + ext;
var candidates = this.getFileCandidatesFromFolder(path, ext);
result = _findFileMatch(path, ext, candidates, this._context);
return result;
};
FileNameResolver.prototype.getFileCandidatesFromFolder = function(path, ext) {
var candidates = new Array();
var folderPath = path.substring(0, path.lastIndexOf(fs.path.separator) + 1);
if (fs.Folder.exists(folderPath)) {
var folder = fs.Folder.fromPath(folderPath);
folder.eachEntity(function(e) {
if (e instanceof fs.File) {
var file = e;
if (file.path.indexOf(path) === 0 && file.extension === ext) {
candidates.push(file.path);
}
}
return true;
});
} else {
if (trace.enabled) {
trace.write("Could not find folder " + folderPath + " when loading " + path + ext, trace.categories.Navigation);
}
}
return candidates;
};
return FileNameResolver;
}();
exports.FileNameResolver = FileNameResolver;
function _findFileMatch(path, ext, candidates, context) {
var bestValue = -1;
var result = null;
for (var i = 0; i < candidates.length; i++) {
var filePath = candidates[i];
var qualifiersStr = filePath.substr(path.length, filePath.length - path.length - ext.length);
var qualifiers = qualifiersStr.split(".");
var value = checkQualifiers(qualifiers, context);
if (value >= 0 && value > bestValue) {
bestValue = value;
result = candidates[i];
}
}
return result;
}
exports._findFileMatch = _findFileMatch;
function checkQualifiers(qualifiers, context) {
var result = 0;
for (var i = 0; i < qualifiers.length; i++) {
if (qualifiers[i]) {
var value = checkQualifier(qualifiers[i], context);
if (value < 0) {
return -1;
}
result += value;
}
}
return result;
}
function checkQualifier(value, context) {
for (var i = 0; i < supportedQualifiers.length; i++) {
if (supportedQualifiers[i].isMatch(value)) {
var result = supportedQualifiers[i].getMatchValue(value, context);
if (result > 0) {
result += (supportedQualifiers.length - i) * PRIORITY_STEP;
}
return result;
}
}
return -1;
}
var resolverInstance;
function resolveFileName(path, ext) {
if (!resolverInstance) {
resolverInstance = new FileNameResolver({
width: platform.screen.mainScreen.widthDIPs,
height: platform.screen.mainScreen.heightDIPs,
os: platform.device.os,
deviceType: platform.device.deviceType
});
}
return resolverInstance.resolveFileName(path, ext);
}
exports.resolveFileName = resolveFileName;
function clearCache() {
if (resolverInstance) {
resolverInstance.clearCache();
}
}
exports.clearCache = clearCache;
function _invalidateResolverInstance() {
resolverInstance = undefined;
}
exports._invalidateResolverInstance = _invalidateResolverInstance;
}, function(module, exports, __webpack_require__) {
var debug_1 = __webpack_require__(67);
var xml = __webpack_require__(83);
var view_1 = __webpack_require__(12);
var file_system_1 = __webpack_require__(32);
var types_1 = __webpack_require__(14);
var component_builder_1 = __webpack_require__(85);
var platform_1 = __webpack_require__(35);
var page_1 = __webpack_require__(73);
var file_name_resolver_1 = __webpack_require__(81);
var defaultNameSpaceMatcher = /tns\.xsd$/i;
var trace;
function ensureTrace() {
if (!trace) {
trace = __webpack_require__(16);
}
}
function parse(value, context) {
if (types_1.isString(value)) {
var viewToReturn;
if (context instanceof view_1.View) {
context = getExports(context);
}
var componentModule = parseInternal(value, context);
if (componentModule) {
viewToReturn = componentModule.component;
}
return viewToReturn;
} else if (types_1.isFunction(value)) {
return value();
}
}
exports.parse = parse;
function parseMultipleTemplates(value, context) {
var dummyComponent = "<ListView><ListView.itemTemplates>" + value + "</ListView.itemTemplates></ListView>";
return parseInternal(dummyComponent, context).component["itemTemplates"];
}
exports.parseMultipleTemplates = parseMultipleTemplates;
function parseInternal(value, context, uri) {
var start;
var ui;
var errorFormat = debug_1.debug && uri ? xml2ui.SourceErrorFormat(uri) : xml2ui.PositionErrorFormat;
var componentSourceTracker = debug_1.debug && uri ? xml2ui.ComponentSourceTracker(uri) : function() {};
(start = new xml2ui.XmlStringParser(errorFormat)).pipe(new xml2ui.PlatformFilter()).pipe(new xml2ui.XmlStateParser(ui = new xml2ui.ComponentParser(context, errorFormat, componentSourceTracker)));
start.parse(value);
return ui.rootComponentModule;
}
function loadCustomComponent(componentPath, componentName, attributes, context, parentPage) {
if (!parentPage && context) {
parentPage = context["_parentPage"];
delete context["_parentPage"];
}
var result;
componentPath = componentPath.replace("~/", "");
var moduleName = componentPath + "/" + componentName;
var fullComponentPathFilePathWithoutExt = componentPath;
if (!file_system_1.File.exists(componentPath) || componentPath === "." || componentPath === "./") {
fullComponentPathFilePathWithoutExt = file_system_1.path.join(file_system_1.knownFolders.currentApp().path, componentPath, componentName);
}
var xmlFilePath = file_name_resolver_1.resolveFileName(fullComponentPathFilePathWithoutExt, "xml");
if (xmlFilePath) {
var jsFilePath = file_name_resolver_1.resolveFileName(fullComponentPathFilePathWithoutExt, "js");
var subExports = context;
if (global.moduleExists(moduleName)) {
subExports = global.loadModule(moduleName);
} else {
if (jsFilePath) {
subExports = global.loadModule(jsFilePath);
}
}
if (!subExports) {
subExports = {};
}
subExports["_parentPage"] = parentPage;
result = loadInternal(xmlFilePath, subExports);
if (types_1.isDefined(result) && types_1.isDefined(result.component) && types_1.isDefined(attributes)) {
var attr;
for (attr in attributes) {
component_builder_1.setPropertyValue(result.component, subExports, context, attr, attributes[attr]);
}
}
} else {
result = component_builder_1.getComponentModule(componentName, componentPath, attributes, context);
}
var cssFilePath = file_name_resolver_1.resolveFileName(fullComponentPathFilePathWithoutExt, "css");
if (cssFilePath) {
if (parentPage) {
parentPage.addCssFile(cssFilePath);
} else {
ensureTrace();
trace.write("CSS file found but no page specified. Please specify page in the options!", trace.categories.Error, trace.messageType.error);
}
}
return result;
}
function load(pathOrOptions, context) {
var viewToReturn;
var componentModule;
if (!context) {
if (!types_1.isString(pathOrOptions)) {
var options = pathOrOptions;
componentModule = loadCustomComponent(options.path, options.name, options.attributes, options.exports, options.page);
} else {
var path_1 = pathOrOptions;
componentModule = loadInternal(path_1);
}
} else {
var path_2 = pathOrOptions;
componentModule = loadInternal(path_2, context);
}
if (componentModule) {
viewToReturn = componentModule.component;
}
return viewToReturn;
}
exports.load = load;
function loadInternal(fileName, context) {
var componentModule;
if (file_system_1.File.exists(fileName)) {
var file = file_system_1.File.fromPath(fileName);
var onError = function(error) {
throw new Error("Error loading file " + fileName + " :" + error.message);
};
var text = file.readTextSync(onError);
componentModule = parseInternal(text, context, fileName);
}
if (componentModule && componentModule.component) {
componentModule.component.exports = context;
}
return componentModule;
}
function getExports(instance) {
var parent = instance.parent;
while (parent && parent.exports === undefined) {
parent = parent.parent;
}
return parent ? parent.exports : undefined;
}
var xml2ui;
(function(xml2ui) {
var XmlProducerBase = function() {
function XmlProducerBase() {}
XmlProducerBase.prototype.pipe = function(next) {
this._next = next;
return next;
};
XmlProducerBase.prototype.next = function(args) {
this._next.parse(args);
};
return XmlProducerBase;
}();
xml2ui.XmlProducerBase = XmlProducerBase;
var XmlStringParser = function(_super) {
__extends(XmlStringParser, _super);
function XmlStringParser(error) {
_super.call(this);
this.error = error || PositionErrorFormat;
}
XmlStringParser.prototype.parse = function(value) {
var _this = this;
var xmlParser = new xml.XmlParser(function(args) {
try {
_this.next(args);
} catch (e) {
throw _this.error(e, args.position);
}
}, function(e, p) {
throw _this.error(e, p);
}, true);
if (types_1.isString(value)) {
xmlParser.parse(value);
}
};
return XmlStringParser;
}(XmlProducerBase);
xml2ui.XmlStringParser = XmlStringParser;
function PositionErrorFormat(e, p) {
return new debug_1.ScopeError(e, "Parsing XML at " + p.line + ":" + p.column);
}
xml2ui.PositionErrorFormat = PositionErrorFormat;
function SourceErrorFormat(uri) {
return function(e, p) {
var source = p ? new debug_1.Source(uri, p.line, p.column) : new debug_1.Source(uri, -1, -1);
e = new debug_1.SourceError(e, source, "Building UI from XML.");
return e;
};
}
xml2ui.SourceErrorFormat = SourceErrorFormat;
function ComponentSourceTracker(uri) {
return function(component, p) {
if (!debug_1.Source.get(component)) {
var source = p ? new debug_1.Source(uri, p.line, p.column) : new debug_1.Source(uri, -1, -1);
debug_1.Source.set(component, source);
}
};
}
xml2ui.ComponentSourceTracker = ComponentSourceTracker;
var PlatformFilter = function(_super) {
__extends(PlatformFilter, _super);
function PlatformFilter() {
_super.apply(this, arguments);
}
PlatformFilter.prototype.parse = function(args) {
if (args.eventType === xml.ParserEventType.StartElement) {
if (PlatformFilter.isPlatform(args.elementName)) {
if (this.currentPlatformContext) {
throw new Error("Already in '" + this.currentPlatformContext + "' platform context and cannot switch to '" + args.elementName + "' platform! Platform tags cannot be nested.");
}
this.currentPlatformContext = args.elementName;
return;
}
}
if (args.eventType === xml.ParserEventType.EndElement) {
if (PlatformFilter.isPlatform(args.elementName)) {
this.currentPlatformContext = undefined;
return;
}
}
if (this.currentPlatformContext && !PlatformFilter.isCurentPlatform(this.currentPlatformContext)) {
return;
}
this.next(args);
};
PlatformFilter.isPlatform = function(value) {
return value && (value.toLowerCase() === platform_1.platformNames.android.toLowerCase() || value.toLowerCase() === platform_1.platformNames.ios.toLowerCase());
};
PlatformFilter.isCurentPlatform = function(value) {
return value && value.toLowerCase() === platform_1.device.os.toLowerCase();
};
return PlatformFilter;
}(XmlProducerBase);
xml2ui.PlatformFilter = PlatformFilter;
var XmlArgsReplay = function(_super) {
__extends(XmlArgsReplay, _super);
function XmlArgsReplay(args, errorFormat) {
_super.call(this);
this.args = args;
this.error = errorFormat;
}
XmlArgsReplay.prototype.replay = function() {
var _this = this;
this.args.forEach(function(args) {
try {
_this.next(args);
} catch (e) {
throw _this.error(e, args.position);
}
});
};
return XmlArgsReplay;
}(XmlProducerBase);
xml2ui.XmlArgsReplay = XmlArgsReplay;
var XmlStateParser = function() {
function XmlStateParser(state) {
this.state = state;
}
XmlStateParser.prototype.parse = function(args) {
this.state = this.state.parse(args);
};
return XmlStateParser;
}();
xml2ui.XmlStateParser = XmlStateParser;
var TemplateParser = function() {
function TemplateParser(parent, templateProperty, setTemplateProperty) {
if (setTemplateProperty === void 0) {
setTemplateProperty = true;
}
this.parent = parent;
this._context = templateProperty.context;
this._recordedXmlStream = new Array();
this._templateProperty = templateProperty;
this._nestingLevel = 0;
this._state = 0;
this._setTemplateProperty = setTemplateProperty;
}
TemplateParser.prototype.parse = function(args) {
if (args.eventType === xml.ParserEventType.StartElement) {
this.parseStartElement(args.prefix, args.namespace, args.elementName, args.attributes);
} else if (args.eventType === xml.ParserEventType.EndElement) {
this.parseEndElement(args.prefix, args.elementName);
}
this._recordedXmlStream.push(args);
return this._state === 2 ? this.parent : this;
};
Object.defineProperty(TemplateParser.prototype, "elementName", {
get: function() {
return this._templateProperty.elementName;
},
enumerable: true,
configurable: true
});
TemplateParser.prototype.parseStartElement = function(prefix, namespace, elementName, attributes) {
if (this._state === 0) {
this._state = 1;
} else if (this._state === 2) {
throw new Error("Template must have exactly one root element but multiple elements were found.");
}
this._nestingLevel++;
};
TemplateParser.prototype.parseEndElement = function(prefix, elementName) {
if (this._state === 0) {
throw new Error("Template must have exactly one root element but none was found.");
} else if (this._state === 2) {
throw new Error("No more closing elements expected for this template.");
}
this._nestingLevel--;
if (this._nestingLevel === 0) {
this._state = 2;
if (this._setTemplateProperty && this._templateProperty.name in this._templateProperty.parent.component) {
var template = this._build();
this._templateProperty.parent.component[this._templateProperty.name] = template;
}
}
};
TemplateParser.prototype._build = function() {
var _this = this;
var context = this._context;
var errorFormat = this._templateProperty.errorFormat;
var sourceTracker = this._templateProperty.sourceTracker;
var template = function() {
var start;
var ui;
(start = new xml2ui.XmlArgsReplay(_this._recordedXmlStream, errorFormat)).pipe(new XmlStateParser(ui = new ComponentParser(context, errorFormat, sourceTracker)));
start.replay();
return ui.rootComponentModule.component;
};
return template;
};
return TemplateParser;
}();
xml2ui.TemplateParser = TemplateParser;
var MultiTemplateParser = function() {
function MultiTemplateParser(parent, templateProperty) {
this.parent = parent;
this.templateProperty = templateProperty;
this._childParsers = new Array();
}
MultiTemplateParser.prototype.parse = function(args) {
if (args.eventType === xml.ParserEventType.StartElement && args.elementName === "template") {
var childParser = new TemplateParser(this, this.templateProperty, false);
childParser["key"] = args.attributes["key"];
this._childParsers.push(childParser);
return childParser;
}
if (args.eventType === xml.ParserEventType.EndElement) {
var name = ComponentParser.getComplexPropertyName(args.elementName);
if (name === this.templateProperty.name) {
var templates = new Array();
for (var i = 0; i < this._childParsers.length; i++) {
templates.push({
key: this._childParsers[i]["key"],
createView: this._childParsers[i]._build()
});
}
this.templateProperty.parent.component[this.templateProperty.name] = templates;
return this.parent;
}
}
return this;
};
return MultiTemplateParser;
}();
xml2ui.MultiTemplateParser = MultiTemplateParser;
var ComponentParser = function() {
function ComponentParser(context, errorFormat, sourceTracker) {
this.parents = new Array();
this.complexProperties = new Array();
this.context = context;
this.error = errorFormat;
this.sourceTracker = sourceTracker;
}
ComponentParser.prototype.parse = function(args) {
var parent = this.parents[this.parents.length - 1];
var complexProperty = this.complexProperties[this.complexProperties.length - 1];
if (args.eventType === xml.ParserEventType.StartElement) {
if (ComponentParser.isComplexProperty(args.elementName)) {
var name = ComponentParser.getComplexPropertyName(args.elementName);
this.complexProperties.push({
parent: parent,
name: name,
items: []
});
if (ComponentParser.isKnownTemplate(name, parent.exports)) {
return new TemplateParser(this, {
context: (parent ? getExports(parent.component) : null) || this.context,
parent: parent,
name: name,
elementName: args.elementName,
templateItems: [],
errorFormat: this.error,
sourceTracker: this.sourceTracker
});
}
if (ComponentParser.isKnownMultiTemplate(name, parent.exports)) {
return new MultiTemplateParser(this, {
context: (parent ? getExports(parent.component) : null) || this.context,
parent: parent,
name: name,
elementName: args.elementName,
templateItems: [],
errorFormat: this.error,
sourceTracker: this.sourceTracker
});
}
} else {
var componentModule;
if (args.prefix && args.namespace) {
componentModule = loadCustomComponent(args.namespace, args.elementName, args.attributes, this.context, this.currentPage);
} else {
var namespace = args.namespace;
if (defaultNameSpaceMatcher.test(namespace || "")) {
namespace = undefined;
}
componentModule = component_builder_1.getComponentModule(args.elementName, namespace, args.attributes, this.context);
}
if (componentModule) {
this.sourceTracker(componentModule.component, args.position);
if (parent) {
if (complexProperty) {
ComponentParser.addToComplexProperty(parent, complexProperty, componentModule);
} else if (parent.component._addChildFromBuilder) {
parent.component._addChildFromBuilder(args.elementName, componentModule.component);
}
} else if (this.parents.length === 0) {
this.rootComponentModule = componentModule;
if (this.rootComponentModule && this.rootComponentModule.component instanceof page_1.Page) {
this.currentPage = this.rootComponentModule.component;
if (this.currentPage.exports) {
this.context = this.currentPage.exports;
}
}
}
this.parents.push(componentModule);
}
}
} else if (args.eventType === xml.ParserEventType.EndElement) {
if (ComponentParser.isComplexProperty(args.elementName)) {
if (complexProperty) {
if (parent && parent.component._addArrayFromBuilder) {
parent.component._addArrayFromBuilder(complexProperty.name, complexProperty.items);
complexProperty.items = [];
}
}
this.complexProperties.pop();
} else {
this.parents.pop();
}
}
return this;
};
ComponentParser.isComplexProperty = function(name) {
return types_1.isString(name) && name.indexOf(".") !== -1;
};
ComponentParser.getComplexPropertyName = function(fullName) {
var name;
if (types_1.isString(fullName)) {
var names = fullName.split(".");
name = names[names.length - 1];
}
return name;
};
ComponentParser.isKnownTemplate = function(name, exports) {
return ComponentParser.KNOWNTEMPLATES in exports && exports[ComponentParser.KNOWNTEMPLATES] && name in exports[ComponentParser.KNOWNTEMPLATES];
};
ComponentParser.isKnownMultiTemplate = function(name, exports) {
return ComponentParser.KNOWNMULTITEMPLATES in exports && exports[ComponentParser.KNOWNMULTITEMPLATES] && name in exports[ComponentParser.KNOWNMULTITEMPLATES];
};
ComponentParser.addToComplexProperty = function(parent, complexProperty, elementModule) {
var parentComponent = parent.component;
if (ComponentParser.isKnownCollection(complexProperty.name, parent.exports)) {
complexProperty.items.push(elementModule.component);
} else if (parentComponent._addChildFromBuilder) {
parentComponent._addChildFromBuilder(complexProperty.name, elementModule.component);
} else {
parentComponent[complexProperty.name] = elementModule.component;
}
};
ComponentParser.isKnownCollection = function(name, context) {
return ComponentParser.KNOWNCOLLECTIONS in context && context[ComponentParser.KNOWNCOLLECTIONS] && name in context[ComponentParser.KNOWNCOLLECTIONS];
};
ComponentParser.KNOWNCOLLECTIONS = "knownCollections";
ComponentParser.KNOWNTEMPLATES = "knownTemplates";
ComponentParser.KNOWNMULTITEMPLATES = "knownMultiTemplates";
return ComponentParser;
}();
xml2ui.ComponentParser = ComponentParser;
})(xml2ui || (xml2ui = {}));
}, function(module, exports, __webpack_require__) {
var easysax = __webpack_require__(84);
var ParserEventType = function() {
function ParserEventType() {}
ParserEventType.StartElement = "StartElement";
ParserEventType.EndElement = "EndElement";
ParserEventType.Text = "Text";
ParserEventType.CDATA = "CDATA";
ParserEventType.Comment = "Comment";
return ParserEventType;
}();
exports.ParserEventType = ParserEventType;
var ParserEvent = function() {
function ParserEvent(eventType, position, prefix, namespace, elementName, attributes, data) {
this._eventType = eventType;
this._position = position;
this._prefix = prefix;
this._namespace = namespace;
this._elementName = elementName;
this._attributes = attributes;
this._data = data;
}
ParserEvent.prototype.toString = function() {
return JSON.stringify({
eventType: this.eventType,
position: this.position,
prefix: this.prefix,
namespace: this.namespace,
elementName: this.elementName,
attributes: this.attributes,
data: this.data
});
};
Object.defineProperty(ParserEvent.prototype, "eventType", {
get: function() {
return this._eventType;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ParserEvent.prototype, "position", {
get: function() {
return this._position;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ParserEvent.prototype, "prefix", {
get: function() {
return this._prefix;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ParserEvent.prototype, "namespace", {
get: function() {
return this._namespace;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ParserEvent.prototype, "elementName", {
get: function() {
return this._elementName;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ParserEvent.prototype, "attributes", {
get: function() {
return this._attributes;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ParserEvent.prototype, "data", {
get: function() {
return this._data;
},
enumerable: true,
configurable: true
});
return ParserEvent;
}();
exports.ParserEvent = ParserEvent;
var _ampCodes;
var _entitySearchRegEx = /&#(\d+);|&#x([0123456789abcdef]+);|&(\w+);/gi;
function _generateAmpMap() {
var objCodes = {
Tab: 9,
NewLine: 10,
excl: 33,
quot: 34,
QUOT: 34,
num: 35,
dollar: 36,
percent: 37,
amp: 38,
AMP: 38,
apos: 39,
lpar: 40,
rpar: 41,
ast: 42,
midast: 42,
plus: 43,
comma: 44,
period: 46,
sol: 47,
colon: 58,
semi: 59,
lt: 60,
LT: 60,
equals: 61,
gt: 62,
GT: 62,
quest: 63,
commat: 64,
lsqb: 91,
lbrack: 91,
bsol: 92,
rsqb: 92,
rbrack: 92,
Hat: 94,
lowbar: 95,
grave: 96,
DiacriticalGrave: 96,
lcub: 123,
lbrace: 123,
verbar: 124,
vert: 124,
VerticalLine: 124,
rcub: 125,
rbrace: 125,
nbsp: 160,
iexcl: 161,
cent: 162,
pound: 163,
curren: 164,
yen: 165,
brvbar: 166,
brkbar: 166,
sect: 167,
uml: 168,
copy: 169,
ordf: 170,
laquo: 171,
not: 172,
shy: 173,
reg: 174,
macr: 175,
hibar: 175,
deg: 176,
plusmn: 177,
sup2: 178,
sup3: 179,
acute: 180,
micro: 181,
para: 182,
middot: 183,
cedil: 184,
sup1: 185,
ordm: 186,
raquo: 187,
frac14: 188,
frac12: 189,
frac34: 190,
iquest: 191,
Agrave: 192,
Aacute: 193,
Acirc: 194,
Atilde: 195,
Auml: 196,
Aring: 197,
AElig: 198,
Ccedil: 199,
Egrave: 200,
Eacute: 201,
Ecirc: 202,
Euml: 203,
Igrave: 204,
Iacute: 205,
Icirc: 206,
Iuml: 207,
ETH: 208,
Dstrok: 208,
Ntilde: 209,
Ograve: 210,
Oacute: 211,
Ocirc: 212,
Otilde: 213,
Ouml: 214,
times: 215,
Oslash: 216,
Ugrave: 217,
Uacute: 218,
Ucirc: 219,
Uuml: 220,
Yacute: 221,
THORN: 222,
szlig: 223,
agrave: 224,
aacute: 225,
acirc: 226,
atilde: 227,
auml: 228,
aring: 229,
aelig: 230,
ccedil: 231,
egrave: 232,
eacute: 233,
ecirc: 234,
euml: 235,
igrave: 236,
iacute: 237,
icirc: 238,
iuml: 239,
eth: 240,
ntilde: 241,
ograve: 242,
oacute: 243,
ocirc: 244,
otilde: 245,
ouml: 246,
divide: 247,
oslash: 248,
ugrave: 249,
uacute: 250,
ucirc: 251,
uuml: 252,
yacute: 253,
thorn: 254,
yuml: 255,
fnof: 402,
imped: 437,
gacute: 501,
jmath: 567,
circ: 710,
caron: 711,
Hacek: 711,
breve: 728,
Breve: 728,
dot: 729,
DiacriticalDot: 729,
ring: 730,
ogon: 731,
tilde: 732,
DiacriticalTilde: 732,
dblac: 733,
DiacriticalDoubleAcute: 733,
DownBreve: 785,
UnderBar: 818,
Alpha: 913,
Beta: 914,
Gamma: 915,
Delta: 916,
Epsilon: 917,
Zeta: 918,
Eta: 919,
Theta: 920,
Iota: 921,
Kappa: 922,
Lambda: 923,
Mu: 924,
Nu: 925,
Xi: 926,
Omicron: 927,
Pi: 928,
Rho: 929,
Sigma: 931,
Tau: 932,
Upsilon: 933,
Phi: 934,
Chi: 935,
Psi: 936,
Omega: 937,
alpha: 945,
beta: 946,
gamma: 947,
delta: 948,
epsilon: 949,
epsiv: 949,
varepsilon: 949,
zeta: 950,
eta: 951,
theta: 952,
iota: 953,
kappa: 954,
lambda: 955,
mu: 956,
nu: 957,
xi: 958,
omicron: 959,
pi: 960,
rho: 961,
sigmaf: 962,
sigmav: 962,
varsigma: 962,
sigma: 963,
tau: 964,
upsilon: 965,
phi: 966,
chi: 967,
psi: 968,
omega: 969,
thetav: 977,
vartheta: 977,
thetasym: 977,
Upsi: 978,
upsih: 978,
straightphi: 981,
piv: 982,
varpi: 982,
Gammad: 988,
gammad: 989,
digamma: 989,
kappav: 1008,
varkappa: 1008,
rhov: 1009,
varrho: 1009,
epsi: 1013,
straightepsilon: 1013,
bepsi: 1014,
backepsilon: 1014,
euro: 8364,
trade: 8482,
TRADE: 8482,
forall: 8704,
part: 8706,
larr: 8592,
rarr: 8593,
hyphen: 8208,
dash: 8208,
ndash: 8211,
mdash: 8212,
horbar: 8213,
Vert: 8214,
Verbar: 8214,
lsquo: 8216,
OpenCurlyQuote: 8216,
rsquo: 8217,
rsquor: 8217,
CloseCurlyQuote: 8217,
lsquor: 8218,
sbquo: 8218,
ldquo: 8220,
OpenCurlyDoubleQuote: 8220,
rdquo: 8221,
rdquor: 8221,
CloseCurlyDoubleQuote: 8221,
ldquor: 8222,
bdquo: 8222,
dagger: 8224,
Dagger: 8225,
ddagger: 8225,
bull: 8226,
bullet: 8226,
nldr: 8229,
hellip: 8230,
mldr: 8230,
hybull: 8259,
tdot: 8411,
TripleDot: 8411,
DotDot: 8412,
star: 9734,
phone: 9742,
spades: 9824,
clubs: 9827,
hearts: 9829,
diams: 9830,
female: 9792,
male: 9794,
check: 10003,
checkmark: 10003,
cross: 10007,
VerticalSeparator: 10072,
EmptySmallSquare: 9723,
FilledSmallSquare: 9724,
starf: 9733,
bigstar: 9733,
square: 9633,
squ: 9633,
Square: 9633
};
var ampCodes = new Map();
for (var key in objCodes) {
if (objCodes.hasOwnProperty(key)) {
ampCodes.set(key, objCodes[key]);
}
}
return ampCodes;
}
if (true) {
_ampCodes = _generateAmpMap();
}
function _HandleAmpEntities(found, decimalValue, hexValue, wordValue) {
if (wordValue) {
if (!_ampCodes) {
_ampCodes = _generateAmpMap();
}
var res = _ampCodes.get(wordValue);
if (res) {
return String.fromCharCode(res);
}
return found;
}
if (decimalValue) {
return String.fromCharCode(parseInt(decimalValue, 10));
}
return String.fromCharCode(parseInt(hexValue, 16));
}
var XmlParser = function() {
function XmlParser(onEvent, onError, processNamespaces) {
this._processNamespaces = processNamespaces;
this._parser = new easysax.EasySAXParser();
var that = this;
this._parser.on("startNode", function(elem, attr, uq, tagend, str, pos) {
var attributes = attr();
if (attributes === true) {
attributes = undefined;
}
if (attributes) {
var key;
for (key in attributes) {
if (attributes.hasOwnProperty(key)) {
attributes[key] = XmlParser._dereferenceEntities(attributes[key]);
}
}
}
var prefix = undefined;
var namespace = undefined;
var name = elem;
if (that._processNamespaces) {
var stackEntry = XmlParser._getNamespacesStackEntry(attributes);
that._namespaceStack.push(stackEntry);
var resolved = that._resolveNamespace(name);
prefix = resolved.prefix;
namespace = resolved.namespace;
name = resolved.name;
}
onEvent(new ParserEvent(ParserEventType.StartElement, pos(), prefix, namespace, name, attributes, undefined));
});
this._parser.on("textNode", function(text, uq, pos) {
var data = uq(XmlParser._dereferenceEntities(text));
onEvent(new ParserEvent(ParserEventType.Text, pos(), undefined, undefined, undefined, undefined, data));
});
this._parser.on("endNode", function(elem, uq, tagstart, str, pos) {
var prefix = undefined;
var namespace = undefined;
var name = elem;
if (that._processNamespaces) {
var resolved = that._resolveNamespace(name);
prefix = resolved.prefix;
namespace = resolved.namespace;
name = resolved.name;
}
onEvent(new ParserEvent(ParserEventType.EndElement, pos(), prefix, namespace, name, undefined, undefined));
if (that._processNamespaces) {
that._namespaceStack.pop();
}
});
this._parser.on("cdata", function(data, res, pos) {
onEvent(new ParserEvent(ParserEventType.CDATA, pos(), undefined, undefined, undefined, undefined, data));
});
this._parser.on("comment", function(text, uq, pos) {
onEvent(new ParserEvent(ParserEventType.Comment, pos(), undefined, undefined, undefined, undefined, text));
});
if (onError) {
this._parser.on("error", function(msg, pos) {
onError(new Error(msg), pos());
});
}
}
Object.defineProperty(XmlParser.prototype, "angularSyntax", {
get: function() {
return this._parser.angularSyntax;
},
set: function(value) {
this._parser.angularSyntax = value;
},
enumerable: true,
configurable: true
});
XmlParser.prototype.parse = function(xmlString) {
if (this._processNamespaces) {
this._namespaceStack = [];
}
this._parser.parse(xmlString);
};
XmlParser._getNamespacesStackEntry = function(attributes) {
var stackEntry = {};
if (!attributes) {
return stackEntry;
}
for (var key in attributes) {
if (!attributes.hasOwnProperty(key)) {
continue;
}
var attributeName = key;
if (attributeName.indexOf("xmlns") !== 0) {
continue;
}
var namespacePrefix = "";
if (attributeName.indexOf(":") !== -1) {
namespacePrefix = attributeName.split(":")[1];
}
stackEntry[namespacePrefix] = attributes[key];
}
return stackEntry;
};
XmlParser.prototype._resolveNamespace = function(fullName) {
var result = {
prefix: undefined,
namespace: undefined,
name: undefined
};
result.prefix = "";
if (fullName.indexOf(":") !== -1) {
var split = fullName.split(":");
result.prefix = split[0];
result.name = split[1];
} else {
result.name = fullName;
}
var i;
var stackEntry;
for (i = this._namespaceStack.length - 1; i >= 0; i--) {
stackEntry = this._namespaceStack[i];
for (var key in stackEntry) {
if (!stackEntry.hasOwnProperty(key)) {
continue;
}
if (result.prefix === key) {
result.namespace = stackEntry[key];
return result;
}
}
}
return result;
};
XmlParser._dereferenceEntities = function(s) {
s = String(s);
if (s.length > 3 && s.indexOf("&") !== -1) {
s = s.replace(_entitySearchRegEx, _HandleAmpEntities);
}
return s;
};
return XmlParser;
}();
exports.XmlParser = XmlParser;
}, function(module, exports, __webpack_require__) {
if (true) {
module.exports.EasySAXParser = EasySAXParser;
}
function EasySAXParser() {
"use strict";
if (!this) return null;
this.angularSyntax = false;
function nullFunc() {}
this.onTextNode = nullFunc;
this.onStartNode = nullFunc;
this.onEndNode = nullFunc;
this.onCDATA = nullFunc;
this.onError = nullFunc;
this.onComment = null;
this.onQuestion = null;
this.onAttention = null;
this.is_onComment = this.is_onQuestion = this.is_onAttention = false;
this.isNamespace = false;
this.useNS = null;
this.default_xmlns = null;
this.xmlns = null;
this.nsmatrix = {
xmlns: this.xmlns
};
this.hasSurmiseNS = false;
this.attr_string = "";
this.attr_posstart = 0;
this.attr_res;
}
EasySAXParser.prototype.on = function(name, cb) {
if (typeof cb !== "function") {
if (cb !== null) return;
}
switch (name) {
case "error":
this.onError = cb || nullFunc;
break;

case "startNode":
this.onStartNode = cb || nullFunc;
break;

case "endNode":
this.onEndNode = cb || nullFunc;
break;

case "textNode":
this.onTextNode = cb || nullFunc;
break;

case "cdata":
this.onCDATA = cb || nullFunc;
break;

case "comment":
this.onComment = cb;
this.is_onComment = !!cb;
break;

case "question":
this.onQuestion = cb;
this.is_onQuestion = !!cb;
break;

case "attention":
this.onAttention = cb;
this.is_onAttention = !!cb;
break;
}
};
EasySAXParser.prototype.ns = function(root, ns) {
if (!root || typeof root !== "string" || !ns) {
return;
}
var u, x = {}, ok, v, i;
for (i in ns) {
v = ns[i];
if (typeof v === "string") {
if (root === v) ok = true;
x[i] = v;
}
}
if (ok) {
this.isNamespace = true;
this.default_xmlns = root;
this.useNS = x;
}
};
EasySAXParser.prototype.parse = function(xml) {
if (typeof xml !== "string") {
return;
}
if (this.isNamespace) {
this.nsmatrix = {
xmlns: this.default_xmlns
};
parse(xml);
this.nsmatrix = false;
} else {
parse(xml);
}
this.attr_res = true;
};
var xharsQuot = {
constructor: false,
hasOwnProperty: false,
isPrototypeOf: false,
propertyIsEnumerable: false,
toLocaleString: false,
toString: false,
valueOf: false,
quot: '"',
QUOT: '"',
amp: "&",
AMP: "&",
nbsp: " ",
apos: "'",
lt: "<",
LT: "<",
gt: ">",
GT: ">",
copy: "©",
laquo: "«",
raquo: "»",
reg: "®",
deg: "°",
plusmn: "±",
sup2: "²",
sup3: "³",
micro: "µ",
para: "¶"
};
function rpEntities(s, d, x, z) {
if (z) {
return xharsQuot[z] || "";
}
if (d) {
return String.fromCharCode(d);
}
return String.fromCharCode(parseInt(x, 16));
}
function unEntities(s, i) {
s = String(s);
if (s.length > 3 && s.indexOf("&") !== -1) {
if (s.indexOf("&gt;") !== -1) s = s.replace(/&gt;/g, ">");
if (s.indexOf("&lt;") !== -1) s = s.replace(/&lt;/g, "<");
if (s.indexOf("&quot;") !== -1) s = s.replace(/&quot;/g, '"');
if (s.indexOf("&") !== -1) {
s = s.replace(/&#(\d+);|&#x([0123456789abcdef]+);|&(\w+);/gi, rpEntities);
}
}
return s;
}
EasySAXParser.prototype.allowedAngularAttributeChars = function(w) {
if (!this.angularSyntax) {
return false;
} else {
return w === 40 || w === 41 || w === 91 || w === 93 || w === 94 || w === 35;
}
};
EasySAXParser.prototype.getAttrs = function() {
if (this.attr_res !== null) {
return this.attr_res;
}
var u, res = {}, s = this.attr_string, i = this.attr_posstart, l = s.length, attr_list = this.hasSurmiseNS ? [] : false, name, value = "", ok = false, noValueAttribute = false, j, w, nn, n, hasNewMatrix, alias, newalias;
aa: for (;i < l; i++) {
w = s.charCodeAt(i);
if (w === 32 || w < 14 && w > 8) {
continue;
}
if (w < 65 && !this.allowedAngularAttributeChars(w) || w > 122 || w > 90 && w < 97 && !this.allowedAngularAttributeChars(w)) {
return this.attr_res = false;
}
for (j = i + 1; j < l; j++) {
w = s.charCodeAt(j);
if (w > 96 && w < 123 || w > 64 && w < 91 || w > 47 && w < 59 || w === 45 || w === 95 || w === 46) {
if (noValueAttribute) {
j--;
break;
} else {
continue;
}
}
if (this.allowedAngularAttributeChars(w)) {
continue;
}
if (w === 32 || w > 8 && w < 14) {
noValueAttribute = true;
continue;
} else if (w === 61) {
noValueAttribute = false;
break;
} else {
if (!noValueAttribute) return this.attr_res = false;
}
break;
}
name = s.substring(i, j).trim();
ok = true;
if (name === "xmlns:xmlns") {
return this.attr_res = false;
}
w = s.charCodeAt(j + 1);
while (w = s.charCodeAt(j + 1)) {
if (w === 32 || w > 8 && w < 14) {
j++;
} else {
break;
}
}
if (!noValueAttribute) {
if (w === 34) {
j = s.indexOf('"', i = j + 2);
} else {
if (w === 39) {
j = s.indexOf("'", i = j + 2);
} else {
return this.attr_res = false;
}
}
}
if (j === -1) {
return this.attr_res = false;
}
if (j + 1 < l && !noValueAttribute) {
w = s.charCodeAt(j + 1);
if (w > 32 || w < 9 || w < 32 && w > 13) {
return this.attr_res = false;
}
}
if (noValueAttribute) {
value = "";
} else {
value = s.substring(i, j);
}
i = j;
if (this.isNamespace) {
if (this.hasSurmiseNS) {
if (newalias = name === "xmlns" ? "xmlns" : name.charCodeAt(0) === 120 && name.substr(0, 6) === "xmlns:" && name.substr(6)) {
alias = this.useNS[unEntities(value)];
if (alias) {
if (this.nsmatrix[newalias] !== alias) {
if (!hasNewMatrix) {
hasNewMatrix = true;
nn = {};
for (n in this.nsmatrix) nn[n] = this.nsmatrix[n];
this.nsmatrix = nn;
}
this.nsmatrix[newalias] = alias;
}
} else {
if (this.nsmatrix[newalias]) {
if (!hasNewMatrix) {
hasNewMatrix = true;
nn = {};
for (n in this.nsmatrix) nn[n] = this.nsmatrix[n];
this.nsmatrix = nn;
}
this.nsmatrix[newalias] = false;
}
}
res[name] = value;
continue;
}
attr_list.push(name, value);
continue;
}
w = name.length;
while (--w) {
if (name.charCodeAt(w) === 58) {
if (w = this.nsmatrix[name.substring(0, w)]) {
res[w + name.substr(w)] = value;
}
continue aa;
}
}
}
res[name] = value;
noValueAttribute = false;
}
if (!ok) {
return this.attr_res = true;
}
if (this.hasSurmiseNS) {
bb: for (i = 0, l = attr_list.length; i < l; i++) {
name = attr_list[i++];
w = name.length;
while (--w) {
if (name.charCodeAt(w) === 58) {
if (w = this.nsmatrix[name.substring(0, w)]) {
res[w + name.substr(w)] = attr_list[i];
}
continue bb;
break;
}
}
res[name] = attr_list[i];
}
}
return this.attr_res = res;
};
EasySAXParser.prototype.parse = function(xml) {
var u, xml = String(xml), nodestack = [], stacknsmatrix = [], elem, tagend = false, tagstart = false, j = 0, i = 0, k = 0, len, x, y, q, w, xmlns, stopIndex = 0, stop, _nsmatrix, ok, pos = 0, ln = 0, lnStart = -2, lnEnd = -1;
len = xml.length;
function getStringNode() {
return xml.substring(i, j + 1);
}
function findLineAndColumnFromPos() {
while (lnStart < lnEnd && lnEnd < pos) {
lnStart = lnEnd;
lnEnd = xml.indexOf("\n", lnEnd + 1);
++ln;
}
return {
line: ln,
column: pos - lnStart
};
}
function position(p) {
pos = p;
return findLineAndColumnFromPos;
}
while (j !== -1) {
stop = stopIndex > 0;
if (xml.charCodeAt(j) === 60) {
i = j;
} else {
i = xml.indexOf("<", j);
}
if (i === -1) {
if (nodestack.length) {
this.onError("end file", position(j));
return;
}
return;
}
if (j !== i && !stop) {
ok = this.onTextNode(xml.substring(j, i), unEntities, position(j));
if (ok === false) return;
}
w = xml.charCodeAt(i + 1);
if (w === 33) {
w = xml.charCodeAt(i + 2);
if (w === 91 && xml.substr(i + 3, 6) === "CDATA[") {
j = xml.indexOf("]]>", i);
if (j === -1) {
this.onError("cdata", position(i));
return;
}
if (!stop) {
ok = this.onCDATA(xml.substring(i + 9, j), false, position(i));
if (ok === false) return;
}
j += 3;
continue;
}
if (w === 45 && xml.charCodeAt(i + 3) === 45) {
j = xml.indexOf("--\x3e", i);
if (j === -1) {
this.onError("expected --\x3e", position(i));
return;
}
if (this.is_onComment && !stop) {
ok = this.onComment(xml.substring(i + 4, j), unEntities, position(i));
if (ok === false) return;
}
j += 3;
continue;
}
j = xml.indexOf(">", i + 1);
if (j === -1) {
this.onError('expected ">"', position(i + 1));
return;
}
if (this.is_onAttention && !stop) {
ok = this.onAttention(xml.substring(i, j + 1), unEntities, position(i));
if (ok === false) return;
}
j += 1;
continue;
} else {
if (w === 63) {
j = xml.indexOf("?>", i);
if (j === -1) {
this.onError("...?>", position(i));
return;
}
if (this.is_onQuestion) {
ok = this.onQuestion(xml.substring(i, j + 2), position(i));
if (ok === false) return;
}
j += 2;
continue;
}
}
var inside = false;
for (k = i, j = -1; k < len; k++) {
var c = xml.charCodeAt(k);
if (!inside) {
if (c === 34) {
inside = c;
} else if (c === 39) {
inside = c;
} else if (c === 62) {
j = k;
break;
}
} else {
if (c === inside) {
inside = false;
}
}
}
if (j == -1) {
this.onError("...>", position(i + 1));
return;
}
this.attr_res = true;
if (w === 47) {
tagstart = false;
tagend = true;
x = elem = nodestack.pop();
q = i + 2 + x.length;
if (xml.substring(i + 2, q) !== x) {
this.onError("close tagname", position(i + 2));
return;
}
for (;q < j; q++) {
w = xml.charCodeAt(q);
if (w === 32 || w > 8 && w < 14) {
continue;
}
this.onError("close tag", position(i + 2));
return;
}
} else {
if (xml.charCodeAt(j - 1) === 47) {
x = elem = xml.substring(i + 1, j - 1);
tagstart = true;
tagend = true;
} else {
x = elem = xml.substring(i + 1, j);
tagstart = true;
tagend = false;
}
if (!(w > 96 && w < 123 || w > 64 && w < 91)) {
this.onError("first char nodeName", position(i + 1));
return;
}
for (q = 1, y = x.length; q < y; q++) {
w = x.charCodeAt(q);
if (w > 96 && w < 123 || w > 64 && w < 91 || w > 47 && w < 59 || w === 45 || w === 95 || w === 46) {
continue;
}
if (w === 32 || w < 14 && w > 8) {
elem = x.substring(0, q);
this.attr_res = null;
break;
}
this.onError("invalid nodeName", position(i + 1));
return;
}
if (!tagend) {
nodestack.push(elem);
}
}
if (this.isNamespace) {
if (stop) {
if (tagend) {
if (!tagstart) {
if (--stopIndex === 0) {
this.nsmatrix = stacknsmatrix.pop();
}
}
} else {
stopIndex += 1;
}
j += 1;
continue;
}
_nsmatrix = this.nsmatrix;
if (!tagend) {
stacknsmatrix.push(this.nsmatrix);
if (this.attr_res !== true) {
if (this.hasSurmiseNS = x.indexOf("xmlns", q) !== -1) {
this.attr_string = x;
this.attr_posstart = q;
this.getAttrs();
this.hasSurmiseNS = false;
}
}
}
w = elem.indexOf(":");
if (w !== -1) {
xmlns = this.nsmatrix[elem.substring(0, w)];
elem = elem.substr(w + 1);
} else {
xmlns = this.nsmatrix.xmlns;
}
if (!xmlns) {
if (tagend) {
if (tagstart) {
this.nsmatrix = _nsmatrix;
} else {
this.nsmatrix = stacknsmatrix.pop();
}
} else {
stopIndex = 1;
this.attr_res = true;
}
j += 1;
continue;
}
elem = xmlns + ":" + elem;
}
if (tagstart) {
this.attr_string = x;
this.attr_posstart = q;
var that = this;
ok = this.onStartNode(elem, function() {
return that.getAttrs();
}, unEntities, tagend, getStringNode, position(i));
if (ok === false) {
return;
}
this.attr_res = true;
}
if (tagend) {
ok = this.onEndNode(elem, unEntities, tagstart, getStringNode, position(i));
if (ok === false) {
return;
}
if (this.isNamespace) {
if (tagstart) {
this.nsmatrix = _nsmatrix;
} else {
this.nsmatrix = stacknsmatrix.pop();
}
}
}
j += 1;
}
};
}, function(module, exports, __webpack_require__) {
var types_1 = __webpack_require__(14);
var page_1 = __webpack_require__(73);
var view_1 = __webpack_require__(12);
var file_system_1 = __webpack_require__(32);
var binding_builder_1 = __webpack_require__(44);
var utils_1 = __webpack_require__(27);
__webpack_require__(86);
__webpack_require__(78);
__webpack_require__(88);
var special_properties_1 = __webpack_require__(48);
var UI_PATH = "ui/";
var MODULES = {
TabViewItem: "ui/tab-view",
FormattedString: "text/formatted-string",
Span: "text/span",
ActionItem: "ui/action-bar",
NavigationButton: "ui/action-bar",
SegmentedBarItem: "ui/segmented-bar"
};
var CODEFILE = "codeFile";
var CSSFILE = "cssFile";
var IMPORT = "import";
var platform;
function ensurePlatform() {
if (!platform) {
platform = __webpack_require__(35);
}
}
function getComponentModule(elementName, namespace, attributes, exports) {
var instance;
var instanceModule;
var componentModule;
elementName = elementName.split("-").map(function(s) {
return s[0].toUpperCase() + s.substring(1);
}).join("");
var moduleId = MODULES[elementName] || UI_PATH + (elementName.toLowerCase().indexOf("layout") !== -1 ? "layouts/" : "") + elementName.split(/(?=[A-Z])/).join("-").toLowerCase();
try {
if (types_1.isString(namespace)) {
if (global.moduleExists(namespace)) {
moduleId = namespace;
} else {
var pathInsideTNSModules = file_system_1.path.join(file_system_1.knownFolders.currentApp().path, "tns_modules", namespace);
try {
instanceModule = global.require(pathInsideTNSModules);
moduleId = pathInsideTNSModules;
} catch (e) {
moduleId = file_system_1.path.join(file_system_1.knownFolders.currentApp().path, namespace);
}
}
}
if (!instanceModule) {
instanceModule = global.loadModule(moduleId);
}
var instanceType = instanceModule[elementName] || Object;
instance = new instanceType();
} catch (ex) {
var debug = __webpack_require__(67);
throw new debug.ScopeError(ex, "Module '" + moduleId + "' not found for element '" + (namespace ? namespace + ":" : "") + elementName + "'.");
}
if (attributes) {
if (attributes[IMPORT]) {
var importPath = attributes[IMPORT].trim();
if (importPath.indexOf("~/") === 0) {
importPath = file_system_1.path.join(file_system_1.knownFolders.currentApp().path, importPath.replace("~/", ""));
}
exports = global.loadModule(importPath);
instance.exports = exports;
}
if (attributes[CODEFILE]) {
if (instance instanceof page_1.Page) {
var codeFilePath = attributes[CODEFILE].trim();
if (codeFilePath.indexOf("~/") === 0) {
codeFilePath = file_system_1.path.join(file_system_1.knownFolders.currentApp().path, codeFilePath.replace("~/", ""));
}
var codeFilePathWithExt = codeFilePath.indexOf(".js") !== -1 ? codeFilePath : codeFilePath + ".js";
if (file_system_1.File.exists(codeFilePathWithExt)) {
exports = global.loadModule(codeFilePath);
instance.exports = exports;
} else {
throw new Error('Code file with path "' + codeFilePathWithExt + '" cannot be found!');
}
} else {
throw new Error("Code file atribute is valid only for pages!");
}
}
if (attributes[CSSFILE]) {
if (instance instanceof page_1.Page) {
var cssFilePath = attributes[CSSFILE].trim();
if (cssFilePath.indexOf("~/") === 0) {
cssFilePath = file_system_1.path.join(file_system_1.knownFolders.currentApp().path, cssFilePath.replace("~/", ""));
}
if (file_system_1.File.exists(cssFilePath)) {
instance.addCssFile(cssFilePath);
instance[CSSFILE] = true;
} else {
throw new Error('Css file with path "' + cssFilePath + '" cannot be found!');
}
} else {
throw new Error("Css file atribute is valid only for pages!");
}
}
}
if (instance && instanceModule) {
for (var attr in attributes) {
var attrValue = attributes[attr];
if (attr.indexOf(":") !== -1) {
var platformName = attr.split(":")[0].trim();
ensurePlatform();
if (platformName.toLowerCase() === platform.device.os.toLowerCase()) {
attr = attr.split(":")[1].trim();
} else {
continue;
}
}
if (attr.indexOf(".") !== -1) {
var subObj = instance;
var properties = attr.split(".");
var subPropName = properties[properties.length - 1];
var i;
for (i = 0; i < properties.length - 1; i++) {
if (types_1.isDefined(subObj)) {
subObj = subObj[properties[i]];
}
}
if (types_1.isDefined(subObj)) {
setPropertyValue(subObj, instanceModule, exports, subPropName, attrValue);
}
} else {
setPropertyValue(instance, instanceModule, exports, attr, attrValue);
}
}
componentModule = {
component: instance,
exports: instanceModule
};
}
return componentModule;
}
exports.getComponentModule = getComponentModule;
function setPropertyValue(instance, instanceModule, exports, propertyName, propertyValue) {
if (isBinding(propertyValue) && instance.bind) {
var bindOptions = binding_builder_1.getBindingOptions(propertyName, getBindingExpressionFromAttribute(propertyValue));
instance.bind({
sourceProperty: bindOptions[binding_builder_1.bindingConstants.sourceProperty],
targetProperty: bindOptions[binding_builder_1.bindingConstants.targetProperty],
expression: bindOptions[binding_builder_1.bindingConstants.expression],
twoWay: bindOptions[binding_builder_1.bindingConstants.twoWay]
}, bindOptions[binding_builder_1.bindingConstants.source]);
} else if (view_1.isEventOrGesture(propertyName, instance)) {
var handler = exports && exports[propertyValue];
if (types_1.isFunction(handler)) {
instance.on(propertyName, handler);
}
} else if (isKnownFunction(propertyName, instance) && types_1.isFunction(exports && exports[propertyValue])) {
instance[propertyName] = exports[propertyValue];
} else {
var attrHandled = false;
var specialSetter = special_properties_1.getSpecialPropertySetter(propertyName);
if (!attrHandled && specialSetter) {
specialSetter(instance, propertyValue);
attrHandled = true;
}
if (!attrHandled && instance._applyXmlAttribute) {
attrHandled = instance._applyXmlAttribute(propertyName, propertyValue);
}
if (!attrHandled) {
instance[propertyName] = utils_1.convertString(propertyValue);
}
}
}
exports.setPropertyValue = setPropertyValue;
function getBindingExpressionFromAttribute(value) {
return value.replace("{{", "").replace("}}", "").trim();
}
function isBinding(value) {
var isBinding;
if (types_1.isString(value)) {
var str = value.trim();
isBinding = str.indexOf("{{") === 0 && str.lastIndexOf("}}") === str.length - 2;
}
return isBinding;
}
var KNOWN_FUNCTIONS = "knownFunctions";
function isKnownFunction(name, instance) {
return instance.constructor && KNOWN_FUNCTIONS in instance.constructor && instance.constructor[KNOWN_FUNCTIONS].indexOf(name) !== -1;
}
}, function(module, exports, __webpack_require__) {
var common = __webpack_require__(87);
var enums_1 = __webpack_require__(24);
var view_1 = __webpack_require__(12);
global.moduleMerge(common, exports);
function setNativeDockProperty(data) {
var view = data.object;
if (view instanceof view_1.View) {
var nativeView = view._nativeView;
var lp = nativeView.getLayoutParams() || new org.nativescript.widgets.CommonLayoutParams();
if (lp instanceof org.nativescript.widgets.CommonLayoutParams) {
switch (data.newValue) {
case enums_1.Dock.left:
lp.dock = org.nativescript.widgets.Dock.left;
break;

case enums_1.Dock.top:
lp.dock = org.nativescript.widgets.Dock.top;
break;

case enums_1.Dock.right:
lp.dock = org.nativescript.widgets.Dock.right;
break;

case enums_1.Dock.bottom:
lp.dock = org.nativescript.widgets.Dock.bottom;
break;

default:
throw new Error("Invalid dock value: " + data.newValue + " on element: " + view);
}
nativeView.setLayoutParams(lp);
}
}
}
common.DockLayout.dockProperty.metadata.onSetNativeValue = setNativeDockProperty;
function setNativeStretchLastChildProperty(data) {
var dockLayout = data.object;
var nativeView = dockLayout._nativeView;
nativeView.setStretchLastChild(data.newValue);
}
common.DockLayout.stretchLastChildProperty.metadata.onSetNativeValue = setNativeStretchLastChildProperty;
var DockLayout = function(_super) {
__extends(DockLayout, _super);
function DockLayout() {
_super.apply(this, arguments);
}
Object.defineProperty(DockLayout.prototype, "android", {
get: function() {
return this._layout;
},
enumerable: true,
configurable: true
});
Object.defineProperty(DockLayout.prototype, "_nativeView", {
get: function() {
return this._layout;
},
enumerable: true,
configurable: true
});
DockLayout.prototype._createUI = function() {
this._layout = new org.nativescript.widgets.DockLayout(this._context);
};
return DockLayout;
}(common.DockLayout);
exports.DockLayout = DockLayout;
}, function(module, exports, __webpack_require__) {
var platform = __webpack_require__(35);
var enums_1 = __webpack_require__(24);
var layout_base_1 = __webpack_require__(71);
var view_1 = __webpack_require__(12);
var proxy_1 = __webpack_require__(41);
var dependency_observable_1 = __webpack_require__(17);
var special_properties_1 = __webpack_require__(48);
var AffectsLayout = platform.device.os === platform.platformNames.android ? dependency_observable_1.PropertyMetadataSettings.None : dependency_observable_1.PropertyMetadataSettings.AffectsLayout;
function isDockValid(value) {
return value === enums_1.Dock.left || value === enums_1.Dock.top || value === enums_1.Dock.right || value === enums_1.Dock.bottom;
}
function validateArgs(element) {
if (!element) {
throw new Error("element cannot be null or undefinied.");
}
return element;
}
special_properties_1.registerSpecialProperty("dock", function(instance, propertyValue) {
DockLayout.setDock(instance, propertyValue);
});
var DockLayout = function(_super) {
__extends(DockLayout, _super);
function DockLayout() {
_super.apply(this, arguments);
}
DockLayout.onDockPropertyChanged = function(data) {
var view = data.object;
if (view instanceof view_1.View) {
var layout = view.parent;
if (layout instanceof DockLayout) {
layout.onDockChanged(view, data.oldValue, data.newValue);
}
}
};
DockLayout.getDock = function(element) {
return validateArgs(element)._getValue(DockLayout.dockProperty);
};
DockLayout.setDock = function(element, value) {
validateArgs(element)._setValue(DockLayout.dockProperty, value);
};
Object.defineProperty(DockLayout.prototype, "stretchLastChild", {
get: function() {
return this._getValue(DockLayout.stretchLastChildProperty);
},
set: function(value) {
this._setValue(DockLayout.stretchLastChildProperty, value);
},
enumerable: true,
configurable: true
});
DockLayout.prototype.onDockChanged = function(view, oldValue, newValue) {};
DockLayout.dockProperty = new dependency_observable_1.Property("dock", "DockLayout", new proxy_1.PropertyMetadata(enums_1.Dock.left, undefined, DockLayout.onDockPropertyChanged, isDockValid));
DockLayout.stretchLastChildProperty = new dependency_observable_1.Property("stretchLastChild", "DockLayout", new proxy_1.PropertyMetadata(true, AffectsLayout));
return DockLayout;
}(layout_base_1.LayoutBase);
exports.DockLayout = DockLayout;
}, function(module, exports, __webpack_require__) {
var utils = __webpack_require__(27);
var common = __webpack_require__(89);
var view_1 = __webpack_require__(12);
global.moduleMerge(common, exports);
function setNativeProperty(data, setter) {
var view = data.object;
if (view instanceof view_1.View) {
var nativeView = view._nativeView;
var lp = nativeView.getLayoutParams() || new org.nativescript.widgets.CommonLayoutParams();
if (lp instanceof org.nativescript.widgets.CommonLayoutParams) {
setter(lp);
nativeView.setLayoutParams(lp);
}
}
}
function setNativeLeftProperty(data) {
setNativeProperty(data, function(lp) {
lp.left = data.newValue * utils.layout.getDisplayDensity();
});
}
function setNativeTopProperty(data) {
setNativeProperty(data, function(lp) {
lp.top = data.newValue * utils.layout.getDisplayDensity();
});
}
common.AbsoluteLayout.leftProperty.metadata.onSetNativeValue = setNativeLeftProperty;
common.AbsoluteLayout.topProperty.metadata.onSetNativeValue = setNativeTopProperty;
var AbsoluteLayout = function(_super) {
__extends(AbsoluteLayout, _super);
function AbsoluteLayout() {
_super.apply(this, arguments);
}
Object.defineProperty(AbsoluteLayout.prototype, "android", {
get: function() {
return this._layout;
},
enumerable: true,
configurable: true
});
Object.defineProperty(AbsoluteLayout.prototype, "_nativeView", {
get: function() {
return this._layout;
},
enumerable: true,
configurable: true
});
AbsoluteLayout.prototype._createUI = function() {
this._layout = new org.nativescript.widgets.AbsoluteLayout(this._context);
};
return AbsoluteLayout;
}(common.AbsoluteLayout);
exports.AbsoluteLayout = AbsoluteLayout;
}, function(module, exports, __webpack_require__) {
var layout_base_1 = __webpack_require__(71);
var view_1 = __webpack_require__(12);
var proxy_1 = __webpack_require__(41);
var dependency_observable_1 = __webpack_require__(17);
var special_properties_1 = __webpack_require__(48);
function validateArgs(element) {
if (!element) {
throw new Error("element cannot be null or undefinied.");
}
return element;
}
special_properties_1.registerSpecialProperty("left", function(instance, propertyValue) {
AbsoluteLayout.setLeft(instance, !isNaN(+propertyValue) && +propertyValue);
});
special_properties_1.registerSpecialProperty("top", function(instance, propertyValue) {
AbsoluteLayout.setTop(instance, !isNaN(+propertyValue) && +propertyValue);
});
var AbsoluteLayout = function(_super) {
__extends(AbsoluteLayout, _super);
function AbsoluteLayout() {
_super.apply(this, arguments);
}
AbsoluteLayout.isValid = function(value) {
return isFinite(value);
};
AbsoluteLayout.onLeftPropertyChanged = function(data) {
var view = data.object;
if (view instanceof view_1.View) {
var layout = view.parent;
if (layout instanceof AbsoluteLayout) {
layout.onLeftChanged(view, data.oldValue, data.newValue);
}
}
};
AbsoluteLayout.onTopPropertyChanged = function(data) {
var view = data.object;
if (view instanceof view_1.View) {
var layout = view.parent;
if (layout instanceof AbsoluteLayout) {
layout.onTopChanged(view, data.oldValue, data.newValue);
}
}
};
AbsoluteLayout.getLeft = function(element) {
return validateArgs(element)._getValue(AbsoluteLayout.leftProperty);
};
AbsoluteLayout.setLeft = function(element, value) {
validateArgs(element)._setValue(AbsoluteLayout.leftProperty, value);
};
AbsoluteLayout.getTop = function(element) {
return validateArgs(element)._getValue(AbsoluteLayout.topProperty);
};
AbsoluteLayout.setTop = function(element, value) {
validateArgs(element)._setValue(AbsoluteLayout.topProperty, value);
};
AbsoluteLayout.prototype.onLeftChanged = function(view, oldValue, newValue) {};
AbsoluteLayout.prototype.onTopChanged = function(view, oldValue, newValue) {};
AbsoluteLayout.leftProperty = new dependency_observable_1.Property("left", "AbsoluteLayout", new proxy_1.PropertyMetadata(0, undefined, AbsoluteLayout.onLeftPropertyChanged, AbsoluteLayout.isValid));
AbsoluteLayout.topProperty = new dependency_observable_1.Property("top", "AbsoluteLayout", new proxy_1.PropertyMetadata(0, undefined, AbsoluteLayout.onTopPropertyChanged, AbsoluteLayout.isValid));
return AbsoluteLayout;
}(layout_base_1.LayoutBase);
exports.AbsoluteLayout = AbsoluteLayout;
}, function(module, exports, __webpack_require__) {
var frame_1 = __webpack_require__(10);
var types_1 = __webpack_require__(14);
var platform_1 = __webpack_require__(35);
var lazy_1 = __webpack_require__(29);
var trace = __webpack_require__(16);
var slideTransition;
function ensureSlideTransition() {
if (!slideTransition) {
slideTransition = __webpack_require__(91);
}
}
var fadeTransition;
function ensureFadeTransition() {
if (!fadeTransition) {
fadeTransition = __webpack_require__(92);
}
}
var flipTransition;
function ensureFlipTransition() {
if (!flipTransition) {
flipTransition = __webpack_require__(93);
}
}
var animation;
function ensureAnimationModule() {
if (!animation) {
animation = __webpack_require__(25);
}
}
var _sdkVersion = lazy_1.default(function() {
return parseInt(platform_1.device.sdkVersion);
});
var _defaultInterpolator = lazy_1.default(function() {
return new android.view.animation.AccelerateDecelerateInterpolator();
});
var enterFakeResourceId = -10;
var exitFakeResourceId = -20;
var popEnterFakeResourceId = -30;
var popExitFakeResourceId = -40;
var AndroidTransitionType;
(function(AndroidTransitionType) {
AndroidTransitionType.enter = "enter";
AndroidTransitionType.exit = "exit";
AndroidTransitionType.popEnter = "popEnter";
AndroidTransitionType.popExit = "popExit";
})(AndroidTransitionType = exports.AndroidTransitionType || (exports.AndroidTransitionType = {}));
function _clearBackwardTransitions(fragment) {
var expandedFragment = fragment;
if (expandedFragment.enterPopExitTransition) {
if (trace.enabled) {
trace.write("Cleared enterPopExitTransition " + expandedFragment.enterPopExitTransition + " for " + fragment, trace.categories.Transition);
}
if (expandedFragment.enterPopExitTransitionListener) {
expandedFragment.enterPopExitTransitionListener.remove();
}
expandedFragment.enterPopExitTransition = undefined;
}
if (_sdkVersion() >= 21) {
var enterTransition = fragment.getEnterTransition();
if (enterTransition) {
if (trace.enabled) {
trace.write("Cleared Enter " + enterTransition.getClass().getSimpleName() + " transition for " + fragment, trace.categories.Transition);
}
if (enterTransition.transitionListener) {
enterTransition.transitionListener.remove();
}
fragment.setEnterTransition(null);
}
var returnTransition = fragment.getReturnTransition();
if (returnTransition) {
if (trace.enabled) {
trace.write("Cleared Pop Exit " + returnTransition.getClass().getSimpleName() + " transition for " + fragment, trace.categories.Transition);
}
if (returnTransition.transitionListener) {
returnTransition.transitionListener.remove();
}
fragment.setReturnTransition(null);
}
}
}
exports._clearBackwardTransitions = _clearBackwardTransitions;
function _clearForwardTransitions(fragment) {
var expandedFragment = fragment;
if (expandedFragment.exitPopEnterTransition) {
if (trace.enabled) {
trace.write("Cleared exitPopEnterTransition " + expandedFragment.exitPopEnterTransition + " for " + fragment, trace.categories.Transition);
}
if (expandedFragment.exitPopEnterTransitionListener) {
expandedFragment.exitPopEnterTransitionListener.remove();
}
expandedFragment.exitPopEnterTransition = undefined;
}
if (_sdkVersion() >= 21) {
var exitTransition = fragment.getExitTransition();
if (exitTransition) {
if (trace.enabled) {
trace.write("Cleared Exit " + exitTransition.getClass().getSimpleName() + " transition for " + fragment, trace.categories.Transition);
}
if (exitTransition.transitionListener) {
exitTransition.transitionListener.remove();
}
fragment.setExitTransition(null);
}
var reenterTransition = fragment.getReenterTransition();
if (reenterTransition) {
if (trace.enabled) {
trace.write("Cleared Pop Enter " + reenterTransition.getClass().getSimpleName() + " transition for " + fragment, trace.categories.Transition);
}
if (reenterTransition.transitionListener) {
reenterTransition.transitionListener.remove();
}
fragment.setReenterTransition(null);
}
}
}
exports._clearForwardTransitions = _clearForwardTransitions;
function _setAndroidFragmentTransitions(navigationTransition, currentFragment, newFragment, fragmentTransaction) {
trace.write("Setting Android Fragment Transitions...", trace.categories.Transition);
var name;
if (navigationTransition.name) {
name = navigationTransition.name.toLowerCase();
}
var useLollipopTransition = name && (name.indexOf("slide") === 0 || name === "fade" || name === "explode") && _sdkVersion() >= 21;
if (frame_1.topmost().android.cachePagesOnNavigate && _sdkVersion() === 23) {
useLollipopTransition = false;
}
if (useLollipopTransition) {
newFragment.setAllowEnterTransitionOverlap(true);
newFragment.setAllowReturnTransitionOverlap(true);
if (currentFragment) {
currentFragment.setAllowEnterTransitionOverlap(true);
currentFragment.setAllowReturnTransitionOverlap(true);
}
if (name.indexOf("slide") === 0) {
var direction = name.substr("slide".length) || "left";
switch (direction) {
case "left":
var rightEdge = new android.transition.Slide(android.view.Gravity.RIGHT);
_setUpNativeTransition(navigationTransition, rightEdge);
_addNativeTransitionListener(newFragment, rightEdge);
newFragment.setEnterTransition(rightEdge);
if (currentFragment) {
var leftEdge_1 = new android.transition.Slide(android.view.Gravity.LEFT);
_setUpNativeTransition(navigationTransition, leftEdge_1);
_addNativeTransitionListener(currentFragment, leftEdge_1);
currentFragment.setExitTransition(leftEdge_1);
}
break;

case "right":
var leftEdge = new android.transition.Slide(android.view.Gravity.LEFT);
_setUpNativeTransition(navigationTransition, leftEdge);
_addNativeTransitionListener(newFragment, leftEdge);
newFragment.setEnterTransition(leftEdge);
if (currentFragment) {
var rightEdge_1 = new android.transition.Slide(android.view.Gravity.RIGHT);
_setUpNativeTransition(navigationTransition, rightEdge_1);
_addNativeTransitionListener(currentFragment, rightEdge_1);
currentFragment.setExitTransition(rightEdge_1);
}
break;

case "top":
var bottomEdge = new android.transition.Slide(android.view.Gravity.BOTTOM);
_setUpNativeTransition(navigationTransition, bottomEdge);
_addNativeTransitionListener(newFragment, bottomEdge);
newFragment.setEnterTransition(bottomEdge);
if (currentFragment) {
var topEdge_1 = new android.transition.Slide(android.view.Gravity.TOP);
_setUpNativeTransition(navigationTransition, topEdge_1);
_addNativeTransitionListener(currentFragment, topEdge_1);
currentFragment.setExitTransition(topEdge_1);
}
break;

case "bottom":
var topEdge = new android.transition.Slide(android.view.Gravity.TOP);
_setUpNativeTransition(navigationTransition, topEdge);
_addNativeTransitionListener(newFragment, topEdge);
newFragment.setEnterTransition(topEdge);
if (currentFragment) {
var bottomEdge_1 = new android.transition.Slide(android.view.Gravity.BOTTOM);
_setUpNativeTransition(navigationTransition, bottomEdge_1);
_addNativeTransitionListener(currentFragment, bottomEdge_1);
currentFragment.setExitTransition(bottomEdge_1);
}
break;
}
} else if (name === "fade") {
var fadeEnter = new android.transition.Fade(android.transition.Fade.IN);
_setUpNativeTransition(navigationTransition, fadeEnter);
_addNativeTransitionListener(newFragment, fadeEnter);
newFragment.setEnterTransition(fadeEnter);
var fadeReturn = new android.transition.Fade(android.transition.Fade.OUT);
_setUpNativeTransition(navigationTransition, fadeReturn);
_addNativeTransitionListener(newFragment, fadeReturn);
newFragment.setReturnTransition(fadeReturn);
if (currentFragment) {
var fadeExit = new android.transition.Fade(android.transition.Fade.OUT);
_setUpNativeTransition(navigationTransition, fadeExit);
_addNativeTransitionListener(currentFragment, fadeExit);
currentFragment.setExitTransition(fadeExit);
var fadeReenter = new android.transition.Fade(android.transition.Fade.IN);
_setUpNativeTransition(navigationTransition, fadeReenter);
_addNativeTransitionListener(currentFragment, fadeReenter);
currentFragment.setReenterTransition(fadeReenter);
}
} else if (name === "explode") {
var explodeEnter = new android.transition.Explode();
_setUpNativeTransition(navigationTransition, explodeEnter);
_addNativeTransitionListener(newFragment, explodeEnter);
newFragment.setEnterTransition(explodeEnter);
if (currentFragment) {
var explodeExit = new android.transition.Explode();
_setUpNativeTransition(navigationTransition, explodeExit);
_addNativeTransitionListener(currentFragment, explodeExit);
currentFragment.setExitTransition(explodeExit);
}
}
} else {
var transition = void 0;
if (name) {
if (name.indexOf("slide") === 0) {
var direction = name.substr("slide".length) || "left";
ensureSlideTransition();
transition = new slideTransition.SlideTransition(direction, navigationTransition.duration, navigationTransition.curve);
} else if (name === "fade") {
ensureFadeTransition();
transition = new fadeTransition.FadeTransition(navigationTransition.duration, navigationTransition.curve);
} else if (name.indexOf("flip") === 0) {
var direction = name.substr("flip".length) || "right";
ensureFlipTransition();
transition = new flipTransition.FlipTransition(direction, navigationTransition.duration, navigationTransition.curve);
}
} else {
transition = navigationTransition.instance;
}
if (transition) {
var newExpandedFragment = newFragment;
newExpandedFragment.enterPopExitTransition = transition;
if (currentFragment) {
var currentExpandedFragment = currentFragment;
currentExpandedFragment.exitPopEnterTransition = transition;
}
fragmentTransaction.setCustomAnimations(enterFakeResourceId, exitFakeResourceId, popEnterFakeResourceId, popExitFakeResourceId);
}
}
_printTransitions(currentFragment);
_printTransitions(newFragment);
}
exports._setAndroidFragmentTransitions = _setAndroidFragmentTransitions;
function _setUpNativeTransition(navigationTransition, nativeTransition) {
if (navigationTransition.duration) {
nativeTransition.setDuration(navigationTransition.duration);
}
if (navigationTransition.curve) {
ensureAnimationModule();
var interpolator = animation._resolveAnimationCurve(navigationTransition.curve);
nativeTransition.setInterpolator(interpolator);
} else {
nativeTransition.setInterpolator(_defaultInterpolator());
}
}
function _onFragmentShown(fragment, isBack) {
if (trace.enabled) {
trace.write("_onFragmentShown(" + fragment + ", isBack: " + isBack + ")", trace.categories.Transition);
}
var expandedFragment = fragment;
var transitionType = isBack ? "Pop Enter" : "Enter";
var relevantTransition = isBack ? expandedFragment.exitPopEnterTransition : expandedFragment.enterPopExitTransition;
if (relevantTransition) {
if (trace.enabled) {
trace.write(fragment + " has been shown when going " + (isBack ? "back" : "forward") + ", but there is " + transitionType + " " + relevantTransition + ". Will complete page addition when transition ends.", trace.categories.Transition);
}
expandedFragment.completePageAdditionWhenTransitionEnds = {
isBack: isBack
};
} else if (_sdkVersion() >= 21) {
var nativeTransition = isBack ? fragment.getReenterTransition() : fragment.getEnterTransition();
if (nativeTransition) {
if (trace.enabled) {
trace.write(fragment + " has been shown when going " + (isBack ? "back" : "forward") + ", but there is " + transitionType + " " + nativeTransition.getClass().getSimpleName() + " transition. Will complete page addition when transition ends.", trace.categories.Transition);
}
expandedFragment.completePageAdditionWhenTransitionEnds = {
isBack: isBack
};
}
}
if (!expandedFragment.completePageAdditionWhenTransitionEnds) {
_completePageAddition(fragment, isBack);
}
}
exports._onFragmentShown = _onFragmentShown;
function _onFragmentHidden(fragment, isBack, destroyed) {
if (trace.enabled) {
trace.write("_onFragmentHidden(" + fragment + ", isBack: " + isBack + ", destroyed: " + destroyed + ")", trace.categories.Transition);
}
var expandedFragment = fragment;
var transitionType = isBack ? "Pop Exit" : "Exit";
var relevantTransition = isBack ? expandedFragment.enterPopExitTransition : expandedFragment.exitPopEnterTransition;
if (relevantTransition) {
if (trace.enabled) {
trace.write(fragment + " has been hidden when going " + (isBack ? "back" : "forward") + ", but there is " + transitionType + " " + relevantTransition + ". Will complete page removal when transition ends.", trace.categories.Transition);
}
expandedFragment.completePageRemovalWhenTransitionEnds = {
isBack: isBack
};
} else if (_sdkVersion() >= 21) {
var nativeTransition = isBack ? fragment.getReturnTransition() : fragment.getExitTransition();
if (nativeTransition) {
if (trace.enabled) {
trace.write(fragment + " has been hidden when going " + (isBack ? "back" : "forward") + ", but there is " + transitionType + " " + nativeTransition.getClass().getSimpleName() + " transition. Will complete page removal when transition ends.", trace.categories.Transition);
}
expandedFragment.completePageRemovalWhenTransitionEnds = {
isBack: isBack
};
}
}
expandedFragment.isDestroyed = destroyed;
if (expandedFragment.completePageRemovalWhenTransitionEnds === undefined) {
_completePageRemoval(fragment, isBack);
}
}
exports._onFragmentHidden = _onFragmentHidden;
function _completePageAddition(fragment, isBack) {
var expandedFragment = fragment;
expandedFragment.completePageAdditionWhenTransitionEnds = undefined;
var frame = fragment._callbacks.frame;
var entry = fragment._callbacks.entry;
var page = entry.resolvedPage;
if (trace.enabled) {
trace.write("STARTING ADDITION of " + page + "...", trace.categories.Transition);
}
frame._currentEntry = entry;
page.onNavigatedTo(isBack);
frame._processNavigationQueue(page);
entry.isNavigation = undefined;
if (trace.enabled) {
trace.write("ADDITION of " + page + " completed", trace.categories.Transition);
}
}
function _completePageRemoval(fragment, isBack) {
var expandedFragment = fragment;
expandedFragment.completePageRemovalWhenTransitionEnds = undefined;
var frame = fragment._callbacks.frame;
var entry = fragment._callbacks.entry;
var page = entry.resolvedPage;
if (trace.enabled) {
trace.write("STARTING REMOVAL of " + page + "...", trace.categories.Transition);
}
if (page.frame) {
frame._removeView(page);
if (entry.isNavigation) {
page.onNavigatedFrom(isBack);
}
if (trace.enabled) {
trace.write("REMOVAL of " + page + " completed", trace.categories.Transition);
}
} else {
if (trace.enabled) {
trace.write("REMOVAL of " + page + " has already been done", trace.categories.Transition);
}
}
if (expandedFragment.isDestroyed) {
expandedFragment.isDestroyed = undefined;
if (page._context) {
page._onDetached(true);
if (trace.enabled) {
trace.write("DETACHMENT of " + page + " completed", trace.categories.Transition);
}
} else {
if (trace.enabled) {
trace.write("DETACHMENT of " + page + " has already been done", trace.categories.Transition);
}
_removePageNativeViewFromAndroidParent(page);
}
}
entry.isNavigation = undefined;
}
function _removePageNativeViewFromAndroidParent(page) {
if (page._nativeView && page._nativeView.getParent) {
var androidParent = page._nativeView.getParent();
if (androidParent && androidParent.removeView) {
if (trace.enabled) {
trace.write("REMOVED " + page + "._nativeView from its Android parent", trace.categories.Transition);
}
page._onDetached(true);
androidParent.removeView(page._nativeView);
}
}
}
exports._removePageNativeViewFromAndroidParent = _removePageNativeViewFromAndroidParent;
function _toShortString(nativeTransition) {
return nativeTransition.getClass().getSimpleName() + "@" + nativeTransition.hashCode().toString(16);
}
function _addNativeTransitionListener(fragment, nativeTransition) {
var transitionListener = new android.transition.Transition.TransitionListener({
onTransitionCancel: function(transition) {
var expandedFragment = this.fragment;
if (!expandedFragment) {
return;
}
if (trace.enabled) {
trace.write("CANCEL " + _toShortString(transition) + " transition for " + expandedFragment, trace.categories.Transition);
}
if (expandedFragment.completePageRemovalWhenTransitionEnds) {
_completePageRemoval(expandedFragment, expandedFragment.completePageRemovalWhenTransitionEnds.isBack);
}
if (expandedFragment.completePageAdditionWhenTransitionEnds) {
_completePageAddition(expandedFragment, expandedFragment.completePageAdditionWhenTransitionEnds.isBack);
}
this.checkedRemove();
},
onTransitionEnd: function(transition) {
var expandedFragment = this.fragment;
if (!expandedFragment) {
return;
}
if (trace.enabled) {
trace.write("END " + _toShortString(transition) + " transition for " + expandedFragment, trace.categories.Transition);
}
if (expandedFragment.completePageRemovalWhenTransitionEnds) {
_completePageRemoval(expandedFragment, expandedFragment.completePageRemovalWhenTransitionEnds.isBack);
}
if (expandedFragment.completePageAdditionWhenTransitionEnds) {
_completePageAddition(expandedFragment, expandedFragment.completePageAdditionWhenTransitionEnds.isBack);
}
this.checkedRemove();
},
onTransitionPause: function(transition) {
var expandedFragment = this.fragment;
if (trace.enabled) {
trace.write("PAUSE " + _toShortString(transition) + " transition for " + expandedFragment, trace.categories.Transition);
}
},
onTransitionResume: function(transition) {
var expandedFragment = this.fragment;
if (trace.enabled) {
trace.write("RESUME " + _toShortString(transition) + " transition for " + expandedFragment, trace.categories.Transition);
}
},
onTransitionStart: function(transition) {
var expandedFragment = this.fragment;
if (trace.enabled) {
trace.write("START " + _toShortString(transition) + " transition for " + expandedFragment, trace.categories.Transition);
}
}
});
transitionListener.fragment = fragment;
transitionListener.count = 2;
transitionListener.transition = nativeTransition;
transitionListener.listener = transitionListener;
transitionListener.checkedRemove = function() {
if (--this.count) {
return;
}
this.remove();
};
transitionListener.remove = function() {
if (!this.listener) {
return;
}
this.transition.removeListener(this.listener);
this.fragment = null;
this.listener = null;
this.transition.transitionListener = null;
this.transition = null;
};
nativeTransition.addListener(transitionListener);
nativeTransition.transitionListener = transitionListener;
}
function _onFragmentCreateAnimator(fragment, nextAnim) {
var transitionType;
switch (nextAnim) {
case enterFakeResourceId:
transitionType = AndroidTransitionType.enter;
break;

case exitFakeResourceId:
transitionType = AndroidTransitionType.exit;
break;

case popEnterFakeResourceId:
transitionType = AndroidTransitionType.popEnter;
break;

case popExitFakeResourceId:
transitionType = AndroidTransitionType.popExit;
break;
}
if ((nextAnim === popExitFakeResourceId || !nextAnim) && fragment.exitHack) {
trace.write("HACK EXIT FOR " + fragment, trace.categories.Transition);
transitionType = AndroidTransitionType.exit;
}
var transition;
switch (transitionType) {
case AndroidTransitionType.enter:
case AndroidTransitionType.popExit:
transition = fragment.enterPopExitTransition;
break;

case AndroidTransitionType.exit:
case AndroidTransitionType.popEnter:
transition = fragment.exitPopEnterTransition;
break;
}
var animator;
if (transition) {
animator = transition.createAndroidAnimator(transitionType);
trace.write(transition + ".createAndroidAnimator(" + transitionType + "): " + animator, trace.categories.Transition);
var transitionListener = new android.animation.Animator.AnimatorListener({
onAnimationStart: function(animator) {
if (trace.enabled) {
trace.write("START " + transitionType + " " + this.transition + " for " + this.fragment, trace.categories.Transition);
}
},
onAnimationRepeat: function(animator) {
if (trace.enabled) {
trace.write("REPEAT " + transitionType + " " + this.transition + " for " + this.fragment, trace.categories.Transition);
}
},
onAnimationEnd: function(animator) {
if (trace.enabled) {
trace.write("END " + transitionType + " " + this.transition + " for " + this.fragment, trace.categories.Transition);
}
if (this.fragment.completePageRemovalWhenTransitionEnds) {
_completePageRemoval(this.fragment, this.fragment.completePageRemovalWhenTransitionEnds.isBack);
}
if (this.fragment.completePageAdditionWhenTransitionEnds) {
_completePageAddition(this.fragment, this.fragment.completePageAdditionWhenTransitionEnds.isBack);
}
this.checkedRemove();
},
onAnimationCancel: function(animator) {
if (trace.enabled) {
trace.write("CANCEL " + transitionType + " " + this.transition + " for " + this.fragment, trace.categories.Transition);
}
if (this.fragment.completePageRemovalWhenTransitionEnds) {
_completePageRemoval(this.fragment, this.fragment.completePageRemovalWhenTransitionEnds.isBack);
}
if (this.fragment.completePageAdditionWhenTransitionEnds) {
_completePageAddition(this.fragment, this.fragment.completePageAdditionWhenTransitionEnds.isBack);
}
this.checkedRemove();
}
});
transitionListener.fragment = fragment;
transitionListener.transitionType = transitionType;
transitionListener.count = 2;
transitionListener.listener = transitionListener;
transitionListener.animator = animator;
transitionListener.checkedRemove = function() {
if (--this.count) {
return;
}
this.remove();
};
transitionListener.remove = function() {
if (!this.listener) {
return;
}
this.animator.removeListener(this.listener);
switch (this.transitionType) {
case AndroidTransitionType.enter:
case AndroidTransitionType.popExit:
this.fragment.enterPopExitTransitionListener = null;
break;

case AndroidTransitionType.exit:
case AndroidTransitionType.popEnter:
this.fragment.exitPopEnterTransitionListener = null;
break;
}
this.transitionType = null;
this.fragment = null;
this.listener = null;
this.animator.transitionListener = null;
this.animator = null;
this.transitionType = null;
};
animator.transitionListener = transitionListener;
animator.addListener(transitionListener);
switch (transitionType) {
case AndroidTransitionType.enter:
case AndroidTransitionType.popExit:
fragment.enterPopExitTransitionListener = transitionListener;
break;

case AndroidTransitionType.exit:
case AndroidTransitionType.popEnter:
fragment.exitPopEnterTransitionListener = transitionListener;
break;
}
}
if (transitionType && !animator) {
animator = _createDummyZeroDurationAnimator();
}
return animator;
}
exports._onFragmentCreateAnimator = _onFragmentCreateAnimator;
function _prepareCurrentFragmentForClearHistory(fragment) {
trace.write("Preparing " + fragment + " transitions fro clear history...", trace.categories.Transition);
var expandedFragment = fragment;
expandedFragment.exitHack = true;
if (_sdkVersion() >= 21) {
var exitTransition = fragment.getExitTransition();
fragment.setReturnTransition(exitTransition);
}
_printTransitions(fragment);
}
exports._prepareCurrentFragmentForClearHistory = _prepareCurrentFragmentForClearHistory;
var intEvaluator;
function ensureIntEvaluator() {
if (!intEvaluator) {
intEvaluator = new android.animation.IntEvaluator();
}
}
function _createDummyZeroDurationAnimator() {
if (trace.enabled) {
trace.write("_createDummyZeroDurationAnimator()", trace.categories.Transition);
}
ensureIntEvaluator();
var nativeArray = Array.create(java.lang.Object, 2);
nativeArray[0] = java.lang.Integer.valueOf(0);
nativeArray[1] = java.lang.Integer.valueOf(1);
var animator = android.animation.ValueAnimator.ofObject(intEvaluator, nativeArray);
animator.setDuration(0);
return animator;
}
function _printTransitions(f) {
if (f && trace.enabled) {
var ef = f;
var result = ef + " Transitions:";
result += "" + (ef.enterPopExitTransition ? " enterPopExit=" + ef.enterPopExitTransition : "");
result += "" + (ef.exitPopEnterTransition ? " exitPopEnter=" + ef.exitPopEnterTransition : "");
if (_sdkVersion() >= 21) {
result += "" + (f.getEnterTransition() ? " enter=" + _toShortString(f.getEnterTransition()) : "");
result += "" + (f.getExitTransition() ? " exit=" + _toShortString(f.getExitTransition()) : "");
result += "" + (f.getReenterTransition() ? " popEnter=" + _toShortString(f.getReenterTransition()) : "");
result += "" + (f.getReturnTransition() ? " popExit=" + _toShortString(f.getReturnTransition()) : "");
}
trace.write(result, trace.categories.Transition);
}
}
var Transition = function() {
function Transition(duration, curve) {
this._duration = duration;
if (curve) {
var animation_1 = __webpack_require__(25);
this._interpolator = animation_1._resolveAnimationCurve(curve);
} else {
this._interpolator = _defaultInterpolator();
}
this._id = Transition.transitionId++;
}
Transition.prototype.getDuration = function() {
return this._duration;
};
Transition.prototype.getCurve = function() {
return this._interpolator;
};
Transition.prototype.animateIOSTransition = function(containerView, fromView, toView, operation, completion) {
throw new Error("Abstract method call");
};
Transition.prototype.createAndroidAnimator = function(transitionType) {
throw new Error("Abstract method call");
};
Transition.prototype.toString = function() {
return types_1.getClass(this) + "@" + this._id;
};
Transition.transitionId = 0;
return Transition;
}();
exports.Transition = Transition;
}, function(module, exports, __webpack_require__) {
var transition = __webpack_require__(90);
var platform = __webpack_require__(35);
var lazy_1 = __webpack_require__(29);
var screenWidth = lazy_1.default(function() {
return platform.screen.mainScreen.widthPixels;
});
var screenHeight = lazy_1.default(function() {
return platform.screen.mainScreen.heightPixels;
});
var SlideTransition = function(_super) {
__extends(SlideTransition, _super);
function SlideTransition(direction, duration, curve) {
_super.call(this, duration, curve);
this._direction = direction;
}
SlideTransition.prototype.createAndroidAnimator = function(transitionType) {
var translationValues = Array.create("float", 2);
switch (this._direction) {
case "left":
switch (transitionType) {
case transition.AndroidTransitionType.enter:
translationValues[0] = screenWidth();
translationValues[1] = 0;
break;

case transition.AndroidTransitionType.exit:
translationValues[0] = 0;
translationValues[1] = -screenWidth();
break;

case transition.AndroidTransitionType.popEnter:
translationValues[0] = -screenWidth();
translationValues[1] = 0;
break;

case transition.AndroidTransitionType.popExit:
translationValues[0] = 0;
translationValues[1] = screenWidth();
break;
}
break;

case "right":
switch (transitionType) {
case transition.AndroidTransitionType.enter:
translationValues[0] = -screenWidth();
translationValues[1] = 0;
break;

case transition.AndroidTransitionType.exit:
translationValues[0] = 0;
translationValues[1] = screenWidth();
break;

case transition.AndroidTransitionType.popEnter:
translationValues[0] = screenWidth();
translationValues[1] = 0;
break;

case transition.AndroidTransitionType.popExit:
translationValues[0] = 0;
translationValues[1] = -screenWidth();
break;
}
break;

case "top":
switch (transitionType) {
case transition.AndroidTransitionType.enter:
translationValues[0] = screenHeight();
translationValues[1] = 0;
break;

case transition.AndroidTransitionType.exit:
translationValues[0] = 0;
translationValues[1] = -screenHeight();
break;

case transition.AndroidTransitionType.popEnter:
translationValues[0] = -screenHeight();
translationValues[1] = 0;
break;

case transition.AndroidTransitionType.popExit:
translationValues[0] = 0;
translationValues[1] = screenHeight();
break;
}
break;

case "bottom":
switch (transitionType) {
case transition.AndroidTransitionType.enter:
translationValues[0] = -screenHeight();
translationValues[1] = 0;
break;

case transition.AndroidTransitionType.exit:
translationValues[0] = 0;
translationValues[1] = screenHeight();
break;

case transition.AndroidTransitionType.popEnter:
translationValues[0] = screenHeight();
translationValues[1] = 0;
break;

case transition.AndroidTransitionType.popExit:
translationValues[0] = 0;
translationValues[1] = -screenHeight();
break;
}
break;
}
var prop;
if (this._direction === "left" || this._direction === "right") {
prop = "translationX";
} else {
prop = "translationY";
}
var animator = android.animation.ObjectAnimator.ofFloat(null, prop, translationValues);
var duration = this.getDuration();
if (duration !== undefined) {
animator.setDuration(duration);
}
animator.setInterpolator(this.getCurve());
return animator;
};
SlideTransition.prototype.toString = function() {
return _super.prototype.toString.call(this) + " " + this._direction;
};
return SlideTransition;
}(transition.Transition);
exports.SlideTransition = SlideTransition;
}, function(module, exports, __webpack_require__) {
var transition_1 = __webpack_require__(90);
var FadeTransition = function(_super) {
__extends(FadeTransition, _super);
function FadeTransition() {
_super.apply(this, arguments);
}
FadeTransition.prototype.createAndroidAnimator = function(transitionType) {
var alphaValues = Array.create("float", 2);
switch (transitionType) {
case transition_1.AndroidTransitionType.enter:
case transition_1.AndroidTransitionType.popEnter:
alphaValues[0] = 0;
alphaValues[1] = 1;
break;

case transition_1.AndroidTransitionType.exit:
case transition_1.AndroidTransitionType.popExit:
alphaValues[0] = 1;
alphaValues[1] = 0;
break;
}
var animator = android.animation.ObjectAnimator.ofFloat(null, "alpha", alphaValues);
var duration = this.getDuration();
if (duration !== undefined) {
animator.setDuration(duration);
}
animator.setInterpolator(this.getCurve());
return animator;
};
return FadeTransition;
}(transition_1.Transition);
exports.FadeTransition = FadeTransition;
}, function(module, exports, __webpack_require__) {
var transition_1 = __webpack_require__(90);
var FlipTransition = function(_super) {
__extends(FlipTransition, _super);
function FlipTransition(direction, duration, curve) {
_super.call(this, duration, curve);
this._direction = direction;
}
FlipTransition.prototype.createAndroidAnimator = function(transitionType) {
var objectAnimators;
var values;
var animator;
var animatorSet = new android.animation.AnimatorSet();
var fullDuration = this.getDuration() || 300;
var interpolator = this.getCurve();
var rotationY = this._direction === "right" ? 180 : -180;
switch (transitionType) {
case transition_1.AndroidTransitionType.enter:
objectAnimators = Array.create(android.animation.Animator, 3);
values = Array.create("float", 2);
values[0] = 1;
values[1] = 0;
animator = android.animation.ObjectAnimator.ofFloat(null, "alpha", values);
animator.setDuration(0);
objectAnimators[0] = animator;
values = Array.create("float", 2);
values[0] = rotationY;
values[1] = 0;
animator = android.animation.ObjectAnimator.ofFloat(null, "rotationY", values);
animator.setInterpolator(interpolator);
animator.setDuration(fullDuration);
objectAnimators[1] = animator;
values = Array.create("float", 2);
values[0] = 0;
values[1] = 1;
animator = android.animation.ObjectAnimator.ofFloat(null, "alpha", values);
animator.setStartDelay(fullDuration / 2);
animator.setDuration(1);
objectAnimators[2] = animator;
break;

case transition_1.AndroidTransitionType.exit:
objectAnimators = Array.create(android.animation.Animator, 2);
values = Array.create("float", 2);
values[0] = 0;
values[1] = -rotationY;
animator = android.animation.ObjectAnimator.ofFloat(null, "rotationY", values);
animator.setInterpolator(interpolator);
animator.setDuration(fullDuration);
objectAnimators[0] = animator;
values = Array.create("float", 2);
values[0] = 1;
values[1] = 0;
animator = android.animation.ObjectAnimator.ofFloat(null, "alpha", values);
animator.setStartDelay(fullDuration / 2);
animator.setDuration(1);
objectAnimators[1] = animator;
break;

case transition_1.AndroidTransitionType.popEnter:
objectAnimators = Array.create(android.animation.Animator, 3);
values = Array.create("float", 2);
values[0] = 1;
values[1] = 0;
animator = android.animation.ObjectAnimator.ofFloat(null, "alpha", values);
animator.setDuration(0);
objectAnimators[0] = animator;
values = Array.create("float", 2);
values[0] = -rotationY;
values[1] = 0;
animator = android.animation.ObjectAnimator.ofFloat(null, "rotationY", values);
animator.setInterpolator(interpolator);
animator.setDuration(fullDuration);
objectAnimators[1] = animator;
values = Array.create("float", 2);
values[0] = 0;
values[1] = 1;
animator = android.animation.ObjectAnimator.ofFloat(null, "alpha", values);
animator.setStartDelay(fullDuration / 2);
animator.setDuration(1);
objectAnimators[2] = animator;
break;

case transition_1.AndroidTransitionType.popExit:
objectAnimators = Array.create(android.animation.Animator, 2);
values = Array.create("float", 2);
values[0] = 0;
values[1] = rotationY;
animator = android.animation.ObjectAnimator.ofFloat(null, "rotationY", values);
animator.setInterpolator(interpolator);
animator.setDuration(fullDuration);
objectAnimators[0] = animator;
values = Array.create("float", 2);
values[0] = 1;
values[1] = 0;
animator = android.animation.ObjectAnimator.ofFloat(null, "alpha", values);
animator.setStartDelay(fullDuration / 2);
animator.setDuration(1);
objectAnimators[1] = animator;
break;
}
animatorSet.playTogether(objectAnimators);
return animatorSet;
};
return FlipTransition;
}(transition_1.Transition);
exports.FlipTransition = FlipTransition;
}, function(module, exports, __webpack_require__) {
var frame_1 = __webpack_require__(10);
var FragmentClass = function(_super) {
__extends(FragmentClass, _super);
function FragmentClass() {
_super.call(this);
return global.__native(this);
}
FragmentClass.prototype.onHiddenChanged = function(hidden) {
this._callbacks.onHiddenChanged(this, hidden, _super.prototype.onHiddenChanged);
};
FragmentClass.prototype.onCreateAnimator = function(transit, enter, nextAnim) {
var result = this._callbacks.onCreateAnimator(this, transit, enter, nextAnim, _super.prototype.onCreateAnimator);
return result;
};
FragmentClass.prototype.onCreate = function(savedInstanceState) {
if (!this._callbacks) {
frame_1.setFragmentCallbacks(this);
}
this.setHasOptionsMenu(true);
this._callbacks.onCreate(this, savedInstanceState, _super.prototype.onCreate);
};
FragmentClass.prototype.onCreateView = function(inflater, container, savedInstanceState) {
var result = this._callbacks.onCreateView(this, inflater, container, savedInstanceState, _super.prototype.onCreateView);
return result;
};
FragmentClass.prototype.onSaveInstanceState = function(outState) {
this._callbacks.onSaveInstanceState(this, outState, _super.prototype.onSaveInstanceState);
};
FragmentClass.prototype.onDestroyView = function() {
this._callbacks.onDestroyView(this, _super.prototype.onDestroyView);
};
FragmentClass.prototype.onDestroy = function() {
this._callbacks.onDestroy(this, _super.prototype.onDestroy);
};
FragmentClass.prototype.toString = function() {
return this._callbacks.toStringOverride(this, _super.prototype.toString);
};
FragmentClass = __decorate([ JavaProxy("com.tns.FragmentClass") ], FragmentClass);
return FragmentClass;
}(android.app.Fragment);
frame_1.setFragmentClass(FragmentClass);
}, function(module, exports, __webpack_require__) {
var common = __webpack_require__(96);
function onSecurePropertyChanged(data) {
var textField = data.object;
if (!textField.android) {
return;
}
var cursorPosition = textField.android.getSelectionStart();
var currentInputType = textField.android.getInputType();
var currentClass = currentInputType & android.text.InputType.TYPE_MASK_CLASS;
var currentFlags = currentInputType & android.text.InputType.TYPE_MASK_FLAGS;
var newInputType = currentInputType;
if (data.newValue) {
if (currentClass === android.text.InputType.TYPE_CLASS_TEXT) {
newInputType = currentClass | currentFlags | android.text.InputType.TYPE_TEXT_VARIATION_PASSWORD;
} else if (currentClass === android.text.InputType.TYPE_CLASS_NUMBER) {
newInputType = currentClass | currentFlags | android.text.InputType.TYPE_NUMBER_VARIATION_PASSWORD;
}
newInputType = newInputType & ~28672;
} else {
if (currentClass === android.text.InputType.TYPE_CLASS_TEXT) {
newInputType = currentClass | currentFlags | android.text.InputType.TYPE_TEXT_VARIATION_NORMAL;
} else if (currentClass === android.text.InputType.TYPE_CLASS_NUMBER) {
newInputType = currentClass | currentFlags | android.text.InputType.TYPE_NUMBER_VARIATION_NORMAL;
}
}
textField.android.setInputType(newInputType);
textField.android.setSelection(cursorPosition);
}
common.secureProperty.metadata.onSetNativeValue = onSecurePropertyChanged;
global.moduleMerge(common, exports);
var TextField = function(_super) {
__extends(TextField, _super);
function TextField() {
_super.apply(this, arguments);
}
TextField.prototype._configureEditText = function() {
this.android.setInputType(android.text.InputType.TYPE_CLASS_TEXT | android.text.InputType.TYPE_TEXT_VARIATION_NORMAL | android.text.InputType.TYPE_TEXT_FLAG_CAP_SENTENCES);
this.android.setLines(1);
this.android.setMaxLines(1);
this.android.setHorizontallyScrolling(true);
};
TextField.prototype._onReturnPress = function() {
this.notify({
eventName: TextField.returnPressEvent,
object: this
});
};
return TextField;
}(common.TextField);
exports.TextField = TextField;
}, function(module, exports, __webpack_require__) {
var dependencyObservable = __webpack_require__(17);
var proxy = __webpack_require__(41);
var textBase = __webpack_require__(97);
var editableTextBase = __webpack_require__(99);
exports.secureProperty = new dependencyObservable.Property("secure", "TextField", new proxy.PropertyMetadata(false));
global.moduleMerge(textBase, exports);
var TextField = function(_super) {
__extends(TextField, _super);
function TextField() {
_super.apply(this, arguments);
}
Object.defineProperty(TextField.prototype, "secure", {
get: function() {
return this._getValue(exports.secureProperty);
},
set: function(value) {
this._setValue(exports.secureProperty, value);
},
enumerable: true,
configurable: true
});
TextField.returnPressEvent = "returnPress";
return TextField;
}(editableTextBase.EditableTextBase);
exports.TextField = TextField;
}, function(module, exports, __webpack_require__) {
var common = __webpack_require__(98);
var types = __webpack_require__(14);
var TextBase = function(_super) {
__extends(TextBase, _super);
function TextBase() {
_super.apply(this, arguments);
}
TextBase.prototype._onTextPropertyChanged = function(data) {
if (this.android) {
var newValue = types.toUIString(data.newValue);
this.android.setText(newValue);
}
};
TextBase.prototype._setFormattedTextPropertyToNative = function(value) {
var newText = value ? value._formattedText : null;
if (this.android) {
this.android.setText(newText);
}
};
return TextBase;
}(common.TextBase);
exports.TextBase = TextBase;
}, function(module, exports, __webpack_require__) {
var view = __webpack_require__(12);
var observable = __webpack_require__(18);
var dependencyObservable = __webpack_require__(17);
var proxy = __webpack_require__(41);
var formattedString = __webpack_require__(49);
var tbs = __webpack_require__(52);
var weakEvents;
function ensureWeakEvents() {
if (!weakEvents) {
weakEvents = __webpack_require__(43);
}
}
var textProperty = new dependencyObservable.Property("text", "TextBase", new proxy.PropertyMetadata("", dependencyObservable.PropertyMetadataSettings.None));
var formattedTextProperty = new dependencyObservable.Property("formattedText", "TextBase", new proxy.PropertyMetadata("", dependencyObservable.PropertyMetadataSettings.AffectsLayout));
function onTextPropertyChanged(data) {
var textBase = data.object;
textBase._onTextPropertyChanged(data);
textBase.style._updateTextTransform();
textBase.style._updateTextDecoration();
}
textProperty.metadata.onSetNativeValue = onTextPropertyChanged;
function onFormattedTextPropertyChanged(data) {
var textBase = data.object;
textBase._onFormattedTextPropertyChanged(data);
}
formattedTextProperty.metadata.onSetNativeValue = onFormattedTextPropertyChanged;
var styleHandlersInitialized;
var TextBase = function(_super) {
__extends(TextBase, _super);
function TextBase() {
_super.call(this);
if (!styleHandlersInitialized) {
styleHandlersInitialized = true;
tbs.TextBaseStyler.registerHandlers();
}
}
TextBase.prototype._onBindingContextChanged = function(oldValue, newValue) {
_super.prototype._onBindingContextChanged.call(this, oldValue, newValue);
if (this.formattedText) {
this.formattedText.updateSpansBindingContext(newValue);
}
this.style._updateTextTransform();
this.style._updateTextDecoration();
};
Object.defineProperty(TextBase.prototype, "text", {
get: function() {
return this._getValue(TextBase.textProperty);
},
set: function(value) {
this._setValue(TextBase.textProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(TextBase.prototype, "fontSize", {
get: function() {
return this.style.fontSize;
},
set: function(value) {
this.style.fontSize = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(TextBase.prototype, "textAlignment", {
get: function() {
return this.style.textAlignment;
},
set: function(value) {
this.style.textAlignment = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(TextBase.prototype, "formattedText", {
get: function() {
return this._getValue(TextBase.formattedTextProperty);
},
set: function(value) {
if (this.formattedText !== value) {
ensureWeakEvents();
if (this.formattedText) {
weakEvents.removeWeakEventListener(this.formattedText, observable.Observable.propertyChangeEvent, this.onFormattedTextChanged, this);
}
this._setValue(TextBase.formattedTextProperty, value);
if (value) {
weakEvents.addWeakEventListener(value, observable.Observable.propertyChangeEvent, this.onFormattedTextChanged, this);
}
}
},
enumerable: true,
configurable: true
});
TextBase.prototype.onFormattedTextChanged = function(eventData) {
var value = eventData.value;
this._setFormattedTextPropertyToNative(value);
this._onPropertyChangedFromNative(TextBase.textProperty, value.toString());
};
TextBase.prototype._onTextPropertyChanged = function(data) {};
TextBase.prototype._setFormattedTextPropertyToNative = function(value) {};
TextBase.prototype._onFormattedTextPropertyChanged = function(data) {
var newValue = data.newValue;
if (newValue) {
newValue.parent = this;
}
this._setFormattedTextPropertyToNative(newValue);
var newText = newValue ? newValue.toString() : "";
this._onPropertyChangedFromNative(TextBase.textProperty, newText);
};
TextBase.prototype._addChildFromBuilder = function(name, value) {
formattedString.FormattedString.addFormattedStringToView(this, name, value);
};
TextBase.prototype._requestLayoutOnTextChanged = function() {
this.requestLayout();
};
TextBase.textProperty = textProperty;
TextBase.formattedTextProperty = formattedTextProperty;
return TextBase;
}(view.View);
exports.TextBase = TextBase;
}, function(module, exports, __webpack_require__) {
var common = __webpack_require__(100);
var enums = __webpack_require__(24);
var utils = __webpack_require__(27);
var types = __webpack_require__(14);
var dismissKeyboardTimeoutId;
var EditableTextBase = function(_super) {
__extends(EditableTextBase, _super);
function EditableTextBase() {
_super.apply(this, arguments);
}
Object.defineProperty(EditableTextBase.prototype, "android", {
get: function() {
return this._android;
},
enumerable: true,
configurable: true
});
EditableTextBase.prototype._createUI = function() {
this._android = new android.widget.EditText(this._context);
this._configureEditText();
this._keyListenerCache = this.android.getKeyListener();
var that = new WeakRef(this);
this._textWatcher = new android.text.TextWatcher({
beforeTextChanged: function(text, start, count, after) {},
onTextChanged: function(text, start, before, count) {
var owner = that.get();
if (!owner) {
return;
}
var selectionStart = owner.android.getSelectionStart();
owner.android.removeTextChangedListener(owner._textWatcher);
owner.style._updateTextDecoration();
owner.style._updateTextTransform();
owner.android.addTextChangedListener(owner._textWatcher);
owner.android.setSelection(selectionStart);
},
afterTextChanged: function(editable) {
var owner = that.get();
if (!owner) {
return;
}
switch (owner.updateTextTrigger) {
case enums.UpdateTextTrigger.focusLost:
owner._dirtyTextAccumulator = editable.toString();
break;

case enums.UpdateTextTrigger.textChanged:
owner._onPropertyChangedFromNative(EditableTextBase.textProperty, editable.toString());
break;

default:
throw new Error("Invalid updateTextTrigger: " + owner.updateTextTrigger);
}
}
});
this._android.addTextChangedListener(this._textWatcher);
var focusChangeListener = new android.view.View.OnFocusChangeListener({
onFocusChange: function(view, hasFocus) {
var owner = that.get();
if (!owner) {
return;
}
if (hasFocus) {
if (dismissKeyboardTimeoutId) {
clearTimeout(dismissKeyboardTimeoutId);
dismissKeyboardTimeoutId = undefined;
}
} else {
if (owner._dirtyTextAccumulator) {
owner._onPropertyChangedFromNative(EditableTextBase.textProperty, owner._dirtyTextAccumulator);
owner._dirtyTextAccumulator = undefined;
}
dismissKeyboardTimeoutId = setTimeout(function() {
owner.dismissSoftInput();
dismissKeyboardTimeoutId = null;
}, 1);
}
}
});
this._android.setOnFocusChangeListener(focusChangeListener);
var editorActionListener = new android.widget.TextView.OnEditorActionListener({
onEditorAction: function(textView, actionId, event) {
var owner = that.get();
if (owner) {
if (actionId === android.view.inputmethod.EditorInfo.IME_ACTION_DONE || actionId === android.view.inputmethod.EditorInfo.IME_ACTION_GO || actionId === android.view.inputmethod.EditorInfo.IME_ACTION_SEARCH || actionId === android.view.inputmethod.EditorInfo.IME_ACTION_SEND || event && event.getKeyCode() === android.view.KeyEvent.KEYCODE_ENTER) {
if (textView.getMaxLines() === 1) {
owner.dismissSoftInput();
}
owner._onReturnPress();
}
if (actionId === android.view.inputmethod.EditorInfo.IME_ACTION_NEXT) {
owner._onReturnPress();
}
}
return false;
}
});
this._android.setOnEditorActionListener(editorActionListener);
};
EditableTextBase.prototype._configureEditText = function() {};
EditableTextBase.prototype._onReturnPress = function() {};
EditableTextBase.prototype._onDetached = function(force) {
if (this._android && this._textWatcher) {
this._android.removeTextChangedListener(this._textWatcher);
}
this._android = undefined;
_super.prototype._onDetached.call(this, force);
};
EditableTextBase.prototype.dismissSoftInput = function() {
utils.ad.dismissSoftInput(this._nativeView);
};
EditableTextBase.prototype.focus = function() {
var result = _super.prototype.focus.call(this);
if (result) {
utils.ad.showSoftInput(this._nativeView);
}
return result;
};
EditableTextBase.prototype._onTextPropertyChanged = function(data) {
if (this._android) {
var newValue = types.toUIString(data.newValue);
this.android.setText(newValue, android.widget.TextView.BufferType.EDITABLE);
}
};
EditableTextBase.prototype._onKeyboardTypePropertyChanged = function(data) {
if (!this._android) {
return;
}
var newInputType;
switch (data.newValue) {
case enums.KeyboardType.datetime:
newInputType = android.text.InputType.TYPE_CLASS_DATETIME | android.text.InputType.TYPE_DATETIME_VARIATION_NORMAL;
break;

case enums.KeyboardType.phone:
newInputType = android.text.InputType.TYPE_CLASS_PHONE;
break;

case enums.KeyboardType.number:
newInputType = android.text.InputType.TYPE_CLASS_NUMBER | android.text.InputType.TYPE_NUMBER_VARIATION_NORMAL | android.text.InputType.TYPE_NUMBER_FLAG_SIGNED | android.text.InputType.TYPE_NUMBER_FLAG_DECIMAL;
break;

case enums.KeyboardType.url:
newInputType = android.text.InputType.TYPE_CLASS_TEXT | android.text.InputType.TYPE_TEXT_VARIATION_URI;
break;

case enums.KeyboardType.email:
newInputType = android.text.InputType.TYPE_CLASS_TEXT | android.text.InputType.TYPE_TEXT_VARIATION_EMAIL_ADDRESS;
break;

default:
newInputType = android.text.InputType.TYPE_CLASS_TEXT | android.text.InputType.TYPE_TEXT_VARIATION_NORMAL;
break;
}
this._setInputType(newInputType);
};
EditableTextBase.prototype._onReturnKeyTypePropertyChanged = function(data) {
if (!this._android) {
return;
}
var newImeOptions;
switch (data.newValue) {
case enums.ReturnKeyType.done:
newImeOptions = android.view.inputmethod.EditorInfo.IME_ACTION_DONE;
break;

case enums.ReturnKeyType.go:
newImeOptions = android.view.inputmethod.EditorInfo.IME_ACTION_GO;
break;

case enums.ReturnKeyType.next:
newImeOptions = android.view.inputmethod.EditorInfo.IME_ACTION_NEXT;
break;

case enums.ReturnKeyType.search:
newImeOptions = android.view.inputmethod.EditorInfo.IME_ACTION_SEARCH;
break;

case enums.ReturnKeyType.send:
newImeOptions = android.view.inputmethod.EditorInfo.IME_ACTION_SEND;
break;

default:
newImeOptions = android.view.inputmethod.EditorInfo.IME_ACTION_UNSPECIFIED;
break;
}
this._android.setImeOptions(newImeOptions);
};
EditableTextBase.prototype._onEditablePropertyChanged = function(data) {
if (!this._android) {
return;
}
if (data.newValue) {
this.android.setKeyListener(this._keyListenerCache);
} else {
this.android.setKeyListener(null);
}
};
EditableTextBase.prototype._onAutocapitalizationTypePropertyChanged = function(data) {
var editableTextBase = data.object;
if (!editableTextBase.android) {
return;
}
var inputType = editableTextBase.android.getInputType();
inputType = inputType & ~28672;
switch (data.newValue) {
case enums.AutocapitalizationType.none:
break;

case enums.AutocapitalizationType.words:
inputType = inputType | android.text.InputType.TYPE_TEXT_FLAG_CAP_WORDS;
break;

case enums.AutocapitalizationType.sentences:
inputType = inputType | android.text.InputType.TYPE_TEXT_FLAG_CAP_SENTENCES;
break;

case enums.AutocapitalizationType.allCharacters:
inputType = inputType | android.text.InputType.TYPE_TEXT_FLAG_CAP_CHARACTERS;
break;

default:
inputType = inputType | android.text.InputType.TYPE_TEXT_FLAG_CAP_SENTENCES;
break;
}
editableTextBase._setInputType(inputType);
};
EditableTextBase.prototype._onAutocorrectPropertyChanged = function(data) {
var editableTextBase = data.object;
if (!editableTextBase.android) {
return;
}
var inputType = editableTextBase.android.getInputType();
switch (data.newValue) {
case true:
inputType = inputType | android.text.InputType.TYPE_TEXT_FLAG_AUTO_COMPLETE;
inputType = inputType | android.text.InputType.TYPE_TEXT_FLAG_AUTO_CORRECT;
inputType = inputType & ~android.text.InputType.TYPE_TEXT_FLAG_NO_SUGGESTIONS;
break;

case false:
inputType = inputType & ~android.text.InputType.TYPE_TEXT_FLAG_AUTO_COMPLETE;
inputType = inputType & ~android.text.InputType.TYPE_TEXT_FLAG_AUTO_CORRECT;
inputType = inputType | android.text.InputType.TYPE_TEXT_FLAG_NO_SUGGESTIONS;
break;

default:
break;
}
editableTextBase._setInputType(inputType);
};
EditableTextBase.prototype._onHintPropertyChanged = function(data) {
var editableTextBase = data.object;
if (!editableTextBase.android) {
return;
}
editableTextBase.android.setHint(data.newValue + "");
};
EditableTextBase.prototype._setInputType = function(inputType) {
this.android.setInputType(inputType);
var listener = this.android.getKeyListener();
if (listener) {
this._keyListenerCache = listener;
}
if (!this.editable) {
this.android.setKeyListener(null);
}
};
return EditableTextBase;
}(common.EditableTextBase);
exports.EditableTextBase = EditableTextBase;
}, function(module, exports, __webpack_require__) {
var textBase = __webpack_require__(97);
var proxy = __webpack_require__(41);
var dependencyObservable = __webpack_require__(17);
var enums = __webpack_require__(24);
var keyboardTypeProperty = new dependencyObservable.Property("keyboardType", "EditableTextBase", new proxy.PropertyMetadata(undefined, dependencyObservable.PropertyMetadataSettings.None));
var returnKeyTypeProperty = new dependencyObservable.Property("returnKeyType", "EditableTextBase", new proxy.PropertyMetadata(undefined, dependencyObservable.PropertyMetadataSettings.None));
var editableProperty = new dependencyObservable.Property("editable", "EditableTextBase", new proxy.PropertyMetadata(true, dependencyObservable.PropertyMetadataSettings.None));
var updateTextTriggerProperty = new dependencyObservable.Property("updateTextTrigger", "EditableTextBase", new proxy.PropertyMetadata(enums.UpdateTextTrigger.textChanged, dependencyObservable.PropertyMetadataSettings.None));
var autocapitalizationTypeProperty = new dependencyObservable.Property("autocapitalizationType", "EditableTextBase", new proxy.PropertyMetadata(enums.AutocapitalizationType.sentences, dependencyObservable.PropertyMetadataSettings.None));
var autocorrectProperty = new dependencyObservable.Property("autocorrect", "EditableTextBase", new proxy.PropertyMetadata(undefined, dependencyObservable.PropertyMetadataSettings.None));
exports.hintProperty = new dependencyObservable.Property("hint", "EditableTextBase", new proxy.PropertyMetadata(""));
function onKeyboardTypePropertyChanged(data) {
var editableTextBase = data.object;
editableTextBase._onKeyboardTypePropertyChanged(data);
}
keyboardTypeProperty.metadata.onSetNativeValue = onKeyboardTypePropertyChanged;
function onReturnKeyTypePropertyChanged(data) {
var editableTextBase = data.object;
editableTextBase._onReturnKeyTypePropertyChanged(data);
}
returnKeyTypeProperty.metadata.onSetNativeValue = onReturnKeyTypePropertyChanged;
function onEditablePropertyChanged(data) {
var editableTextBase = data.object;
editableTextBase._onEditablePropertyChanged(data);
}
editableProperty.metadata.onSetNativeValue = onEditablePropertyChanged;
function onAutocapitalizationTypePropertyChanged(data) {
var editableTextBase = data.object;
editableTextBase._onAutocapitalizationTypePropertyChanged(data);
}
autocapitalizationTypeProperty.metadata.onSetNativeValue = onAutocapitalizationTypePropertyChanged;
function onAutocorrectPropertyChanged(data) {
var editableTextBase = data.object;
editableTextBase._onAutocorrectPropertyChanged(data);
}
autocorrectProperty.metadata.onSetNativeValue = onAutocorrectPropertyChanged;
function onHintPropertyChanged(data) {
var editableTextBase = data.object;
editableTextBase._onHintPropertyChanged(data);
}
exports.hintProperty.metadata.onSetNativeValue = onHintPropertyChanged;
var EditableTextBase = function(_super) {
__extends(EditableTextBase, _super);
function EditableTextBase() {
_super.apply(this, arguments);
}
Object.defineProperty(EditableTextBase.prototype, "keyboardType", {
get: function() {
return this._getValue(EditableTextBase.keyboardTypeProperty);
},
set: function(value) {
this._setValue(EditableTextBase.keyboardTypeProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(EditableTextBase.prototype, "returnKeyType", {
get: function() {
return this._getValue(EditableTextBase.returnKeyTypeProperty);
},
set: function(value) {
this._setValue(EditableTextBase.returnKeyTypeProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(EditableTextBase.prototype, "editable", {
get: function() {
return this._getValue(EditableTextBase.editableProperty);
},
set: function(value) {
this._setValue(EditableTextBase.editableProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(EditableTextBase.prototype, "updateTextTrigger", {
get: function() {
return this._getValue(EditableTextBase.updateTextTriggerProperty);
},
set: function(value) {
this._setValue(EditableTextBase.updateTextTriggerProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(EditableTextBase.prototype, "autocapitalizationType", {
get: function() {
return this._getValue(EditableTextBase.autocapitalizationTypeProperty);
},
set: function(value) {
this._setValue(EditableTextBase.autocapitalizationTypeProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(EditableTextBase.prototype, "autocorrect", {
get: function() {
return this._getValue(EditableTextBase.autocorrectProperty);
},
set: function(value) {
this._setValue(EditableTextBase.autocorrectProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(EditableTextBase.prototype, "hint", {
get: function() {
return this._getValue(EditableTextBase.hintProperty);
},
set: function(value) {
this._setValue(EditableTextBase.hintProperty, value);
},
enumerable: true,
configurable: true
});
EditableTextBase.prototype.dismissSoftInput = function() {};
EditableTextBase.prototype._onKeyboardTypePropertyChanged = function(data) {};
EditableTextBase.prototype._onReturnKeyTypePropertyChanged = function(data) {};
EditableTextBase.prototype._onEditablePropertyChanged = function(data) {};
EditableTextBase.prototype._onAutocapitalizationTypePropertyChanged = function(data) {};
EditableTextBase.prototype._onAutocorrectPropertyChanged = function(data) {};
EditableTextBase.prototype._onHintPropertyChanged = function(data) {};
EditableTextBase.keyboardTypeProperty = keyboardTypeProperty;
EditableTextBase.returnKeyTypeProperty = returnKeyTypeProperty;
EditableTextBase.editableProperty = editableProperty;
EditableTextBase.updateTextTriggerProperty = updateTextTriggerProperty;
EditableTextBase.autocapitalizationTypeProperty = autocapitalizationTypeProperty;
EditableTextBase.autocorrectProperty = autocorrectProperty;
EditableTextBase.hintProperty = exports.hintProperty;
return EditableTextBase;
}(textBase.TextBase);
exports.EditableTextBase = EditableTextBase;
}, function(module, exports, __webpack_require__) {
var common = __webpack_require__(102);
global.moduleMerge(common, exports);
var Label = function(_super) {
__extends(Label, _super);
function Label() {
_super.apply(this, arguments);
}
Object.defineProperty(Label.prototype, "android", {
get: function() {
return this._android;
},
enumerable: true,
configurable: true
});
Label.prototype._createUI = function() {
this._android = new android.widget.TextView(this._context);
this._android.setSingleLine(true);
this._android.setEllipsize(android.text.TextUtils.TruncateAt.END);
};
return Label;
}(common.Label);
exports.Label = Label;
}, function(module, exports, __webpack_require__) {
var textBase = __webpack_require__(97);
var enums_1 = __webpack_require__(24);
var Label = function(_super) {
__extends(Label, _super);
function Label() {
_super.apply(this, arguments);
}
Object.defineProperty(Label.prototype, "textWrap", {
get: function() {
return this.style.whiteSpace === enums_1.WhiteSpace.normal;
},
set: function(value) {
this.style.whiteSpace = value ? enums_1.WhiteSpace.normal : enums_1.WhiteSpace.nowrap;
},
enumerable: true,
configurable: true
});
return Label;
}(textBase.TextBase);
exports.Label = Label;
}, function(module, exports, __webpack_require__) {
var http = __webpack_require__(57);
var types = __webpack_require__(14);
var XMLHttpRequestResponseType;
(function(XMLHttpRequestResponseType) {
XMLHttpRequestResponseType.empty = "";
XMLHttpRequestResponseType.text = "text";
XMLHttpRequestResponseType.json = "json";
})(XMLHttpRequestResponseType || (XMLHttpRequestResponseType = {}));
var XMLHttpRequest = function() {
function XMLHttpRequest() {
this.UNSENT = 0;
this.OPENED = 1;
this.HEADERS_RECEIVED = 2;
this.LOADING = 3;
this.DONE = 4;
this._responseType = "";
this.textTypes = [ "text/plain", "application/xml", "text/html" ];
this._listeners = new Map();
this._readyState = this.UNSENT;
}
XMLHttpRequest.prototype.open = function(method, url, async, user, password) {
if (types.isString(method) && types.isString(url)) {
this._options = {
url: url,
method: method
};
this._options.headers = {};
if (types.isString(user)) {
this._options.headers["user"] = user;
}
if (types.isString(password)) {
this._options.headers["password"] = password;
}
this._setReadyState(this.OPENED);
}
};
XMLHttpRequest.prototype.abort = function() {
this._errorFlag = true;
this._response = null;
this._responseTextReader = null;
this._headers = null;
this._status = null;
if (this._readyState === this.UNSENT || this._readyState === this.OPENED || this._readyState === this.DONE) {
this._readyState = this.UNSENT;
} else {
this._setReadyState(this.DONE);
}
};
XMLHttpRequest.prototype.send = function(data) {
var _this = this;
this._errorFlag = false;
this._response = null;
this._responseTextReader = null;
this._headers = null;
this._status = null;
if (types.isDefined(this._options)) {
if (types.isString(data) && this._options.method !== "GET") {
this._options.content = data;
} else if (data instanceof FormData) {
this._options.content = data.toString();
}
http.request(this._options).then(function(r) {
if (!_this._errorFlag) {
_this._loadResponse(r);
}
}).catch(function(e) {
_this._errorFlag = true;
_this._setReadyState(_this.DONE, e);
});
}
};
XMLHttpRequest.prototype._loadResponse = function(r) {
this._status = r.statusCode;
this._response = r.content.raw + "";
this._headers = r.headers;
this._setReadyState(this.HEADERS_RECEIVED);
this._setReadyState(this.LOADING);
this._setResponseType();
this._responseTextReader = function() {
return r.content.toString();
};
this._addToStringOnResponse();
if (this.responseType === XMLHttpRequestResponseType.json) {
this._response = JSON.parse(this.responseText);
} else if (this.responseType === XMLHttpRequestResponseType.text) {
this._response = this.responseText;
}
this._setReadyState(this.DONE);
};
XMLHttpRequest.prototype._addToStringOnResponse = function() {
var _this = this;
if (types.isObject(this.response)) {
Object.defineProperty(this._response, "toString", {
configurable: true,
enumerable: false,
writable: true,
value: function() {
return _this.responseText;
}
});
}
};
XMLHttpRequest.prototype.isTextContentType = function(contentType) {
var result = false;
for (var i = 0; i < this.textTypes.length; i++) {
if (contentType.toLowerCase().indexOf(this.textTypes[i]) >= 0) {
result = true;
break;
}
}
return result;
};
XMLHttpRequest.prototype._setResponseType = function() {
var header = this.getResponseHeader("Content-Type");
var contentType = header && header.toLowerCase();
if (contentType) {
if (contentType.indexOf("application/json") >= 0 || contentType.indexOf("+json") >= 0) {
this.responseType = XMLHttpRequestResponseType.json;
} else if (this.isTextContentType(contentType)) {
this.responseType = XMLHttpRequestResponseType.text;
}
} else {
this.responseType = XMLHttpRequestResponseType.text;
}
};
XMLHttpRequest.prototype.addEventListener = function(eventName, handler) {
if (eventName !== "load" && eventName !== "error") {
throw new Error("Event not supported: " + eventName);
}
var handlers = this._listeners.get(eventName) || [];
handlers.push(handler);
this._listeners.set(eventName, handlers);
};
XMLHttpRequest.prototype.removeEventListener = function(eventName, toDetach) {
var handlers = this._listeners.get(eventName) || [];
handlers = handlers.filter(function(handler) {
return handler !== toDetach;
});
this._listeners.set(eventName, handlers);
};
XMLHttpRequest.prototype.emitEvent = function(eventName) {
var args = [];
for (var _i = 1; _i < arguments.length; _i++) {
args[_i - 1] = arguments[_i];
}
var handlers = this._listeners.get(eventName) || [];
handlers.forEach(function(handler) {
handler.apply(void 0, args);
});
};
XMLHttpRequest.prototype.setRequestHeader = function(header, value) {
if (types.isDefined(this._options) && types.isString(header) && types.isString(value)) {
this._options.headers[header] = value;
}
};
XMLHttpRequest.prototype.getAllResponseHeaders = function() {
if (this._readyState < 2 || this._errorFlag) {
return "";
}
var result = "";
for (var i in this._headers) {
if (i !== "set-cookie" && i !== "set-cookie2") {
result += i + ": " + this._headers[i] + "\r\n";
}
}
return result.substr(0, result.length - 2);
};
XMLHttpRequest.prototype.getResponseHeader = function(header) {
if (types.isString(header) && this._readyState > 1 && this._headers && !this._errorFlag) {
header = header.toLowerCase();
for (var i in this._headers) {
if (i.toLowerCase() === header) {
return this._headers[i];
}
}
}
return null;
};
XMLHttpRequest.prototype.overrideMimeType = function(mime) {};
Object.defineProperty(XMLHttpRequest.prototype, "readyState", {
get: function() {
return this._readyState;
},
enumerable: true,
configurable: true
});
Object.defineProperty(XMLHttpRequest.prototype, "responseType", {
get: function() {
return this._responseType;
},
set: function(value) {
if (value === XMLHttpRequestResponseType.empty || value in XMLHttpRequestResponseType) {
this._responseType = value;
} else {
throw new Error("Response type of '" + value + "' not supported.");
}
},
enumerable: true,
configurable: true
});
XMLHttpRequest.prototype._setReadyState = function(value, error) {
if (this._readyState !== value) {
this._readyState = value;
if (types.isFunction(this.onreadystatechange)) {
this.onreadystatechange();
}
}
if (this._readyState === this.DONE) {
if (this._errorFlag) {
if (types.isFunction(this.onerror)) {
this.onerror(error);
}
this.emitEvent("error", error);
} else {
if (types.isFunction(this.onload)) {
this.onload();
}
this.emitEvent("load");
}
}
};
Object.defineProperty(XMLHttpRequest.prototype, "responseText", {
get: function() {
if (types.isFunction(this._responseTextReader)) {
return this._responseTextReader();
}
return "";
},
enumerable: true,
configurable: true
});
Object.defineProperty(XMLHttpRequest.prototype, "response", {
get: function() {
return this._response;
},
enumerable: true,
configurable: true
});
Object.defineProperty(XMLHttpRequest.prototype, "status", {
get: function() {
return this._status;
},
enumerable: true,
configurable: true
});
Object.defineProperty(XMLHttpRequest.prototype, "statusText", {
get: function() {
if (this._readyState === this.UNSENT || this._readyState === this.OPENED || this._errorFlag) {
return "";
}
return statuses[this._status];
},
enumerable: true,
configurable: true
});
return XMLHttpRequest;
}();
exports.XMLHttpRequest = XMLHttpRequest;
var statuses = {
100: "Continue",
101: "Switching Protocols",
200: "OK",
201: "Created",
202: "Accepted",
203: "Non - Authoritative Information",
204: "No Content",
205: "Reset Content",
206: "Partial Content",
300: "Multiple Choices",
301: "Moved Permanently",
302: "Found",
303: "See Other",
304: "Not Modified",
305: "Use Proxy",
307: "Temporary Redirect",
400: "Bad Request",
401: "Unauthorized",
402: "Payment Required",
403: "Forbidden",
404: "Not Found",
405: "Method Not Allowed",
406: "Not Acceptable",
407: "Proxy Authentication Required",
408: "Request Timeout",
409: "Conflict",
410: "Gone",
411: "Length Required",
412: "Precondition Failed",
413: "Request Entity Too Large",
414: "Request - URI Too Long",
415: "Unsupported Media Type",
416: "Requested Range Not Satisfiable",
417: "Expectation Failed",
500: "Internal Server Error",
501: "Not Implemented",
502: "Bad Gateway",
503: "Service Unavailable",
504: "Gateway Timeout",
505: "HTTP Version Not Supported"
};
var FormData = function() {
function FormData() {
this._data = new Map();
}
FormData.prototype.append = function(name, value) {
this._data.set(name, value);
};
FormData.prototype.toString = function() {
var arr = new Array();
this._data.forEach(function(value, name, map) {
arr.push(encodeURIComponent(name) + "=" + encodeURIComponent(value));
});
return arr.join("&");
};
return FormData;
}();
exports.FormData = FormData;
}, function(module, exports, __webpack_require__) {
(function() {
"use strict";
exports.XMLHttpRequest = global.XMLHttpRequest;
exports.FormData = global.FormData;
if (!exports.XMLHttpRequest) {
var xhr = __webpack_require__(103);
exports.XMLHttpRequest = xhr.XMLHttpRequest;
exports.FormData = xhr.FormData;
}
function normalizeName(name) {
if (typeof name !== "string") {
name = name.toString();
}
if (/[^a-z0-9\-#$%&'*+.\^_`|~]/i.test(name)) {
throw new TypeError("Invalid character in header field name");
}
return name.toLowerCase();
}
function normalizeValue(value) {
if (typeof value !== "string") {
value = value.toString();
}
return value;
}
function Headers(headers) {
this.map = {};
if (headers instanceof Headers) {
headers.forEach(function(value, name) {
this.append(name, value);
}, this);
} else if (headers) {
Object.getOwnPropertyNames(headers).forEach(function(name) {
this.append(name, headers[name]);
}, this);
}
}
Headers.prototype.append = function(name, value) {
name = normalizeName(name);
value = normalizeValue(value);
var list = this.map[name];
if (!list) {
list = [];
this.map[name] = list;
}
list.push(value);
};
Headers.prototype["delete"] = function(name) {
delete this.map[normalizeName(name)];
};
Headers.prototype.get = function(name) {
var values = this.map[normalizeName(name)];
return values ? values[0] : null;
};
Headers.prototype.getAll = function(name) {
return this.map[normalizeName(name)] || [];
};
Headers.prototype.has = function(name) {
return this.map.hasOwnProperty(normalizeName(name));
};
Headers.prototype.set = function(name, value) {
this.map[normalizeName(name)] = [ normalizeValue(value) ];
};
Headers.prototype.forEach = function(callback, thisArg) {
Object.getOwnPropertyNames(this.map).forEach(function(name) {
this.map[name].forEach(function(value) {
callback.call(thisArg, value, name, this);
}, this);
}, this);
};
function consumed(body) {
if (body.bodyUsed) {
return Promise.reject(new TypeError("Already read"));
}
body.bodyUsed = true;
}
function fileReaderReady(reader) {
return new Promise(function(resolve, reject) {
reader.onload = function() {
resolve(reader.result);
};
reader.onerror = function() {
reject(reader.error);
};
});
}
function readBlobAsArrayBuffer(blob) {
var reader = new FileReader();
reader.readAsArrayBuffer(blob);
return fileReaderReady(reader);
}
function readBlobAsText(blob) {
var reader = new FileReader();
reader.readAsText(blob);
return fileReaderReady(reader);
}
var support = {
blob: "FileReader" in exports && "Blob" in exports && function() {
try {
new Blob();
return true;
} catch (e) {
return false;
}
}(),
formData: "FormData" in exports
};
function Body() {
this.bodyUsed = false;
this._initBody = function(body) {
this._bodyInit = body;
if (typeof body === "string") {
this._bodyText = body;
} else if (support.blob && Blob.prototype.isPrototypeOf(body)) {
this._bodyBlob = body;
} else if (support.formData && exports.FormData.prototype.isPrototypeOf(body)) {
this._bodyFormData = body;
} else if (!body) {
this._bodyText = "";
} else {
throw new Error("unsupported BodyInit type");
}
};
if (support.blob) {
this.blob = function() {
var rejected = consumed(this);
if (rejected) {
return rejected;
}
if (this._bodyBlob) {
return Promise.resolve(this._bodyBlob);
} else if (this._bodyFormData) {
throw new Error("could not read FormData body as blob");
} else {
return Promise.resolve(new Blob([ this._bodyText ]));
}
};
this.arrayBuffer = function() {
return this.blob().then(readBlobAsArrayBuffer);
};
this.text = function() {
var rejected = consumed(this);
if (rejected) {
return rejected;
}
if (this._bodyBlob) {
return readBlobAsText(this._bodyBlob);
} else if (this._bodyFormData) {
throw new Error("could not read FormData body as text");
} else {
return Promise.resolve(this._bodyText);
}
};
} else {
this.text = function() {
var rejected = consumed(this);
return rejected ? rejected : Promise.resolve(this._bodyText);
};
}
if (support.formData) {
this.formData = function() {
return this.text().then(decode);
};
}
this.json = function() {
return this.text().then(JSON.parse);
};
return this;
}
var methods = [ "DELETE", "GET", "HEAD", "OPTIONS", "POST", "PUT" ];
function normalizeMethod(method) {
var upcased = method.toUpperCase();
return methods.indexOf(upcased) > -1 ? upcased : method;
}
function Request(url, options) {
options = options || {};
this.url = url;
this.credentials = options.credentials || "omit";
this.headers = new Headers(options.headers);
this.method = normalizeMethod(options.method || "GET");
this.mode = options.mode || null;
this.referrer = null;
if ((this.method === "GET" || this.method === "HEAD") && options.body) {
throw new TypeError("Body not allowed for GET or HEAD requests");
}
this._initBody(options.body);
}
function decode(body) {
var form = new exports.FormData();
body.trim().split("&").forEach(function(bytes) {
if (bytes) {
var split = bytes.split("=");
var name = split.shift().replace(/\+/g, " ");
var value = split.join("=").replace(/\+/g, " ");
form.append(decodeURIComponent(name), decodeURIComponent(value));
}
});
return form;
}
function headers(xhr) {
var head = new Headers();
var pairs = xhr.getAllResponseHeaders().trim().split("\n");
pairs.forEach(function(header) {
var split = header.trim().split(":");
var key = split.shift().trim();
var value = split.join(":").trim();
head.append(key, value);
});
return head;
}
Body.call(Request.prototype);
function Response(bodyInit, options) {
if (!options) {
options = {};
}
this._initBody(bodyInit);
this.type = "default";
this.url = null;
this.status = options.status;
this.ok = this.status >= 200 && this.status < 300;
this.statusText = options.statusText;
this.headers = options.headers instanceof Headers ? options.headers : new Headers(options.headers);
this.url = options.url || "";
}
Body.call(Response.prototype);
exports.Headers = Headers;
exports.Request = Request;
exports.Response = Response;
exports.fetch = function(input, init) {
var request;
if (Request.prototype.isPrototypeOf(input) && !init) {
request = input;
} else {
request = new Request(input, init);
}
return new Promise(function(resolve, reject) {
var xhr = new exports.XMLHttpRequest();
function responseURL() {
if ("responseURL" in xhr) {
return xhr.responseURL;
}
if (/^X-Request-URL:/m.test(xhr.getAllResponseHeaders())) {
return xhr.getResponseHeader("X-Request-URL");
}
return;
}
xhr.onload = function() {
var status = xhr.status === 1223 ? 204 : xhr.status;
if (status < 100 || status > 599) {
reject(new TypeError("Network request failed"));
return;
}
var options = {
status: status,
statusText: xhr.statusText,
headers: headers(xhr),
url: responseURL()
};
resolve(new Response(xhr.responseText, options));
};
xhr.onerror = function(error) {
reject(new TypeError([ "Network request failed:", error.message ].join(" ")));
};
xhr.open(request.method, request.url, true);
if (request.credentials === "include") {
xhr.withCredentials = true;
}
if ("responseType" in xhr && support.blob) {
xhr.responseType = "blob";
}
request.headers.forEach(function(value, name) {
xhr.setRequestHeader(name, value);
});
xhr.send(typeof request._bodyInit === "undefined" ? null : request._bodyInit);
});
};
exports.fetch.polyfill = true;
})();
}, function(module, exports, __webpack_require__) {
var trace = __webpack_require__(16);
var platform = __webpack_require__(35);
var Console = function() {
function Console() {
this.TAG = "JS";
this.dir = this.dump;
this._timers = {};
this._stripFirstTwoLinesRegEx = /^([^\n]*?\n){2}((.|\n)*)$/gim;
}
Console.prototype.sprintf = function(message) {
var regex = /%%|%(\d+\$)?([-+\'#0 ]*)(\*\d+\$|\*|\d+)?(\.(\*\d+\$|\*|\d+))?([scboxXuideEfFgGj])/g;
var a = arguments;
var i = 0;
var format = a[i++];
var pad = function(str, len, chr, leftJustify) {
if (!chr) {
chr = " ";
}
var padding = str.length >= len ? "" : new Array(1 + len - str.length >>> 0).join(chr);
return leftJustify ? str + padding : padding + str;
};
var justify = function(value, prefix, leftJustify, minWidth, zeroPad, customPadChar) {
var diff = minWidth - value.length;
if (diff > 0) {
if (leftJustify || !zeroPad) {
value = pad(value, minWidth, customPadChar, leftJustify);
} else {
value = value.slice(0, prefix.length) + pad("", diff, "0", true) + value.slice(prefix.length);
}
}
return value;
};
var formatBaseX = function(value, base, prefix, leftJustify, minWidth, precision, zeroPad) {
var number = value >>> 0;
prefix = prefix && number && {
2: "0b",
8: "0",
16: "0x"
}[base] || "";
value = prefix + pad(number.toString(base), precision || 0, "0", false);
return justify(value, prefix, leftJustify, minWidth, zeroPad);
};
var formatString = function(value, leftJustify, minWidth, precision, zeroPad, customPadChar) {
if (precision != null) {
value = value.slice(0, precision);
}
return justify(value, "", leftJustify, minWidth, zeroPad, customPadChar);
};
var that = this;
var doFormat = function(substring, valueIndex, flags, minWidth, _, precision, type) {
var number, prefix, method, textTransform, value;
if (substring === "%%") {
return "%";
}
var leftJustify = false;
var positivePrefix = "";
var zeroPad = false;
var prefixBaseX = false;
var customPadChar = " ";
var flagsl = flags.length;
for (var j = 0; flags && j < flagsl; j++) {
switch (flags.charAt(j)) {
case " ":
positivePrefix = " ";
break;

case "+":
positivePrefix = "+";
break;

case "-":
leftJustify = true;
break;

case "'":
customPadChar = flags.charAt(j + 1);
break;

case "0":
zeroPad = true;
customPadChar = "0";
break;

case "#":
prefixBaseX = true;
break;
}
}
if (!minWidth) {
minWidth = 0;
} else if (minWidth === "*") {
minWidth = +a[i++];
} else if (minWidth.charAt(0) === "*") {
minWidth = +a[minWidth.slice(1, -1)];
} else {
minWidth = +minWidth;
}
if (minWidth < 0) {
minWidth = -minWidth;
leftJustify = true;
}
if (!isFinite(minWidth)) {
throw new Error("sprintf: (minimum-)width must be finite");
}
if (!precision) {
precision = "fFeE".indexOf(type) > -1 ? 6 : type === "d" ? 0 : undefined;
} else if (precision === "*") {
precision = +a[i++];
} else if (precision.charAt(0) === "*") {
precision = +a[precision.slice(1, -1)];
} else {
precision = +precision;
}
value = valueIndex ? a[valueIndex.slice(0, -1)] : a[i++];
switch (type) {
case "s":
return formatString(String(value), leftJustify, minWidth, precision, zeroPad, customPadChar);

case "c":
return formatString(String.fromCharCode(+value), leftJustify, minWidth, precision, zeroPad);

case "b":
return formatBaseX(value, 2, prefixBaseX, leftJustify, minWidth, precision, zeroPad);

case "o":
return formatBaseX(value, 8, prefixBaseX, leftJustify, minWidth, precision, zeroPad);

case "x":
return formatBaseX(value, 16, prefixBaseX, leftJustify, minWidth, precision, zeroPad);

case "X":
return formatBaseX(value, 16, prefixBaseX, leftJustify, minWidth, precision, zeroPad).toUpperCase();

case "u":
return formatBaseX(value, 10, prefixBaseX, leftJustify, minWidth, precision, zeroPad);

case "i":
case "d":
number = +value || 0;
number = Math.round(number - number % 1);
prefix = number < 0 ? "-" : positivePrefix;
value = prefix + pad(String(Math.abs(number)), precision, "0", false);
return justify(value, prefix, leftJustify, minWidth, zeroPad);

case "e":
case "E":
case "f":
case "F":
case "g":
case "G":
number = +value;
prefix = number < 0 ? "-" : positivePrefix;
method = [ "toExponential", "toFixed", "toPrecision" ]["efg".indexOf(type.toLowerCase())];
textTransform = [ "toString", "toUpperCase" ]["eEfFgG".indexOf(type) % 2];
value = prefix + Math.abs(number)[method](precision);
return justify(value, prefix, leftJustify, minWidth, zeroPad)[textTransform]();

case "j":
return that.createDump(value);

default:
return substring;
}
};
return format.replace(regex, doFormat);
};
Console.prototype.formatParams = function(message) {
if (arguments.length <= 1) {
return "" + message;
}
var res = this.sprintf.apply(this, arguments);
if (res === message) {
var args = Array.prototype.slice.call(arguments);
return args.join(" ");
}
return res;
};
Console.prototype.timeMillis = function() {
return java.lang.System.nanoTime() / 1e6;
};
Console.prototype.time = function(reportName) {
var name = reportName ? "__" + reportName : "__internal_console_time__";
if ("undefined" === typeof this._timers[name] || this._timers.hasOwnProperty(name)) {
this._timers[name] = this.timeMillis();
} else {
this.warn("invalid name for timer console.time(" + reportName + ")");
}
};
Console.prototype.timeEnd = function(reportName) {
var name = reportName ? "__" + reportName : "__internal_console_time__";
if (this._timers.hasOwnProperty(name)) {
var val = this._timers[name];
if (val) {
var time = this.timeMillis();
this.info("console.time(" + reportName + "): %.6f ms", time - val);
this._timers[name] = undefined;
} else {
this.warn("undefined console.time(" + reportName + ")");
}
}
};
Console.prototype.assert = function(test, message) {
var formatParams = [];
for (var _i = 2; _i < arguments.length; _i++) {
formatParams[_i - 2] = arguments[_i];
}
if (!test) {
Array.prototype.shift.apply(arguments);
var formatedMessage = this.formatParams.apply(this, arguments);
this.error(formatedMessage, trace.messageType.error);
if (global.__consoleMessage) {
global.__consoleMessage(formatedMessage, "error");
}
}
};
Console.prototype.info = function(message) {
var formatParams = [];
for (var _i = 1; _i < arguments.length; _i++) {
formatParams[_i - 1] = arguments[_i];
}
this.logMessage(this.formatParams.apply(this, arguments), trace.messageType.info);
};
Console.prototype.warn = function(message) {
var formatParams = [];
for (var _i = 1; _i < arguments.length; _i++) {
formatParams[_i - 1] = arguments[_i];
}
var formatedMessage = this.formatParams.apply(this, arguments);
this.logMessage(formatedMessage, trace.messageType.warn);
if (global.__consoleMessage) {
global.__consoleMessage(formatedMessage, "warning");
}
};
Console.prototype.error = function(message) {
var formatParams = [];
for (var _i = 1; _i < arguments.length; _i++) {
formatParams[_i - 1] = arguments[_i];
}
var formatedMessage = this.formatParams.apply(this, arguments);
this.logMessage(formatedMessage, trace.messageType.error);
if (global.__consoleMessage) {
global.__consoleMessage(formatedMessage, "error");
}
};
Console.prototype.log = function(message) {
var formatParams = [];
for (var _i = 1; _i < arguments.length; _i++) {
formatParams[_i - 1] = arguments[_i];
}
var formatedMessage = this.formatParams.apply(this, arguments);
this.logMessage(formatedMessage, trace.messageType.log);
if (global.__consoleMessage) {
global.__consoleMessage(formatedMessage, "log");
}
};
Console.prototype.logMessage = function(message, messageType) {
if (!global.android) {
return;
}
var arrayToLog = [];
if (message.length > 4e3) {
var i;
for (i = 0; i * 4e3 < message.length; i++) {
arrayToLog.push(message.substr(i * 4e3, 4e3));
}
} else {
arrayToLog.push(message);
}
for (i = 0; i < arrayToLog.length; i++) {
switch (messageType) {
case trace.messageType.log:
{
android.util.Log.v(this.TAG, arrayToLog[i]);
break;
}

case trace.messageType.warn:
{
android.util.Log.w(this.TAG, arrayToLog[i]);
break;
}

case trace.messageType.error:
{
android.util.Log.e(this.TAG, arrayToLog[i]);
break;
}

case trace.messageType.info:
{
android.util.Log.i(this.TAG, arrayToLog[i]);
break;
}
}
}
};
Console.prototype.trace = function() {
var stack;
stack = new Error().stack.toString();
stack = stack.replace(this._stripFirstTwoLinesRegEx, "$2");
stack = "Stack Trace:\n" + stack;
this.log(stack);
};
Console.prototype.createDump = function(obj) {
var result = [];
if (null == obj) {
result.push("=== dump(): object is 'null' ===");
return result.join("");
}
if ("undefined" === typeof obj) {
result.push("=== dump(): object is 'undefined' ===");
return result.join("");
}
result.push("=== dump(): dumping members ===\n");
var stringifyValueCache = [];
var stringifyKeyCache = [];
result.push(JSON.stringify(obj, function(k, v) {
stringifyKeyCache.push(k);
if (typeof v === "object" && v !== null) {
if (stringifyValueCache.indexOf(v) !== -1) {
return "#CR:" + (v.toString ? v.toString() : v);
}
stringifyValueCache.push(v);
}
if (typeof v === "function") {
return k + "()" + v;
}
return v;
}, 4));
result.push("\n=== dump(): dumping function and properties names ===\n");
for (var id in obj) {
try {
if (typeof obj[id] === "function") {
result.push(id + "()\n");
} else {
if (typeof obj[id] !== "object" && stringifyKeyCache.indexOf(id) === -1) {
result.push(id + ": " + (obj[id] + "\n"));
}
}
} catch (err) {
result.push(id + ": inaccessible");
}
}
stringifyValueCache = null;
stringifyKeyCache = null;
result.push("=== dump(): finished ===");
return result.join("");
};
Console.prototype.dump = function(obj) {
var dump = this.createDump(obj);
if (platform.device.os === platform.platformNames.android) {
this.log(dump);
} else if (platform.device.os === platform.platformNames.ios) {
console.log(dump);
}
};
return Console;
}();
exports.Console = Console;
}, function(module, exports, __webpack_require__) {
if (global.TNS_WEBPACK) {
__webpack_require__(5);
global.registerModule("text/formatted-string", function() {
return __webpack_require__(49);
});
global.registerModule("text/span", function() {
return __webpack_require__(107);
});
global.registerModule("ui/action-bar", function() {
return __webpack_require__(76);
});
global.registerModule("ui/activity-indicator", function() {
return __webpack_require__(109);
});
global.registerModule("ui/border", function() {
return __webpack_require__(111);
});
global.registerModule("ui/button", function() {
return __webpack_require__(39);
});
global.registerModule("ui/content-view", function() {
return __webpack_require__(75);
});
global.registerModule("ui/date-picker", function() {
return __webpack_require__(112);
});
global.registerModule("ui/html-view", function() {
return __webpack_require__(114);
});
global.registerModule("ui/image", function() {
return __webpack_require__(116);
});
global.registerModule("ui/label", function() {
return __webpack_require__(101);
});
global.registerModule("ui/layouts/absolute-layout", function() {
return __webpack_require__(88);
});
global.registerModule("ui/layouts/dock-layout", function() {
return __webpack_require__(86);
});
global.registerModule("ui/layouts/grid-layout", function() {
return __webpack_require__(78);
});
global.registerModule("ui/layouts/stack-layout", function() {
return __webpack_require__(120);
});
global.registerModule("ui/list-picker", function() {
return __webpack_require__(122);
});
global.registerModule("ui/page", function() {
return __webpack_require__(73);
});
global.registerModule("ui/placeholder", function() {
return __webpack_require__(124);
});
global.registerModule("ui/progress", function() {
return __webpack_require__(126);
});
global.registerModule("ui/proxy-view-container", function() {
return __webpack_require__(128);
});
global.registerModule("ui/repeater", function() {
return __webpack_require__(129);
});
global.registerModule("ui/scroll-view", function() {
return __webpack_require__(130);
});
global.registerModule("ui/search-bar", function() {
return __webpack_require__(132);
});
global.registerModule("ui/segmented-bar", function() {
return __webpack_require__(134);
});
global.registerModule("ui/slider", function() {
return __webpack_require__(136);
});
global.registerModule("ui/switch", function() {
return __webpack_require__(138);
});
global.registerModule("ui/tab-view", function() {
return __webpack_require__(140);
});
global.registerModule("ui/web-view", function() {
return __webpack_require__(142);
});
global.registerModule("ui/text-field", function() {
return __webpack_require__(95);
});
global.registerModule("ui/text-view", function() {
return __webpack_require__(144);
});
global.registerModule("ui/time-picker", function() {
return __webpack_require__(146);
});
global.registerModule("ui/list-view", function() {
return __webpack_require__(148);
});
}
}, function(module, exports, __webpack_require__) {
var spanCommon = __webpack_require__(108);
var enums = __webpack_require__(24);
var utils = __webpack_require__(27);
var fontModule = __webpack_require__(30);
global.moduleMerge(spanCommon, exports);
var CustomTypefaceSpanClass;
function ensureCustomTypefaceSpanClass() {
if (CustomTypefaceSpanClass) {
return;
}
var CustomTypefaceSpan = function(_super) {
__extends(CustomTypefaceSpan, _super);
function CustomTypefaceSpan(family, typeface) {
_super.call(this, family);
this.typeface = typeface;
return global.__native(this);
}
CustomTypefaceSpan.prototype.updateDrawState = function(ds) {
CustomTypefaceSpan.applyCustomTypeFace(ds, this.typeface);
};
CustomTypefaceSpan.prototype.updateMeasureState = function(paint) {
CustomTypefaceSpan.applyCustomTypeFace(paint, this.typeface);
};
CustomTypefaceSpan.applyCustomTypeFace = function(paint, tf) {
var oldStyle;
var old = paint.getTypeface();
if (old === null) {
oldStyle = 0;
} else {
oldStyle = old.getStyle();
}
var fake = oldStyle & ~tf.getStyle();
if ((fake & android.graphics.Typeface.BOLD) !== 0) {
paint.setFakeBoldText(true);
}
if ((fake & android.graphics.Typeface.ITALIC) !== 0) {
paint.setTextSkewX(-.25);
}
paint.setTypeface(tf);
};
return CustomTypefaceSpan;
}(android.text.style.TypefaceSpan);
CustomTypefaceSpanClass = CustomTypefaceSpan;
}
var Span = function(_super) {
__extends(Span, _super);
function Span() {
_super.apply(this, arguments);
}
Span.prototype.updateSpanModifiers = function(parent) {
_super.prototype.updateSpanModifiers.call(this, parent);
var realFontFamily = this.fontFamily || (parent ? parent.fontFamily : undefined);
if (realFontFamily) {
var font = new fontModule.Font(realFontFamily, 0, realFontAttributes & enums.FontAttributes.Italic ? enums.FontStyle.italic : enums.FontStyle.normal, realFontAttributes & enums.FontAttributes.Bold ? enums.FontWeight.bold : enums.FontWeight.normal);
ensureCustomTypefaceSpanClass();
var typefaceSpan = new CustomTypefaceSpanClass(realFontFamily, font.getAndroidTypeface());
this.spanModifiers.push(typefaceSpan);
}
var realFontSize = this.fontSize || (parent ? parent.fontSize : undefined) || (parent && parent.parent ? parent.parent.style.fontSize : undefined);
if (realFontSize) {
this.spanModifiers.push(new android.text.style.AbsoluteSizeSpan(realFontSize * utils.layout.getDisplayDensity()));
}
var realForegroundColor = this.foregroundColor || (parent ? parent.foregroundColor : undefined) || (parent && parent.parent ? parent.parent.style.color : undefined);
if (realForegroundColor) {
this.spanModifiers.push(new android.text.style.ForegroundColorSpan(realForegroundColor.android));
}
var realBackgroundColor = this.backgroundColor || (parent ? parent.backgroundColor : undefined) || (parent && parent.parent ? parent.parent.style.backgroundColor : undefined);
if (realBackgroundColor) {
this.spanModifiers.push(new android.text.style.BackgroundColorSpan(realBackgroundColor.android));
}
var realFontAttributes = this.fontAttributes || (parent ? parent.fontAttributes : undefined);
if (realFontAttributes) {
if (realFontAttributes & enums.FontAttributes.Bold && realFontAttributes & enums.FontAttributes.Italic) {
this.spanModifiers.push(new android.text.style.StyleSpan(android.graphics.Typeface.BOLD_ITALIC));
} else if (realFontAttributes & enums.FontAttributes.Bold) {
this.spanModifiers.push(new android.text.style.StyleSpan(android.graphics.Typeface.BOLD));
} else if (realFontAttributes & enums.FontAttributes.Italic) {
this.spanModifiers.push(new android.text.style.StyleSpan(android.graphics.Typeface.ITALIC));
}
}
var realUnderline = this.underline || (parent ? parent.underline : undefined);
if (realUnderline) {
this.spanModifiers.push(new android.text.style.UnderlineSpan());
}
var realStrikethrough = this.strikethrough || (parent ? parent.strikethrough : undefined);
if (realStrikethrough) {
this.spanModifiers.push(new android.text.style.StrikethroughSpan());
}
};
return Span;
}(spanCommon.Span);
exports.Span = Span;
}, function(module, exports, __webpack_require__) {
var colorModule = __webpack_require__(19);
var bindable = __webpack_require__(42);
var types = __webpack_require__(14);
var enums = __webpack_require__(24);
var Span = function(_super) {
__extends(Span, _super);
function Span() {
_super.apply(this, arguments);
}
Object.defineProperty(Span.prototype, "fontFamily", {
get: function() {
return this._fontFamily;
},
set: function(value) {
if (this._fontFamily !== value) {
this._fontFamily = value;
this.updateAndNotify();
}
},
enumerable: true,
configurable: true
});
Object.defineProperty(Span.prototype, "fontSize", {
get: function() {
return this._fontSize;
},
set: function(value) {
var fSize;
if (types.isString(value)) {
fSize = parseInt(value);
} else {
fSize = value;
}
if (this._fontSize !== fSize) {
this._fontSize = fSize;
this.updateAndNotify();
}
},
enumerable: true,
configurable: true
});
Span.prototype._getColorValue = function(value) {
var result;
if (types.isString(value) && colorModule.Color.isValid(value)) {
result = new colorModule.Color(value);
} else {
result = value;
}
return result;
};
Object.defineProperty(Span.prototype, "foregroundColor", {
get: function() {
return this._foregroundColor;
},
set: function(value) {
var convertedColor = this._getColorValue(value);
if (this._foregroundColor !== convertedColor) {
this._foregroundColor = convertedColor;
this.updateAndNotify();
}
},
enumerable: true,
configurable: true
});
Object.defineProperty(Span.prototype, "backgroundColor", {
get: function() {
return this._backgroundColor;
},
set: function(value) {
var convertedColor = this._getColorValue(value);
if (this._backgroundColor !== convertedColor) {
this._backgroundColor = convertedColor;
this.updateAndNotify();
}
},
enumerable: true,
configurable: true
});
Object.defineProperty(Span.prototype, "underline", {
get: function() {
return this._underline;
},
set: function(value) {
var underlineIntValue;
if (types.isString(value)) {
underlineIntValue = parseInt(value);
} else {
underlineIntValue = value;
}
if (this._underline !== underlineIntValue) {
this._underline = underlineIntValue;
this.updateAndNotify();
}
},
enumerable: true,
configurable: true
});
Object.defineProperty(Span.prototype, "strikethrough", {
get: function() {
return this._strikethrough;
},
set: function(value) {
var strikethroughIntValue;
if (types.isString(value)) {
strikethroughIntValue = parseInt(value);
} else {
strikethroughIntValue = value;
}
if (this._strikethrough !== strikethroughIntValue) {
this._strikethrough = strikethroughIntValue;
this.updateAndNotify();
}
},
enumerable: true,
configurable: true
});
Object.defineProperty(Span.prototype, "fontAttributes", {
get: function() {
return this._fontAttributes;
},
set: function(value) {
if (this._fontAttributes !== value) {
this._fontAttributes = value;
this.updateAndNotify();
}
},
enumerable: true,
configurable: true
});
Object.defineProperty(Span.prototype, "spanModifiers", {
get: function() {
if (!this._spanModifiers) {
this._spanModifiers = new Array();
}
return this._spanModifiers;
},
enumerable: true,
configurable: true
});
Object.defineProperty(Span.prototype, "text", {
get: function() {
return this._text;
},
set: function(value) {
if (this._text !== value) {
this._setTextInternal(value);
this.updateAndNotify();
}
},
enumerable: true,
configurable: true
});
Span.prototype._setTextInternal = function(value) {
this._text = value;
};
Object.defineProperty(Span.prototype, "parentFormattedString", {
get: function() {
return this._parentFormattedString;
},
set: function(value) {
if (this._parentFormattedString !== value) {
this._parentFormattedString = value;
this.updateAndNotify();
}
},
enumerable: true,
configurable: true
});
Span.prototype.updateSpanModifiers = function(parent) {
if (this._isInEditMode) {
throw new Error("Cannot update span modifiers during update!");
}
this._spanModifiers = new Array();
};
Span.prototype.beginEdit = function() {
this._isInEditMode = true;
};
Span.prototype.updateAndNotify = function() {
if (!this._isInEditMode) {
this.updateSpanModifiers(this.parentFormattedString);
this.notify(this._createPropertyChangeData(".", this));
}
};
Span.prototype.endEdit = function() {
this._isInEditMode = false;
this.updateAndNotify();
};
Span.prototype._applyXmlAttribute = function(attribute, value) {
if (attribute === "fontAttributes") {
if (value.indexOf(",")) {
var fontAttr = value.split(",");
var fontAttrValue;
var j;
for (j = 0; j < fontAttr.length; j++) {
fontAttrValue = Span.getFontAttributeFromString(fontAttr[j]);
this.fontAttributes |= fontAttrValue;
}
} else {
this.fontAttributes |= value;
}
return true;
} else {
return false;
}
};
Span.getFontAttributeFromString = function(fontAttr) {
var fontAttrTrimmedAndLowerCase = fontAttr.trim().toLowerCase();
if (fontAttrTrimmedAndLowerCase === "bold") {
return enums.FontAttributes.Bold;
} else if (fontAttrTrimmedAndLowerCase === "italic") {
return enums.FontAttributes.Italic;
} else {
return enums.FontAttributes.Normal;
}
};
return Span;
}(bindable.Bindable);
exports.Span = Span;
}, function(module, exports, __webpack_require__) {
var aiCommon = __webpack_require__(110);
var enums = __webpack_require__(24);
var style = __webpack_require__(15);
function onBusyPropertyChanged(data) {
var indicator = data.object;
if (!indicator.android) {
return;
}
if (indicator.visibility === enums.Visibility.visible) {
indicator.android.setVisibility(data.newValue ? android.view.View.VISIBLE : android.view.View.INVISIBLE);
}
}
aiCommon.ActivityIndicator.busyProperty.metadata.onSetNativeValue = onBusyPropertyChanged;
global.moduleMerge(aiCommon, exports);
var ActivityIndicator = function(_super) {
__extends(ActivityIndicator, _super);
function ActivityIndicator() {
_super.apply(this, arguments);
}
ActivityIndicator.prototype._createUI = function() {
this._android = new android.widget.ProgressBar(this._context);
this._android.setVisibility(android.view.View.INVISIBLE);
this._android.setIndeterminate(true);
};
Object.defineProperty(ActivityIndicator.prototype, "android", {
get: function() {
return this._android;
},
enumerable: true,
configurable: true
});
return ActivityIndicator;
}(aiCommon.ActivityIndicator);
exports.ActivityIndicator = ActivityIndicator;
var ActivityIndicatorStyler = function() {
function ActivityIndicatorStyler() {}
ActivityIndicatorStyler.setColorProperty = function(view, newValue) {
var bar = view._nativeView;
bar.getIndeterminateDrawable().setColorFilter(newValue, android.graphics.PorterDuff.Mode.SRC_IN);
};
ActivityIndicatorStyler.resetColorProperty = function(view, nativeValue) {
var bar = view._nativeView;
bar.getIndeterminateDrawable().clearColorFilter();
};
ActivityIndicatorStyler.setActivityIndicatorVisibilityProperty = function(view, newValue) {
ActivityIndicatorStyler.setIndicatorVisibility(view.busy, newValue, view._nativeView);
};
ActivityIndicatorStyler.resetActivityIndicatorVisibilityProperty = function(view, nativeValue) {
ActivityIndicatorStyler.setIndicatorVisibility(view.busy, enums.Visibility.visible, view._nativeView);
};
ActivityIndicatorStyler.setIndicatorVisibility = function(isBusy, visibility, nativeView) {
if (visibility === enums.Visibility.collapsed || visibility === enums.Visibility.collapse) {
nativeView.setVisibility(android.view.View.GONE);
} else {
nativeView.setVisibility(isBusy ? android.view.View.VISIBLE : android.view.View.INVISIBLE);
}
};
ActivityIndicatorStyler.registerHandlers = function() {
style.registerHandler(style.colorProperty, new style.StylePropertyChangedHandler(ActivityIndicatorStyler.setColorProperty, ActivityIndicatorStyler.resetColorProperty), "ActivityIndicator");
style.registerHandler(style.visibilityProperty, new style.StylePropertyChangedHandler(ActivityIndicatorStyler.setActivityIndicatorVisibilityProperty, ActivityIndicatorStyler.resetActivityIndicatorVisibilityProperty), "ActivityIndicator");
};
return ActivityIndicatorStyler;
}();
exports.ActivityIndicatorStyler = ActivityIndicatorStyler;
ActivityIndicatorStyler.registerHandlers();
}, function(module, exports, __webpack_require__) {
var view_1 = __webpack_require__(12);
var dependency_observable_1 = __webpack_require__(17);
var proxy_1 = __webpack_require__(41);
var busyProperty = new dependency_observable_1.Property("busy", "ActivityIndicator", new proxy_1.PropertyMetadata(false));
var ActivityIndicator = function(_super) {
__extends(ActivityIndicator, _super);
function ActivityIndicator() {
_super.apply(this, arguments);
}
Object.defineProperty(ActivityIndicator.prototype, "busy", {
get: function() {
return this._getValue(ActivityIndicator.busyProperty);
},
set: function(value) {
this._setValue(ActivityIndicator.busyProperty, value);
},
enumerable: true,
configurable: true
});
ActivityIndicator.busyProperty = busyProperty;
return ActivityIndicator;
}(view_1.View);
exports.ActivityIndicator = ActivityIndicator;
}, function(module, exports, __webpack_require__) {
var contentView = __webpack_require__(75);
var viewModule = __webpack_require__(12);
var utils = __webpack_require__(27);
var types = __webpack_require__(14);
var Border = function(_super) {
__extends(Border, _super);
function Border() {
_super.apply(this, arguments);
}
Object.defineProperty(Border.prototype, "cornerRadius", {
get: function() {
if (types.isNumber(this.borderRadius)) {
return this.borderRadius;
}
return 0;
},
set: function(value) {
this.borderRadius = value;
},
enumerable: true,
configurable: true
});
Border.prototype.onMeasure = function(widthMeasureSpec, heightMeasureSpec) {
var width = utils.layout.getMeasureSpecSize(widthMeasureSpec);
var widthMode = utils.layout.getMeasureSpecMode(widthMeasureSpec);
var height = utils.layout.getMeasureSpecSize(heightMeasureSpec);
var heightMode = utils.layout.getMeasureSpecMode(heightMeasureSpec);
var density = utils.layout.getDisplayDensity();
var borderWidth = 0;
if (types.isNumber(this.borderWidth)) {
borderWidth = this.borderWidth;
}
var borderSize = 2 * borderWidth * density;
var result = viewModule.View.measureChild(this, this.layoutView, utils.layout.makeMeasureSpec(width - borderSize, widthMode), utils.layout.makeMeasureSpec(height - borderSize, heightMode));
var widthAndState = viewModule.View.resolveSizeAndState(result.measuredWidth + borderSize, width, widthMode, 0);
var heightAndState = viewModule.View.resolveSizeAndState(result.measuredHeight + borderSize, height, heightMode, 0);
this.setMeasuredDimension(widthAndState, heightAndState);
};
Border.prototype.onLayout = function(left, top, right, bottom) {
var density = utils.layout.getDisplayDensity();
var borderWidth = 0;
if (types.isNumber(this.borderWidth)) {
borderWidth = this.borderWidth;
}
var borderSize = borderWidth * density;
viewModule.View.layoutChild(this, this.layoutView, borderSize, borderSize, right - left - borderSize, bottom - top - borderSize);
};
Border = __decorate([ Deprecated ], Border);
return Border;
}(contentView.ContentView);
exports.Border = Border;
}, function(module, exports, __webpack_require__) {
var common = __webpack_require__(113);
var types = __webpack_require__(14);
function onYearPropertyChanged(data) {
var picker = data.object;
if (picker.android && picker.android.getYear() !== data.newValue) {
updateNativeDate(picker);
}
}
common.DatePicker.yearProperty.metadata.onSetNativeValue = onYearPropertyChanged;
function onMonthPropertyChanged(data) {
var picker = data.object;
if (picker.android && picker.android.getMonth() !== data.newValue - 1) {
updateNativeDate(picker);
}
}
common.DatePicker.monthProperty.metadata.onSetNativeValue = onMonthPropertyChanged;
function onDayPropertyChanged(data) {
var picker = data.object;
if (picker.android && picker.android.getDayOfMonth() !== data.newValue) {
updateNativeDate(picker);
}
}
common.DatePicker.dayProperty.metadata.onSetNativeValue = onDayPropertyChanged;
function updateNativeDate(picker) {
var year = types.isNumber(picker.year) ? picker.year : picker.android.getYear();
var month = types.isNumber(picker.month) ? picker.month - 1 : Math.max(0, picker.android.getMonth() - 1);
var day = types.isNumber(picker.day) ? picker.day : picker.android.getDayOfMonth();
picker.date = new Date(year, month, day);
}
function onMaxDatePropertyChanged(data) {
var picker = data.object;
var newValue = data.newValue.getTime();
if (picker.android && picker.android.getMaxDate() !== newValue) {
picker.android.setMaxDate(newValue);
}
}
common.DatePicker.maxDateProperty.metadata.onSetNativeValue = onMaxDatePropertyChanged;
function onMinDatePropertyChanged(data) {
var picker = data.object;
var newValue = data.newValue.getTime();
if (picker.android && picker.android.getMinDate() !== newValue) {
picker.android.setMinDate(newValue);
}
}
common.DatePicker.minDateProperty.metadata.onSetNativeValue = onMinDatePropertyChanged;
function onDatePropertyChanged(data) {
var picker = data.object;
var newValue = data.newValue;
if (picker.android && (picker.android.getDayOfMonth() !== newValue.getDate() || picker.android.getMonth() !== newValue.getMonth() || picker.android.getYear() !== newValue.getFullYear())) {
picker.android.updateDate(newValue.getFullYear(), newValue.getMonth(), newValue.getDate());
}
}
common.DatePicker.dateProperty.metadata.onSetNativeValue = onDatePropertyChanged;
global.moduleMerge(common, exports);
var DatePicker = function(_super) {
__extends(DatePicker, _super);
function DatePicker() {
_super.call(this);
var that = new WeakRef(this);
this._listener = new android.widget.DatePicker.OnDateChangedListener({
get owner() {
return that.get();
},
onDateChanged: function(picker, year, month, day) {
if (this.owner) {
var dateIsChanged = false;
if (year !== this.owner.year) {
this.owner._onPropertyChangedFromNative(common.DatePicker.yearProperty, year);
dateIsChanged = true;
}
if (month + 1 !== this.owner.month) {
this.owner._onPropertyChangedFromNative(common.DatePicker.monthProperty, month + 1);
dateIsChanged = true;
}
if (day !== this.owner.day) {
this.owner._onPropertyChangedFromNative(common.DatePicker.dayProperty, day);
dateIsChanged = true;
}
if (dateIsChanged) {
this.owner._onPropertyChangedFromNative(common.DatePicker.dateProperty, new Date(year, month, day));
}
}
}
});
}
Object.defineProperty(DatePicker.prototype, "android", {
get: function() {
return this._android;
},
enumerable: true,
configurable: true
});
DatePicker.prototype._createUI = function() {
this._android = new android.widget.DatePicker(this._context);
this._android.setCalendarViewShown(false);
this._android.init(0, 0, 0, this._listener);
};
return DatePicker;
}(common.DatePicker);
exports.DatePicker = DatePicker;
}, function(module, exports, __webpack_require__) {
var dependencyObservable = __webpack_require__(17);
var proxy = __webpack_require__(41);
var view = __webpack_require__(12);
var DatePicker = function(_super) {
__extends(DatePicker, _super);
function DatePicker() {
_super.call(this);
}
Object.defineProperty(DatePicker.prototype, "year", {
get: function() {
return this._getValue(DatePicker.yearProperty);
},
set: function(value) {
this._setValue(DatePicker.yearProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(DatePicker.prototype, "month", {
get: function() {
return this._getValue(DatePicker.monthProperty);
},
set: function(value) {
this._setValue(DatePicker.monthProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(DatePicker.prototype, "day", {
get: function() {
return this._getValue(DatePicker.dayProperty);
},
set: function(value) {
this._setValue(DatePicker.dayProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(DatePicker.prototype, "maxDate", {
get: function() {
return this._getValue(DatePicker.maxDateProperty);
},
set: function(value) {
this._setValue(DatePicker.maxDateProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(DatePicker.prototype, "minDate", {
get: function() {
return this._getValue(DatePicker.minDateProperty);
},
set: function(value) {
this._setValue(DatePicker.minDateProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(DatePicker.prototype, "date", {
get: function() {
return this._getValue(DatePicker.dateProperty);
},
set: function(value) {
this._setValue(DatePicker.dateProperty, value);
},
enumerable: true,
configurable: true
});
DatePicker.yearProperty = new dependencyObservable.Property("year", "DatePicker", new proxy.PropertyMetadata(undefined));
DatePicker.monthProperty = new dependencyObservable.Property("month", "DatePicker", new proxy.PropertyMetadata(undefined));
DatePicker.dayProperty = new dependencyObservable.Property("day", "DatePicker", new proxy.PropertyMetadata(undefined));
DatePicker.maxDateProperty = new dependencyObservable.Property("maxDate", "DatePicker", new proxy.PropertyMetadata(undefined));
DatePicker.minDateProperty = new dependencyObservable.Property("minDate", "DatePicker", new proxy.PropertyMetadata(undefined));
DatePicker.dateProperty = new dependencyObservable.Property("date", "DatePicker", new proxy.PropertyMetadata(undefined));
return DatePicker;
}(view.View);
exports.DatePicker = DatePicker;
}, function(module, exports, __webpack_require__) {
var common = __webpack_require__(115);
function onHtmlPropertyChanged(data) {
var view = data.object;
if (!view.android) {
return;
}
var types = __webpack_require__(14);
if (types.isString(data.newValue)) {
var mask = 15;
if (data.newValue.search(/<a\s/i) >= 0) {
mask = 0;
}
view.android.setAutoLinkMask(mask);
view.android.setText(android.text.Html.fromHtml(data.newValue));
} else {
view.android.setText("");
}
}
common.HtmlView.htmlProperty.metadata.onSetNativeValue = onHtmlPropertyChanged;
global.moduleMerge(common, exports);
var HtmlView = function(_super) {
__extends(HtmlView, _super);
function HtmlView() {
_super.apply(this, arguments);
}
Object.defineProperty(HtmlView.prototype, "android", {
get: function() {
return this._android;
},
enumerable: true,
configurable: true
});
HtmlView.prototype._createUI = function() {
this._android = new android.widget.TextView(this._context);
this._android.setLinksClickable(true);
this._android.setMovementMethod(android.text.method.LinkMovementMethod.getInstance());
};
return HtmlView;
}(common.HtmlView);
exports.HtmlView = HtmlView;
}, function(module, exports, __webpack_require__) {
var dependencyObservable = __webpack_require__(17);
var proxy = __webpack_require__(41);
var view = __webpack_require__(12);
var HtmlView = function(_super) {
__extends(HtmlView, _super);
function HtmlView() {
_super.apply(this, arguments);
}
Object.defineProperty(HtmlView.prototype, "html", {
get: function() {
return this._getValue(HtmlView.htmlProperty);
},
set: function(value) {
this._setValue(HtmlView.htmlProperty, value);
},
enumerable: true,
configurable: true
});
HtmlView.htmlProperty = new dependencyObservable.Property("html", "HtmlView", new proxy.PropertyMetadata(false, dependencyObservable.PropertyMetadataSettings.AffectsLayout));
return HtmlView;
}(view.View);
exports.HtmlView = HtmlView;
}, function(module, exports, __webpack_require__) {
var imageCommon = __webpack_require__(117);
var style = __webpack_require__(15);
var enums = __webpack_require__(24);
var types = __webpack_require__(14);
var imageSource = __webpack_require__(55);
var utils = __webpack_require__(27);
var fs = __webpack_require__(32);
global.moduleMerge(imageCommon, exports);
var FILE_PREFIX = "file:///";
var ASYNC = "async";
var imageFetcher;
var imageCache;
(function(CacheMode) {
CacheMode[CacheMode["none"] = 0] = "none";
CacheMode[CacheMode["memory"] = 1] = "memory";
CacheMode[CacheMode["diskAndMemory"] = 2] = "diskAndMemory";
})(exports.CacheMode || (exports.CacheMode = {}));
var CacheMode = exports.CacheMode;
function onStretchPropertyChanged(data) {
var image = data.object;
if (!image.android) {
return;
}
switch (data.newValue) {
case enums.Stretch.aspectFit:
image.android.setScaleType(android.widget.ImageView.ScaleType.FIT_CENTER);
break;

case enums.Stretch.aspectFill:
image.android.setScaleType(android.widget.ImageView.ScaleType.CENTER_CROP);
break;

case enums.Stretch.fill:
image.android.setScaleType(android.widget.ImageView.ScaleType.FIT_XY);
break;

case enums.Stretch.none:
default:
image.android.setScaleType(android.widget.ImageView.ScaleType.MATRIX);
break;
}
}
function onImageSourcePropertyChanged(data) {
var image = data.object;
if (!image.android) {
return;
}
image._setNativeImage(data.newValue);
}
function initImageCache(context, mode, memoryCacheSize, diskCacheSize) {
if (mode === void 0) {
mode = CacheMode.diskAndMemory;
}
if (memoryCacheSize === void 0) {
memoryCacheSize = .25;
}
if (diskCacheSize === void 0) {
diskCacheSize = 10 * 1024 * 1024;
}
if (exports.currentCacheMode === mode) {
return;
}
exports.currentCacheMode = mode;
if (!imageFetcher) {
imageFetcher = org.nativescript.widgets.image.Fetcher.getInstance(context);
}
if (mode === CacheMode.none) {
if (imageCache != null && imageFetcher != null) {
imageFetcher.clearCache();
}
}
var params = new org.nativescript.widgets.image.Cache.CacheParams();
params.memoryCacheEnabled = mode !== CacheMode.none;
params.setMemCacheSizePercent(memoryCacheSize);
params.diskCacheEnabled = mode === CacheMode.diskAndMemory;
params.diskCacheSize = diskCacheSize;
imageCache = org.nativescript.widgets.image.Cache.getInstance(params);
imageFetcher.addImageCache(imageCache);
imageFetcher.initCache();
}
exports.initImageCache = initImageCache;
imageCommon.Image.imageSourceProperty.metadata.onSetNativeValue = onImageSourcePropertyChanged;
imageCommon.Image.stretchProperty.metadata.onSetNativeValue = onStretchPropertyChanged;
var Image = function(_super) {
__extends(Image, _super);
function Image() {
_super.apply(this, arguments);
this.decodeWidth = 0;
this.decodeHeight = 0;
this.useCache = true;
}
Object.defineProperty(Image.prototype, "android", {
get: function() {
return this._android;
},
enumerable: true,
configurable: true
});
Image.prototype._createUI = function() {
if (!imageFetcher) {
initImageCache(this._context);
}
this._android = new org.nativescript.widgets.ImageView(this._context);
this._createImageSourceFromSrc();
};
Image.prototype._setNativeImage = function(nativeImage) {
if (!nativeImage) {
return;
}
var rotation = nativeImage.rotationAngle ? nativeImage.rotationAngle : 0;
this.android.setRotationAngle(rotation);
this.android.setImageBitmap(nativeImage.android);
};
Image.prototype._createImageSourceFromSrc = function() {
var imageView = this._android;
if (!imageView || !this.src) {
return;
}
var value = this.src;
var async = this.loadMode === ASYNC;
var owner = new WeakRef(this);
var listener = new org.nativescript.widgets.image.Worker.OnImageLoadedListener({
onImageLoaded: function(success) {
var that = owner.get();
if (that) {
that._setValue(Image.isLoadingProperty, false);
}
}
});
this._resetValue(Image.imageSourceProperty);
if (types.isString(value)) {
value = value.trim();
this._setValue(Image.isLoadingProperty, true);
if (utils.isDataURI(value)) {
_super.prototype._createImageSourceFromSrc.call(this);
} else if (imageSource.isFileOrResourcePath(value)) {
if (value.indexOf(utils.RESOURCE_PREFIX) === 0) {
imageView.setUri(value, this.decodeWidth, this.decodeHeight, this.useCache, async, listener);
} else {
var fileName = value;
if (fileName.indexOf("~/") === 0) {
fileName = fs.path.join(fs.knownFolders.currentApp().path, fileName.replace("~/", ""));
}
imageView.setUri(FILE_PREFIX + fileName, this.decodeWidth, this.decodeHeight, this.useCache, async, listener);
}
} else {
imageView.setUri(value, this.decodeWidth, this.decodeHeight, this.useCache, true, listener);
}
} else {
_super.prototype._createImageSourceFromSrc.call(this);
}
};
return Image;
}(imageCommon.Image);
exports.Image = Image;
var ImageStyler = function() {
function ImageStyler() {}
ImageStyler.setTintColorProperty = function(view, newValue) {
var imageView = view._nativeView;
imageView.setColorFilter(newValue);
};
ImageStyler.resetTintColorProperty = function(view, nativeValue) {
var imageView = view._nativeView;
imageView.clearColorFilter();
};
ImageStyler.registerHandlers = function() {
style.registerHandler(style.tintColorProperty, new style.StylePropertyChangedHandler(ImageStyler.setTintColorProperty, ImageStyler.resetTintColorProperty), "Image");
};
return ImageStyler;
}();
exports.ImageStyler = ImageStyler;
ImageStyler.registerHandlers();
}, function(module, exports, __webpack_require__) {
var dependencyObservable = __webpack_require__(17);
var view = __webpack_require__(12);
var proxy = __webpack_require__(41);
var imageSource = __webpack_require__(55);
var imageAssetModule = __webpack_require__(118);
var enums = __webpack_require__(24);
var platform = __webpack_require__(35);
var utils = __webpack_require__(27);
var types = __webpack_require__(14);
var SRC = "src";
var IMAGE_SOURCE = "imageSource";
var LOAD_MODE = "loadMode";
var SYNC = "sync";
var ASYNC = "async";
var IMAGE = "Image";
var ISLOADING = "isLoading";
var STRETCH = "stretch";
var AffectsLayout = platform.device.os === platform.platformNames.android ? dependencyObservable.PropertyMetadataSettings.None : dependencyObservable.PropertyMetadataSettings.AffectsLayout;
function onSrcPropertyChanged(data) {
var image = data.object;
image._createImageSourceFromSrc();
}
var Image = function(_super) {
__extends(Image, _super);
function Image() {
_super.apply(this, arguments);
}
Object.defineProperty(Image.prototype, "imageSource", {
get: function() {
return this._getValue(Image.imageSourceProperty);
},
set: function(value) {
this._setValue(Image.imageSourceProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(Image.prototype, "src", {
get: function() {
return this._getValue(Image.srcProperty);
},
set: function(value) {
this._setValue(Image.srcProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(Image.prototype, "isLoading", {
get: function() {
return this._getValue(Image.isLoadingProperty);
},
enumerable: true,
configurable: true
});
Object.defineProperty(Image.prototype, "stretch", {
get: function() {
return this._getValue(Image.stretchProperty);
},
set: function(value) {
this._setValue(Image.stretchProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(Image.prototype, "loadMode", {
get: function() {
return this._getValue(Image.loadModeProperty);
},
set: function(value) {
this._setValue(Image.loadModeProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(Image.prototype, "tintColor", {
get: function() {
return this.style.tintColor;
},
set: function(value) {
this.style.tintColor = value;
},
enumerable: true,
configurable: true
});
Image.prototype._setNativeImage = function(nativeImage) {};
Image.prototype._createImageSourceFromSrc = function() {
var _this = this;
var value = this.src;
if (types.isString(value)) {
value = value.trim();
this.imageSource = null;
this["_url"] = value;
this._setValue(Image.isLoadingProperty, true);
var source = new imageSource.ImageSource();
var imageLoaded = function() {
var currentValue = _this.src;
if (!types.isString(_this.src) || value !== currentValue.trim()) {
return;
}
_this.imageSource = source;
_this._setValue(Image.isLoadingProperty, false);
};
if (utils.isDataURI(value)) {
var base64Data = value.split(",")[1];
if (types.isDefined(base64Data)) {
if (this.loadMode === SYNC) {
source.loadFromBase64(base64Data);
imageLoaded();
} else if (this.loadMode === ASYNC) {
source.fromBase64(base64Data).then(imageLoaded);
}
}
} else if (imageSource.isFileOrResourcePath(value)) {
if (value.indexOf(utils.RESOURCE_PREFIX) === 0) {
var resPath = value.substr(utils.RESOURCE_PREFIX.length);
if (this.loadMode === SYNC) {
source.loadFromResource(resPath);
imageLoaded();
} else if (this.loadMode === ASYNC) {
this.imageSource = null;
source.fromResource(resPath).then(imageLoaded);
}
} else {
if (this.loadMode === SYNC) {
source.loadFromFile(value);
imageLoaded();
} else if (this.loadMode === ASYNC) {
this.imageSource = null;
source.fromFile(value).then(imageLoaded);
}
}
} else {
this.imageSource = null;
imageSource.fromUrl(value).then(function(r) {
if (_this["_url"] === value) {
_this.imageSource = r;
_this._setValue(Image.isLoadingProperty, false);
}
});
}
} else if (value instanceof imageSource.ImageSource) {
this.imageSource = value;
this._setValue(Image.isLoadingProperty, false);
} else if (value instanceof imageAssetModule.ImageAsset) {
imageSource.fromAsset(value).then(function(result) {
_this.imageSource = result;
_this._setValue(Image.isLoadingProperty, false);
});
} else {
this.imageSource = imageSource.fromNativeSource(value);
this._setValue(Image.isLoadingProperty, false);
}
};
Image.srcProperty = new dependencyObservable.Property(SRC, IMAGE, new proxy.PropertyMetadata(undefined, dependencyObservable.PropertyMetadataSettings.None, onSrcPropertyChanged));
Image.imageSourceProperty = new dependencyObservable.Property(IMAGE_SOURCE, IMAGE, new proxy.PropertyMetadata(undefined, dependencyObservable.PropertyMetadataSettings.None));
Image.isLoadingProperty = new dependencyObservable.Property(ISLOADING, IMAGE, new proxy.PropertyMetadata(false, dependencyObservable.PropertyMetadataSettings.None));
Image.stretchProperty = new dependencyObservable.Property(STRETCH, IMAGE, new proxy.PropertyMetadata(enums.Stretch.aspectFit, AffectsLayout));
Image.loadModeProperty = new dependencyObservable.Property(LOAD_MODE, IMAGE, new proxy.PropertyMetadata(SYNC, 0, null, function(value) {
return value === SYNC || value === ASYNC;
}, null));
return Image;
}(view.View);
exports.Image = Image;
}, function(module, exports, __webpack_require__) {
var platform = __webpack_require__(35);
var common = __webpack_require__(119);
global.moduleMerge(common, exports);
var ImageAsset = function(_super) {
__extends(ImageAsset, _super);
function ImageAsset(asset) {
_super.call(this);
this.android = asset;
}
ImageAsset.prototype.getImageAsync = function(callback) {
var bitmapOptions = new android.graphics.BitmapFactory.Options();
bitmapOptions.inJustDecodeBounds = true;
var bitmap = android.graphics.BitmapFactory.decodeFile(this.android, bitmapOptions);
var sourceSize = {
width: bitmapOptions.outWidth,
height: bitmapOptions.outHeight
};
var requestedSize = common.getRequestedImageSize(sourceSize, this.options);
var sampleSize = calculateInSampleSize(bitmapOptions.outWidth, bitmapOptions.outHeight, requestedSize.width, requestedSize.height);
var finalBitmapOptions = new android.graphics.BitmapFactory.Options();
finalBitmapOptions.inSampleSize = sampleSize;
try {
bitmap = android.graphics.BitmapFactory.decodeFile(this.android, finalBitmapOptions);
callback(bitmap, null);
} catch (ex) {
callback(null, ex);
}
};
return ImageAsset;
}(common.ImageAsset);
exports.ImageAsset = ImageAsset;
var calculateInSampleSize = function(imageWidth, imageHeight, reqWidth, reqHeight) {
var sampleSize = 1;
var displayWidth = platform.screen.mainScreen.widthDIPs;
var displayHeigth = platform.screen.mainScreen.heightDIPs;
reqWidth = reqWidth > 0 && reqWidth < displayWidth ? reqWidth : displayWidth;
reqHeight = reqHeight > 0 && reqHeight < displayHeigth ? reqHeight : displayHeigth;
if (imageWidth > reqWidth && imageHeight > reqHeight) {
var halfWidth = imageWidth / 2;
var halfHeight = imageHeight / 2;
while (halfWidth / sampleSize > reqWidth && halfHeight / sampleSize > reqHeight) {
sampleSize *= 2;
}
}
return sampleSize;
};
}, function(module, exports, __webpack_require__) {
var observable = __webpack_require__(18);
var platform = __webpack_require__(35);
var ImageAsset = function(_super) {
__extends(ImageAsset, _super);
function ImageAsset() {
_super.apply(this, arguments);
}
Object.defineProperty(ImageAsset.prototype, "options", {
get: function() {
return this._options;
},
set: function(value) {
this._options = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ImageAsset.prototype, "ios", {
get: function() {
return this._ios;
},
set: function(value) {
this._ios = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ImageAsset.prototype, "android", {
get: function() {
return this._android;
},
set: function(value) {
this._android = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ImageAsset.prototype, "nativeImage", {
get: function() {
return this._nativeImage;
},
set: function(value) {
this._nativeImage = value;
},
enumerable: true,
configurable: true
});
ImageAsset.prototype.getImageAsync = function(callback) {};
return ImageAsset;
}(observable.Observable);
exports.ImageAsset = ImageAsset;
function getAspectSafeDimensions(sourceWidth, sourceHeight, reqWidth, reqHeight) {
var widthCoef = sourceWidth / reqWidth;
var heightCoef = sourceHeight / reqHeight;
var aspectCoef = widthCoef > heightCoef ? widthCoef : heightCoef;
return {
width: Math.floor(sourceWidth / aspectCoef),
height: Math.floor(sourceHeight / aspectCoef)
};
}
exports.getAspectSafeDimensions = getAspectSafeDimensions;
function getRequestedImageSize(src, options) {
var reqWidth = platform.screen.mainScreen.widthDIPs;
var reqHeight = platform.screen.mainScreen.heightDIPs;
if (options && options.width) {
reqWidth = options.width > 0 && options.width < reqWidth ? options.width : reqWidth;
}
if (options && options.height) {
reqHeight = options.height > 0 && options.height < reqHeight ? options.height : reqHeight;
}
if (options && options.keepAspectRatio) {
var safeAspectSize = getAspectSafeDimensions(src.width, src.height, reqWidth, reqHeight);
reqWidth = safeAspectSize.width;
reqHeight = safeAspectSize.height;
}
return {
width: reqWidth,
height: reqHeight
};
}
exports.getRequestedImageSize = getRequestedImageSize;
}, function(module, exports, __webpack_require__) {
var common = __webpack_require__(121);
var enums_1 = __webpack_require__(24);
global.moduleMerge(common, exports);
function setNativeOrientationProperty(data) {
var stackLayout = data.object;
var nativeView = stackLayout._nativeView;
nativeView.setOrientation(data.newValue === enums_1.Orientation.vertical ? org.nativescript.widgets.Orientation.vertical : org.nativescript.widgets.Orientation.horizontal);
}
common.StackLayout.orientationProperty.metadata.onSetNativeValue = setNativeOrientationProperty;
var StackLayout = function(_super) {
__extends(StackLayout, _super);
function StackLayout() {
_super.apply(this, arguments);
}
Object.defineProperty(StackLayout.prototype, "android", {
get: function() {
return this._layout;
},
enumerable: true,
configurable: true
});
Object.defineProperty(StackLayout.prototype, "_nativeView", {
get: function() {
return this._layout;
},
enumerable: true,
configurable: true
});
StackLayout.prototype._createUI = function() {
this._layout = new org.nativescript.widgets.StackLayout(this._context);
};
return StackLayout;
}(common.StackLayout);
exports.StackLayout = StackLayout;
}, function(module, exports, __webpack_require__) {
var platform = __webpack_require__(35);
var layout_base_1 = __webpack_require__(71);
var enums_1 = __webpack_require__(24);
var proxy_1 = __webpack_require__(41);
var dependency_observable_1 = __webpack_require__(17);
var AffectsLayout = platform.device.os === platform.platformNames.android ? dependency_observable_1.PropertyMetadataSettings.None : dependency_observable_1.PropertyMetadataSettings.AffectsLayout;
function validateOrientation(value) {
return value === enums_1.Orientation.vertical || value === enums_1.Orientation.horizontal;
}
var StackLayout = function(_super) {
__extends(StackLayout, _super);
function StackLayout() {
_super.apply(this, arguments);
}
Object.defineProperty(StackLayout.prototype, "orientation", {
get: function() {
return this._getValue(StackLayout.orientationProperty);
},
set: function(value) {
this._setValue(StackLayout.orientationProperty, value);
},
enumerable: true,
configurable: true
});
StackLayout.orientationProperty = new dependency_observable_1.Property("orientation", "StackLayout", new proxy_1.PropertyMetadata(enums_1.Orientation.vertical, AffectsLayout, undefined, validateOrientation));
return StackLayout;
}(layout_base_1.LayoutBase);
exports.StackLayout = StackLayout;
}, function(module, exports, __webpack_require__) {
var common = __webpack_require__(123);
var types = __webpack_require__(14);
var style_1 = __webpack_require__(15);
global.moduleMerge(common, exports);
var ListPicker = function(_super) {
__extends(ListPicker, _super);
function ListPicker() {
_super.apply(this, arguments);
}
Object.defineProperty(ListPicker.prototype, "android", {
get: function() {
return this._android;
},
enumerable: true,
configurable: true
});
ListPicker.prototype._createUI = function() {
this._android = new android.widget.NumberPicker(this._context);
this._android.setDescendantFocusability(android.widget.NumberPicker.FOCUS_BLOCK_DESCENDANTS);
this._android.setMinValue(0);
this._android.setMaxValue(0);
this._android.setValue(0);
var that = new WeakRef(this);
this._formatter = new android.widget.NumberPicker.Formatter({
get owner() {
return that.get();
},
format: function(index) {
if (this.owner) {
return this.owner._getItemAsString(index);
}
return " ";
}
});
this._android.setFormatter(this._formatter);
this._valueChangedListener = new android.widget.NumberPicker.OnValueChangeListener({
get owner() {
return that.get();
},
onValueChange: function(picker, oldVal, newVal) {
if (this.owner) {
this.owner._onPropertyChangedFromNative(common.ListPicker.selectedIndexProperty, newVal);
}
}
});
this._android.setOnValueChangedListener(this._valueChangedListener);
var mInputTextField = java.lang.Class.forName("android.widget.NumberPicker").getDeclaredField("mInputText");
mInputTextField.setAccessible(true);
this._editText = mInputTextField.get(this._android);
this._editText.setFilters([]);
this._editText.setText(" ", android.widget.TextView.BufferType.NORMAL);
};
ListPicker.prototype._onSelectedIndexPropertyChanged = function(data) {
_super.prototype._onSelectedIndexPropertyChanged.call(this, data);
if (this.android && types.isNumber(data.newValue)) {
this.android.setValue(data.newValue);
}
};
ListPicker.prototype._onItemsPropertyChanged = function(data) {
if (this.android) {
if (!data.newValue || !data.newValue.length) {
this.android.setMaxValue(0);
} else {
this.android.setMaxValue(data.newValue.length - 1);
}
this.android.setWrapSelectorWheel(false);
}
this._updateSelectedIndexOnItemsPropertyChanged(data.newValue);
this._fixNumberPickerRendering();
};
ListPicker.prototype._fixNumberPickerRendering = function() {
if (!this.android) {
return;
}
this.android.setFormatter(null);
this.android.setFormatter(this._formatter);
if (this._editText) {
this._editText.setFilters([]);
}
this._editText.invalidate();
this.android.invalidate();
};
return ListPicker;
}(common.ListPicker);
exports.ListPicker = ListPicker;
var ListPickerStyler = function() {
function ListPickerStyler() {}
ListPickerStyler.setColorProperty = function(view, newValue) {
var picker = view._nativeView;
ListPickerStyler._setNumberPickerTextColor(picker, newValue);
};
ListPickerStyler.resetColorProperty = function(view, nativeValue) {
var picker = view._nativeView;
ListPickerStyler._setNumberPickerTextColor(picker, nativeValue);
};
ListPickerStyler.registerHandlers = function() {
style_1.registerHandler(style_1.colorProperty, new style_1.StylePropertyChangedHandler(ListPickerStyler.setColorProperty, ListPickerStyler.resetColorProperty), "ListPicker");
};
ListPickerStyler._setNumberPickerTextColor = function(picker, newValue) {
var childrenCount = picker.getChildCount();
for (var i = 0; i < childrenCount; i++) {
var child = picker.getChildAt(i);
if (child instanceof android.widget.EditText) {
var selectorWheelPaintField = picker.getClass().getDeclaredField("mSelectorWheelPaint");
selectorWheelPaintField.setAccessible(true);
selectorWheelPaintField.get(picker).setColor(newValue);
picker.getChildAt(i).setTextColor(newValue);
}
}
};
return ListPickerStyler;
}();
exports.ListPickerStyler = ListPickerStyler;
ListPickerStyler.registerHandlers();
}, function(module, exports, __webpack_require__) {
var dependencyObservable = __webpack_require__(17);
var proxy = __webpack_require__(41);
var view = __webpack_require__(12);
var types = __webpack_require__(14);
var trace = __webpack_require__(16);
exports.traceCategory = "ListPicker";
var ListPicker = function(_super) {
__extends(ListPicker, _super);
function ListPicker() {
_super.apply(this, arguments);
}
Object.defineProperty(ListPicker.prototype, "selectedIndex", {
get: function() {
return this._getValue(ListPicker.selectedIndexProperty);
},
set: function(value) {
this._setValue(ListPicker.selectedIndexProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(ListPicker.prototype, "items", {
get: function() {
return this._getValue(ListPicker.itemsProperty);
},
set: function(value) {
this._setValue(ListPicker.itemsProperty, value);
},
enumerable: true,
configurable: true
});
ListPicker.prototype._getItemAsString = function(index) {
if (!this.items || !this.items.length) {
return " ";
}
if (types.isDefined(this.items)) {
var item = this.items.getItem ? this.items.getItem(index) : this.items[index];
return types.isString(item) ? item : types.isDefined(item) ? item.toString() : index.toString();
}
return index.toString();
};
ListPicker.prototype._onSelectedIndexPropertyChanged = function(data) {
if (trace.enabled) {
trace.write("ListPicker._onSelectedIndexPropertyChanged(" + data.oldValue + " => " + data.newValue + ");", exports.traceCategory);
}
var index = this.selectedIndex;
if (types.isUndefined(index)) {
return;
}
if (types.isDefined(this.items)) {
if (index < 0 || index >= this.items.length) {
this.selectedIndex = undefined;
throw new Error("selectedIndex should be between [0, items.length - 1]");
}
}
};
ListPicker.prototype._onItemsPropertyChanged = function(data) {};
ListPicker.prototype._updateSelectedIndexOnItemsPropertyChanged = function(newItems) {
if (trace.enabled) {
trace.write("ListPicker._updateSelectedIndexOnItemsPropertyChanged(" + newItems + ");", exports.traceCategory);
}
var newItemsCount = 0;
if (newItems && newItems.length) {
newItemsCount = newItems.length;
}
if (newItemsCount === 0) {
this.selectedIndex = undefined;
} else if (types.isUndefined(this.selectedIndex) || this.selectedIndex >= newItemsCount) {
this.selectedIndex = 0;
}
};
ListPicker.selectedIndexProperty = new dependencyObservable.Property("selectedIndex", "ListPicker", new proxy.PropertyMetadata(undefined));
ListPicker.itemsProperty = new dependencyObservable.Property("items", "ListPicker", new proxy.PropertyMetadata(undefined));
return ListPicker;
}(view.View);
exports.ListPicker = ListPicker;
function onSelectedIndexPropertyChanged(data) {
var picker = data.object;
picker._onSelectedIndexPropertyChanged(data);
}
function onItemsPropertyChanged(data) {
var picker = data.object;
picker._onItemsPropertyChanged(data);
}
ListPicker.selectedIndexProperty.metadata.onSetNativeValue = onSelectedIndexPropertyChanged;
ListPicker.itemsProperty.metadata.onSetNativeValue = onItemsPropertyChanged;
}, function(module, exports, __webpack_require__) {
var common = __webpack_require__(125);
global.moduleMerge(common, exports);
var Placeholder = function(_super) {
__extends(Placeholder, _super);
function Placeholder() {
_super.apply(this, arguments);
}
Placeholder.prototype._createUI = function() {
var args = {
eventName: common.Placeholder.creatingViewEvent,
object: this,
view: undefined,
context: this._context
};
this.notify(args);
this._android = args.view;
};
Object.defineProperty(Placeholder.prototype, "android", {
get: function() {
return this._android;
},
enumerable: true,
configurable: true
});
Object.defineProperty(Placeholder.prototype, "_nativeView", {
get: function() {
return this._android;
},
enumerable: true,
configurable: true
});
return Placeholder;
}(common.Placeholder);
exports.Placeholder = Placeholder;
}, function(module, exports, __webpack_require__) {
var view = __webpack_require__(12);
var Placeholder = function(_super) {
__extends(Placeholder, _super);
function Placeholder() {
_super.apply(this, arguments);
}
Placeholder.creatingViewEvent = "creatingView";
return Placeholder;
}(view.View);
exports.Placeholder = Placeholder;
}, function(module, exports, __webpack_require__) {
var common = __webpack_require__(127);
var style = __webpack_require__(15);
var R_ATTR_PROGRESS_BAR_STYLE_HORIZONTAL = 16842872;
function onValuePropertyChanged(data) {
var progress = data.object;
if (!progress.android) {
return;
}
progress.android.setProgress(data.newValue);
}
function onMaxValuePropertyChanged(data) {
var progress = data.object;
if (!progress.android) {
return;
}
progress.android.setMax(data.newValue);
}
common.Progress.valueProperty.metadata.onSetNativeValue = onValuePropertyChanged;
common.Progress.maxValueProperty.metadata.onSetNativeValue = onMaxValuePropertyChanged;
global.moduleMerge(common, exports);
var Progress = function(_super) {
__extends(Progress, _super);
function Progress() {
_super.apply(this, arguments);
}
Progress.prototype._createUI = function() {
this._android = new android.widget.ProgressBar(this._context, null, R_ATTR_PROGRESS_BAR_STYLE_HORIZONTAL);
};
Object.defineProperty(Progress.prototype, "android", {
get: function() {
return this._android;
},
enumerable: true,
configurable: true
});
return Progress;
}(common.Progress);
exports.Progress = Progress;
var ProgressStyler = function() {
function ProgressStyler() {}
ProgressStyler.setColorProperty = function(view, newValue) {
var bar = view._nativeView;
bar.getProgressDrawable().setColorFilter(newValue, android.graphics.PorterDuff.Mode.SRC_IN);
};
ProgressStyler.resetColorProperty = function(view, nativeValue) {
var bar = view._nativeView;
bar.getProgressDrawable().clearColorFilter();
};
ProgressStyler.setBackgroundAndBorderProperty = function(view, newValue) {
var bar = view._nativeView;
var progressDrawable = bar.getProgressDrawable();
if (progressDrawable.getNumberOfLayers && progressDrawable.getNumberOfLayers() > 0) {
var backgroundDrawable = progressDrawable.getDrawable(0);
if (backgroundDrawable) {
backgroundDrawable.setColorFilter(newValue, android.graphics.PorterDuff.Mode.SRC_IN);
}
}
};
ProgressStyler.resetBackgroundAndBorderProperty = function(view, nativeValue) {};
ProgressStyler.registerHandlers = function() {
style.registerHandler(style.colorProperty, new style.StylePropertyChangedHandler(ProgressStyler.setColorProperty, ProgressStyler.resetColorProperty), "Progress");
style.registerHandler(style.backgroundColorProperty, new style.StylePropertyChangedHandler(ProgressStyler.setBackgroundAndBorderProperty, ProgressStyler.resetBackgroundAndBorderProperty), "Progress");
style.registerHandler(style.backgroundInternalProperty, style.ignorePropertyHandler, "Progress");
};
return ProgressStyler;
}();
exports.ProgressStyler = ProgressStyler;
ProgressStyler.registerHandlers();
}, function(module, exports, __webpack_require__) {
var view_1 = __webpack_require__(12);
var dependency_observable_1 = __webpack_require__(17);
var proxy = __webpack_require__(41);
var Progress = function(_super) {
__extends(Progress, _super);
function Progress() {
_super.call(this);
this.maxValue = 100;
this.value = 0;
}
Object.defineProperty(Progress.prototype, "maxValue", {
get: function() {
return this._getValue(Progress.maxValueProperty);
},
set: function(newMaxValue) {
this._setValue(Progress.maxValueProperty, newMaxValue);
if (this.value > newMaxValue) {
this.value = newMaxValue;
}
},
enumerable: true,
configurable: true
});
Object.defineProperty(Progress.prototype, "value", {
get: function() {
return this._getValue(Progress.valueProperty);
},
set: function(value) {
value = Math.min(value, this.maxValue);
this._setValue(Progress.valueProperty, value);
},
enumerable: true,
configurable: true
});
Progress.valueProperty = new dependency_observable_1.Property("value", "Progress", new proxy.PropertyMetadata(0));
Progress.maxValueProperty = new dependency_observable_1.Property("maxValue", "Progress", new proxy.PropertyMetadata(100));
return Progress;
}(view_1.View);
exports.Progress = Progress;
}, function(module, exports, __webpack_require__) {
var types = __webpack_require__(14);
var trace = __webpack_require__(16);
var layout_base_1 = __webpack_require__(71);
var ProxyViewContainer = function(_super) {
__extends(ProxyViewContainer, _super);
function ProxyViewContainer() {
_super.apply(this, arguments);
}
Object.defineProperty(ProxyViewContainer.prototype, "ios", {
get: function() {
return null;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ProxyViewContainer.prototype, "android", {
get: function() {
return null;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ProxyViewContainer.prototype, "_nativeView", {
get: function() {
return null;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ProxyViewContainer.prototype, "isLayoutRequested", {
get: function() {
return false;
},
enumerable: true,
configurable: true
});
ProxyViewContainer.prototype._createUI = function() {};
ProxyViewContainer.prototype._getNativeViewsCount = function() {
var result = 0;
this._eachChildView(function(cv) {
result += cv._getNativeViewsCount();
return true;
});
return result;
};
ProxyViewContainer.prototype._eachLayoutView = function(callback) {
this._eachChildView(function(cv) {
if (cv._isVisible) {
cv._eachLayoutView(callback);
}
return true;
});
};
ProxyViewContainer.prototype._addViewToNativeVisualTree = function(child, atIndex) {
if (trace.enabled) {
trace.write("ViewContainer._addViewToNativeVisualTree for a child " + child + " ViewContainer.parent: " + this.parent, trace.categories.ViewHierarchy);
}
_super.prototype._addViewToNativeVisualTree.call(this, child);
var parent = this.parent;
if (parent) {
var baseIndex = 0;
var insideIndex = 0;
if (parent instanceof layout_base_1.LayoutBase) {
baseIndex = parent._childIndexToNativeChildIndex(parent.getChildIndex(this));
}
if (types.isDefined(atIndex)) {
insideIndex = this._childIndexToNativeChildIndex(atIndex);
} else {
insideIndex = this._getNativeViewsCount();
}
if (trace.enabled) {
trace.write("ProxyViewContainer._addViewToNativeVisualTree at: " + atIndex + " base: " + baseIndex + " additional: " + insideIndex, trace.categories.ViewHierarchy);
}
return parent._addViewToNativeVisualTree(child, baseIndex + insideIndex);
}
return false;
};
ProxyViewContainer.prototype._removeViewFromNativeVisualTree = function(child) {
if (trace.enabled) {
trace.write("ProxyViewContainer._removeViewFromNativeVisualTree for a child " + child + " ViewContainer.parent: " + this.parent, trace.categories.ViewHierarchy);
}
_super.prototype._removeViewFromNativeVisualTree.call(this, child);
var parent = this.parent;
if (parent) {
return parent._removeViewFromNativeVisualTree(child);
}
};
ProxyViewContainer.prototype._addToSuperview = function(superview, atIndex) {
var _this = this;
var index = 0;
this._eachChildView(function(cv) {
if (!cv._isAddedToNativeVisualTree) {
cv._isAddedToNativeVisualTree = _this._addViewToNativeVisualTree(cv, index++);
}
return true;
});
return true;
};
ProxyViewContainer.prototype._removeFromSuperview = function() {
var _this = this;
this._eachChildView(function(cv) {
if (cv._isAddedToNativeVisualTree) {
_this._removeViewFromNativeVisualTree(cv);
}
return true;
});
};
ProxyViewContainer.prototype._registerLayoutChild = function(child) {
if (this.parent instanceof layout_base_1.LayoutBase) {
this.parent._registerLayoutChild(child);
}
};
ProxyViewContainer.prototype._unregisterLayoutChild = function(child) {
if (this.parent instanceof layout_base_1.LayoutBase) {
this.parent._unregisterLayoutChild(child);
}
};
ProxyViewContainer.prototype._parentChanged = function(oldParent) {
var addingToParent = this.parent && !oldParent;
var newLayout = this.parent;
var oldLayout = oldParent;
if (addingToParent && newLayout instanceof layout_base_1.LayoutBase) {
this._eachChildView(function(child) {
newLayout._registerLayoutChild(child);
return true;
});
} else if (oldLayout instanceof layout_base_1.LayoutBase) {
this._eachChildView(function(child) {
oldLayout._unregisterLayoutChild(child);
return true;
});
}
};
return ProxyViewContainer;
}(layout_base_1.LayoutBase);
exports.ProxyViewContainer = ProxyViewContainer;
}, function(module, exports, __webpack_require__) {
var proxy = __webpack_require__(41);
var dependencyObservable = __webpack_require__(17);
var viewModule = __webpack_require__(12);
var layoutBaseModule = __webpack_require__(71);
var utils = __webpack_require__(27);
var trace = __webpack_require__(16);
var platform = __webpack_require__(35);
var stackLayout = __webpack_require__(120);
var types = __webpack_require__(14);
var builder = __webpack_require__(82);
var observableArray = __webpack_require__(51);
var weakEvents = __webpack_require__(43);
var label;
function ensureLabel() {
if (!label) {
label = __webpack_require__(101);
}
}
var ITEMS = "items";
var ITEMTEMPLATE = "itemTemplate";
var LAYOUT = "layout";
var REPEATER = "Repeater";
var knownTemplates;
(function(knownTemplates) {
knownTemplates.itemTemplate = "itemTemplate";
})(knownTemplates = exports.knownTemplates || (exports.knownTemplates = {}));
function onItemsPropertyChanged(data) {
var repeater = data.object;
repeater._onItemsPropertyChanged(data);
}
function onItemTemplatePropertyChanged(data) {
var repeater = data.object;
repeater._onItemTemplatePropertyChanged(data);
}
function onItemsLayoutPropertyPropertyChanged(data) {
var repeater = data.object;
repeater._onItemsLayoutPropertyPropertyChanged(data);
}
var Repeater = function(_super) {
__extends(Repeater, _super);
function Repeater() {
_super.call(this);
this._isDirty = false;
if (platform.device.os === platform.platformNames.ios) {
this._ios = UIView.new();
}
this.itemsLayout = new stackLayout.StackLayout();
}
Object.defineProperty(Repeater.prototype, "items", {
get: function() {
return this._getValue(Repeater.itemsProperty);
},
set: function(value) {
this._setValue(Repeater.itemsProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(Repeater.prototype, "itemTemplate", {
get: function() {
return this._getValue(Repeater.itemTemplateProperty);
},
set: function(value) {
this._setValue(Repeater.itemTemplateProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(Repeater.prototype, "itemsLayout", {
get: function() {
return this._getValue(Repeater.itemsLayoutProperty);
},
set: function(value) {
this._setValue(Repeater.itemsLayoutProperty, value);
},
enumerable: true,
configurable: true
});
Repeater.prototype.onLoaded = function() {
if (trace.enabled) {
trace.write("Repeater.onLoaded()", "Repeater");
}
if (this._isDirty) {
this.refresh();
}
_super.prototype.onLoaded.call(this);
};
Repeater.prototype._requestRefresh = function() {
if (trace.enabled) {
trace.write("Repeater._requestRefresh()", "Repeater");
}
this._isDirty = true;
if (this.isLoaded) {
this.refresh();
}
};
Repeater.prototype.refresh = function() {
if (trace.enabled) {
trace.write("Repeater.refresh()", "Repeater");
}
if (this.itemsLayout) {
this.itemsLayout.removeChildren();
}
if (types.isNullOrUndefined(this.items) || !types.isNumber(this.items.length)) {
return;
}
var length = this.items.length;
for (var i = 0; i < length; i++) {
var viewToAdd = !types.isNullOrUndefined(this.itemTemplate) ? builder.parse(this.itemTemplate, this) : this._getDefaultItemContent(i);
var dataItem = this._getDataItem(i);
viewToAdd.bindingContext = dataItem;
this.itemsLayout.addChild(viewToAdd);
}
this._isDirty = false;
};
Repeater.prototype._onItemsPropertyChanged = function(data) {
if (trace.enabled) {
trace.write("Repeater._onItemsPropertyChanged(" + data.oldValue + " => " + data.newValue + ")", "Repeater");
}
if (data.oldValue instanceof observableArray.ObservableArray) {
weakEvents.removeWeakEventListener(data.oldValue, observableArray.ObservableArray.changeEvent, this._onItemsChanged, this);
}
if (data.newValue instanceof observableArray.ObservableArray) {
weakEvents.addWeakEventListener(data.newValue, observableArray.ObservableArray.changeEvent, this._onItemsChanged, this);
}
this._requestRefresh();
};
Repeater.prototype._onItemTemplatePropertyChanged = function(data) {
if (trace.enabled) {
trace.write("Repeater._onItemTemplatePropertyChanged(" + data.oldValue + " => " + data.newValue + ")", "Repeater");
}
this._requestRefresh();
};
Repeater.prototype._onItemsLayoutPropertyPropertyChanged = function(data) {
if (trace.enabled) {
trace.write("Repeater._onItemsLayoutPropertyPropertyChanged(" + data.oldValue + " => " + data.newValue + ")", "Repeater");
}
if (data.oldValue instanceof layoutBaseModule.LayoutBase) {
this._removeView(data.oldValue);
}
if (data.newValue instanceof layoutBaseModule.LayoutBase) {
this._addView(data.newValue);
}
this._requestRefresh();
};
Repeater.prototype._onItemsChanged = function(data) {
if (trace.enabled) {
trace.write("Repeater._onItemsChanged(" + data + ")", "Repeater");
}
this._requestRefresh();
};
Repeater.prototype._getDefaultItemContent = function(index) {
ensureLabel();
var lbl = new label.Label();
lbl.bind({
targetProperty: "text",
sourceProperty: "$value"
});
return lbl;
};
Repeater.prototype._getDataItem = function(index) {
return this.items.getItem ? this.items.getItem(index) : this.items[index];
};
Object.defineProperty(Repeater.prototype, "ios", {
get: function() {
return this._ios;
},
enumerable: true,
configurable: true
});
Object.defineProperty(Repeater.prototype, "_childrenCount", {
get: function() {
var count = 0;
if (this.itemsLayout) {
count++;
}
return count;
},
enumerable: true,
configurable: true
});
Repeater.prototype._eachChildView = function(callback) {
if (this.itemsLayout) {
callback(this.itemsLayout);
}
};
Repeater.prototype.onLayout = function(left, top, right, bottom) {
viewModule.View.layoutChild(this, this.itemsLayout, 0, 0, right - left, bottom - top);
};
Repeater.prototype.onMeasure = function(widthMeasureSpec, heightMeasureSpec) {
var result = viewModule.View.measureChild(this, this.itemsLayout, widthMeasureSpec, heightMeasureSpec);
var width = utils.layout.getMeasureSpecSize(widthMeasureSpec);
var widthMode = utils.layout.getMeasureSpecMode(widthMeasureSpec);
var height = utils.layout.getMeasureSpecSize(heightMeasureSpec);
var heightMode = utils.layout.getMeasureSpecMode(heightMeasureSpec);
var widthAndState = viewModule.View.resolveSizeAndState(result.measuredWidth, width, widthMode, 0);
var heightAndState = viewModule.View.resolveSizeAndState(result.measuredHeight, height, heightMode, 0);
this.setMeasuredDimension(widthAndState, heightAndState);
};
Repeater.itemsProperty = new dependencyObservable.Property(ITEMS, REPEATER, new proxy.PropertyMetadata(undefined, dependencyObservable.PropertyMetadataSettings.AffectsLayout, onItemsPropertyChanged));
Repeater.itemTemplateProperty = new dependencyObservable.Property(ITEMTEMPLATE, REPEATER, new proxy.PropertyMetadata(undefined, dependencyObservable.PropertyMetadataSettings.AffectsLayout, onItemTemplatePropertyChanged));
Repeater.itemsLayoutProperty = new dependencyObservable.Property(LAYOUT, REPEATER, new proxy.PropertyMetadata(undefined, dependencyObservable.PropertyMetadataSettings.AffectsLayout, onItemsLayoutPropertyPropertyChanged));
return Repeater;
}(viewModule.CustomLayoutView);
exports.Repeater = Repeater;
}, function(module, exports, __webpack_require__) {
var common = __webpack_require__(131);
var utils = __webpack_require__(27);
var enums = __webpack_require__(24);
global.moduleMerge(common, exports);
common.orientationProperty.onValueChanged = function scrollViewOrientationChanged(data) {
data.object._onOrientationChanged(data.oldValue, data.newValue);
};
var ScrollView = function(_super) {
__extends(ScrollView, _super);
function ScrollView() {
_super.apply(this, arguments);
this._androidViewId = -1;
this._lastScrollX = -1;
this._lastScrollY = -1;
}
Object.defineProperty(ScrollView.prototype, "android", {
get: function() {
return this._android;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ScrollView.prototype, "_nativeView", {
get: function() {
return this._android;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ScrollView.prototype, "horizontalOffset", {
get: function() {
if (!this._android) {
return 0;
}
return this._android.getScrollX() / utils.layout.getDisplayDensity();
},
enumerable: true,
configurable: true
});
Object.defineProperty(ScrollView.prototype, "verticalOffset", {
get: function() {
if (!this._android) {
return 0;
}
return this._android.getScrollY() / utils.layout.getDisplayDensity();
},
enumerable: true,
configurable: true
});
Object.defineProperty(ScrollView.prototype, "scrollableWidth", {
get: function() {
if (!this._android || this.orientation !== enums.Orientation.horizontal) {
return 0;
}
return this._android.getScrollableLength() / utils.layout.getDisplayDensity();
},
enumerable: true,
configurable: true
});
Object.defineProperty(ScrollView.prototype, "scrollableHeight", {
get: function() {
if (!this._android || this.orientation !== enums.Orientation.vertical) {
return 0;
}
return this._android.getScrollableLength() / utils.layout.getDisplayDensity();
},
enumerable: true,
configurable: true
});
ScrollView.prototype.scrollToVerticalOffset = function(value, animated) {
if (this._android && this.orientation === enums.Orientation.vertical) {
value *= utils.layout.getDisplayDensity();
if (animated) {
this._android.smoothScrollTo(0, value);
} else {
this._android.scrollTo(0, value);
}
}
};
ScrollView.prototype.scrollToHorizontalOffset = function(value, animated) {
if (this._android && this.orientation === enums.Orientation.horizontal) {
value *= utils.layout.getDisplayDensity();
if (animated) {
this._android.smoothScrollTo(value, 0);
} else {
this._android.scrollTo(value, 0);
}
}
};
ScrollView.prototype._createUI = function() {
if (this.orientation === enums.Orientation.horizontal) {
this._android = new org.nativescript.widgets.HorizontalScrollView(this._context);
} else {
this._android = new org.nativescript.widgets.VerticalScrollView(this._context);
}
if (this._androidViewId < 0) {
this._androidViewId = android.view.View.generateViewId();
}
this._android.setId(this._androidViewId);
};
ScrollView.prototype._onOrientationChanged = function(oldValue, newValue) {
if (this._android) {
var parent = this.parent;
if (parent) {
parent._removeView(this);
}
if (parent) {
parent._addView(this);
}
}
};
ScrollView.prototype.attachNative = function() {
var that = new WeakRef(this);
this.handler = new android.view.ViewTreeObserver.OnScrollChangedListener({
onScrollChanged: function() {
var owner = that.get();
if (owner) {
owner._onScrollChanged();
}
}
});
this._android.getViewTreeObserver().addOnScrollChangedListener(this.handler);
};
ScrollView.prototype._onScrollChanged = function() {
if (this.android) {
var newScrollX = this.android.getScrollX();
var newScrollY = this.android.getScrollY();
if (newScrollX !== this._lastScrollX || newScrollY !== this._lastScrollY) {
this.notify({
object: this,
eventName: ScrollView.scrollEvent,
scrollX: newScrollX / utils.layout.getDisplayDensity(),
scrollY: newScrollY / utils.layout.getDisplayDensity()
});
this._lastScrollX = newScrollX;
this._lastScrollY = newScrollY;
}
}
};
ScrollView.prototype.dettachNative = function() {
this._android.getViewTreeObserver().removeOnScrollChangedListener(this.handler);
this.handler = null;
};
return ScrollView;
}(common.ScrollView);
exports.ScrollView = ScrollView;
}, function(module, exports, __webpack_require__) {
var dependencyObservable = __webpack_require__(17);
var proxy = __webpack_require__(41);
var enums = __webpack_require__(24);
var contentView = __webpack_require__(75);
function isValidOrientation(value) {
return value === enums.Orientation.vertical || value === enums.Orientation.horizontal;
}
exports.orientationProperty = new dependencyObservable.Property("orientation", "ScrollView", new proxy.PropertyMetadata(enums.Orientation.vertical, dependencyObservable.PropertyMetadataSettings.AffectsLayout, undefined, isValidOrientation));
var ScrollView = function(_super) {
__extends(ScrollView, _super);
function ScrollView() {
_super.apply(this, arguments);
this._scrollChangeCount = 0;
}
Object.defineProperty(ScrollView.prototype, "orientation", {
get: function() {
return this._getValue(exports.orientationProperty);
},
set: function(value) {
this._setValue(exports.orientationProperty, value);
},
enumerable: true,
configurable: true
});
ScrollView.prototype.addEventListener = function(arg, callback, thisArg) {
_super.prototype.addEventListener.call(this, arg, callback, thisArg);
if (arg === ScrollView.scrollEvent) {
this._scrollChangeCount++;
this.attach();
}
};
ScrollView.prototype.removeEventListener = function(arg, callback, thisArg) {
_super.prototype.addEventListener.call(this, arg, callback, thisArg);
if (arg === ScrollView.scrollEvent) {
this._scrollChangeCount--;
this.dettach();
}
};
ScrollView.prototype.onLoaded = function() {
_super.prototype.onLoaded.call(this);
this.attach();
};
ScrollView.prototype.onUnloaded = function() {
_super.prototype.onUnloaded.call(this);
this.dettach();
};
ScrollView.prototype.attach = function() {
if (this._scrollChangeCount > 0 && this.isLoaded) {
this.attachNative();
}
};
ScrollView.prototype.dettach = function() {
if (this._scrollChangeCount === 0 && this.isLoaded) {
this.dettachNative();
}
};
ScrollView.prototype.attachNative = function() {};
ScrollView.prototype.dettachNative = function() {};
Object.defineProperty(ScrollView.prototype, "horizontalOffset", {
get: function() {
return 0;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ScrollView.prototype, "verticalOffset", {
get: function() {
return 0;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ScrollView.prototype, "scrollableWidth", {
get: function() {
return 0;
},
enumerable: true,
configurable: true
});
Object.defineProperty(ScrollView.prototype, "scrollableHeight", {
get: function() {
return 0;
},
enumerable: true,
configurable: true
});
ScrollView.prototype.scrollToVerticalOffset = function(value, animated) {};
ScrollView.prototype.scrollToHorizontalOffset = function(value, animated) {};
ScrollView.scrollEvent = "scroll";
return ScrollView;
}(contentView.ContentView);
exports.ScrollView = ScrollView;
}, function(module, exports, __webpack_require__) {
var common = __webpack_require__(133);
var color = __webpack_require__(19);
var utils = __webpack_require__(27);
var style = __webpack_require__(15);
var types;
function ensureTypes() {
if (!types) {
types = __webpack_require__(14);
}
}
var SEARCHTEXT = "searchText";
var QUERY = "query";
var EMPTY = "";
function onTextPropertyChanged(data) {
var bar = data.object;
if (!bar.android) {
return;
}
bar.android.setQuery(data.newValue, false);
}
common.SearchBar.textProperty.metadata.onSetNativeValue = onTextPropertyChanged;
function onTextFieldBackgroundColorPropertyChanged(data) {
var bar = data.object;
if (!bar.android) {
return;
}
if (data.newValue instanceof color.Color) {
_changeSearchViewBackgroundColor(bar.android, data.newValue.android);
}
}
common.SearchBar.textFieldBackgroundColorProperty.metadata.onSetNativeValue = onTextFieldBackgroundColorPropertyChanged;
function onTextFieldHintColorPropertyChanged(data) {
var bar = data.object;
if (!bar.android) {
return;
}
if (data.newValue instanceof color.Color) {
_changeSearchViewHintColor(bar.android, data.newValue.android);
}
}
common.SearchBar.textFieldHintColorProperty.metadata.onSetNativeValue = onTextFieldHintColorPropertyChanged;
function onHintPropertyChanged(data) {
var bar = data.object;
if (!bar.android) {
return;
}
var newValue = data.newValue;
ensureTypes();
if (types.isString(newValue)) {
bar.android.setQueryHint(newValue);
}
}
common.SearchBar.hintProperty.metadata.onSetNativeValue = onHintPropertyChanged;
function getTextView(bar) {
if (bar) {
var id = bar.getContext().getResources().getIdentifier("android:id/search_src_text", null, null);
if (id) {
return bar.findViewById(id);
}
}
return undefined;
}
function _changeSearchViewBackgroundColor(bar, color) {
var textView = getTextView(bar);
if (textView) {
textView.setBackgroundColor(color);
}
}
function _changeSearchViewHintColor(bar, color) {
var textView = getTextView(bar);
if (textView) {
textView.setHintTextColor(color);
}
}
global.moduleMerge(common, exports);
var SearchBar = function(_super) {
__extends(SearchBar, _super);
function SearchBar() {
_super.apply(this, arguments);
}
SearchBar.prototype.dismissSoftInput = function() {
utils.ad.dismissSoftInput(this._nativeView);
};
SearchBar.prototype.focus = function() {
var result = _super.prototype.focus.call(this);
if (result) {
utils.ad.showSoftInput(this._nativeView);
}
return result;
};
SearchBar.prototype._createUI = function() {
this._android = new android.widget.SearchView(this._context);
this._android.setIconified(false);
var that = new WeakRef(this);
this._android.setOnQueryTextListener(new android.widget.SearchView.OnQueryTextListener({
get owner() {
return that.get();
},
onQueryTextChange: function(newText) {
if (this.owner) {
this.owner._onPropertyChangedFromNative(common.SearchBar.textProperty, newText);
if (newText === EMPTY && this[SEARCHTEXT] !== newText) {
this.owner._emit(common.SearchBar.clearEvent);
}
this[SEARCHTEXT] = newText;
}
return true;
},
onQueryTextSubmit: function(query) {
if (this.owner) {
if (query !== EMPTY && this[QUERY] !== query) {
this.owner._emit(common.SearchBar.submitEvent);
}
this[QUERY] = query;
}
return true;
}
}));
this._android.setOnCloseListener(new android.widget.SearchView.OnCloseListener({
get owner() {
return that.get();
},
onClose: function() {
if (this.owner) {
this.owner._emit(common.SearchBar.clearEvent);
}
return true;
}
}));
if (this.textFieldBackgroundColor instanceof color.Color) {
_changeSearchViewBackgroundColor(this._android, this.textFieldBackgroundColor.android);
}
if (this.textFieldHintColor instanceof color.Color) {
_changeSearchViewHintColor(this._android, this.textFieldHintColor.android);
}
};
Object.defineProperty(SearchBar.prototype, "android", {
get: function() {
return this._android;
},
enumerable: true,
configurable: true
});
return SearchBar;
}(common.SearchBar);
exports.SearchBar = SearchBar;
var SearchBarStyler = function() {
function SearchBarStyler() {}
SearchBarStyler.getBackgroundColorProperty = function(v) {
var bar = v._nativeView;
return bar.getDrawingCacheBackgroundColor();
};
SearchBarStyler.setBackgroundColorProperty = function(v, newValue) {
var bar = v._nativeView;
bar.setBackgroundColor(newValue);
SearchBarStyler._changeSearchViewPlateBackgroundColor(bar, newValue);
};
SearchBarStyler.resetBackgroundColorProperty = function(v, nativeValue) {
var bar = v._nativeView;
bar.setBackgroundColor(nativeValue);
SearchBarStyler._changeSearchViewPlateBackgroundColor(bar, nativeValue);
};
SearchBarStyler.getColorProperty = function(v) {
var bar = v._nativeView;
var textView = SearchBarStyler._getSearchViewTextView(bar);
if (textView) {
return textView.getCurrentTextColor();
}
return undefined;
};
SearchBarStyler.setColorProperty = function(v, newValue) {
var bar = v._nativeView;
SearchBarStyler._changeSearchViewTextColor(bar, newValue);
};
SearchBarStyler.resetColorProperty = function(v, nativeValue) {
var bar = v._nativeView;
SearchBarStyler._changeSearchViewTextColor(bar, nativeValue);
};
SearchBarStyler.setFontInternalProperty = function(v, newValue, nativeValue) {
var bar = v.android;
var textView = SearchBarStyler._getSearchViewTextView(bar);
var fontValue = newValue;
var typeface = fontValue.getAndroidTypeface();
if (typeface) {
textView.setTypeface(typeface);
} else {
textView.setTypeface(nativeValue.typeface);
}
if (fontValue.fontSize) {
textView.setTextSize(fontValue.fontSize);
} else {
textView.setTextSize(android.util.TypedValue.COMPLEX_UNIT_PX, nativeValue.size);
}
};
SearchBarStyler.resetFontInternalProperty = function(v, nativeValue) {
var bar = v.android;
var textView = SearchBarStyler._getSearchViewTextView(bar);
textView.setTypeface(nativeValue.typeface);
textView.setTextSize(android.util.TypedValue.COMPLEX_UNIT_PX, nativeValue.size);
};
SearchBarStyler.getNativeFontInternalValue = function(v) {
var bar = v.android;
var textView = SearchBarStyler._getSearchViewTextView(bar);
return {
typeface: textView.getTypeface(),
size: textView.getTextSize()
};
};
SearchBarStyler.registerHandlers = function() {
style.registerHandler(style.backgroundColorProperty, new style.StylePropertyChangedHandler(SearchBarStyler.setBackgroundColorProperty, SearchBarStyler.resetBackgroundColorProperty, SearchBarStyler.getBackgroundColorProperty), "SearchBar");
style.registerHandler(style.colorProperty, new style.StylePropertyChangedHandler(SearchBarStyler.setColorProperty, SearchBarStyler.resetColorProperty, SearchBarStyler.getColorProperty), "SearchBar");
style.registerHandler(style.fontInternalProperty, new style.StylePropertyChangedHandler(SearchBarStyler.setFontInternalProperty, SearchBarStyler.resetFontInternalProperty, SearchBarStyler.getNativeFontInternalValue), "SearchBar");
style.registerHandler(style.backgroundInternalProperty, style.ignorePropertyHandler, "SearchBar");
};
SearchBarStyler._getSearchViewTextView = function(bar) {
var id = bar.getContext().getResources().getIdentifier("android:id/search_src_text", null, null);
return bar.findViewById(id);
};
SearchBarStyler._changeSearchViewTextColor = function(bar, color) {
var textView = SearchBarStyler._getSearchViewTextView(bar);
if (textView) {
textView.setTextColor(color);
}
};
SearchBarStyler._changeSearchViewPlateBackgroundColor = function(bar, color) {
var id = bar.getContext().getResources().getIdentifier("android:id/search_plate", null, null);
var textView = bar.findViewById(id);
if (textView) {
textView.setBackgroundColor(color);
}
};
return SearchBarStyler;
}();
exports.SearchBarStyler = SearchBarStyler;
SearchBarStyler.registerHandlers();
}, function(module, exports, __webpack_require__) {
var view_1 = __webpack_require__(12);
var dependency_observable_1 = __webpack_require__(17);
var proxy_1 = __webpack_require__(41);
var color_1 = __webpack_require__(19);
var platform_1 = __webpack_require__(35);
var AffectsLayout = platform_1.isAndroid ? dependency_observable_1.PropertyMetadataSettings.None : dependency_observable_1.PropertyMetadataSettings.AffectsLayout;
var SearchBar = function(_super) {
__extends(SearchBar, _super);
function SearchBar() {
_super.apply(this, arguments);
}
Object.defineProperty(SearchBar.prototype, "text", {
get: function() {
return this._getValue(SearchBar.textProperty);
},
set: function(value) {
this._setValue(SearchBar.textProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(SearchBar.prototype, "hint", {
get: function() {
return this._getValue(SearchBar.hintProperty);
},
set: function(value) {
this._setValue(SearchBar.hintProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(SearchBar.prototype, "textFieldBackgroundColor", {
get: function() {
return this._getValue(SearchBar.textFieldBackgroundColorProperty);
},
set: function(value) {
this._setValue(SearchBar.textFieldBackgroundColorProperty, value instanceof color_1.Color ? value : new color_1.Color(value));
},
enumerable: true,
configurable: true
});
Object.defineProperty(SearchBar.prototype, "textFieldHintColor", {
get: function() {
return this._getValue(SearchBar.textFieldHintColorProperty);
},
set: function(value) {
this._setValue(SearchBar.textFieldHintColorProperty, value instanceof color_1.Color ? value : new color_1.Color(value));
},
enumerable: true,
configurable: true
});
SearchBar.prototype.dismissSoftInput = function() {};
SearchBar.submitEvent = "submit";
SearchBar.clearEvent = "clear";
SearchBar.textFieldBackgroundColorProperty = new dependency_observable_1.Property("textFieldBackgroundColor", "SearchBar", new proxy_1.PropertyMetadata(undefined));
SearchBar.textFieldHintColorProperty = new dependency_observable_1.Property("textFieldHintColor", "SearchBar", new proxy_1.PropertyMetadata(undefined));
SearchBar.hintProperty = new dependency_observable_1.Property("hint", "SearchBar", new proxy_1.PropertyMetadata(""));
SearchBar.textProperty = new dependency_observable_1.Property("text", "SearchBar", new proxy_1.PropertyMetadata("", AffectsLayout));
return SearchBar;
}(view_1.View);
exports.SearchBar = SearchBar;
}, function(module, exports, __webpack_require__) {
var common = __webpack_require__(135);
var types = __webpack_require__(14);
var style = __webpack_require__(15);
var R_ID_TABS = 16908307;
var R_ID_TABCONTENT = 16908305;
var R_ATTR_STATE_SELECTED = 16842913;
global.moduleMerge(common, exports);
function onSelectedIndexPropertyChanged(data) {
var view = data.object;
if (!view.android || !view.items) {
return;
}
var index = data.newValue;
if (types.isNumber(index)) {
if (index >= 0 && index <= view.items.length - 1) {
view.android.setCurrentTab(index);
view.notify({
eventName: SegmentedBar.selectedIndexChangedEvent,
object: view,
oldIndex: data.oldValue,
newIndex: data.newValue
});
} else {
view.selectedIndex = undefined;
throw new Error("selectedIndex should be between [0, " + (view.items.length - 1) + "]");
}
}
}
common.SegmentedBar.selectedIndexProperty.metadata.onSetNativeValue = onSelectedIndexPropertyChanged;
function onItemsPropertyChanged(data) {
var view = data.object;
if (!view.android) {
return;
}
var oldItems = data.oldValue;
if (oldItems && oldItems.length) {
for (var i = 0; i < oldItems.length; i++) {
oldItems[i]._parent = null;
}
}
view.android.clearAllTabs();
var newItems = data.newValue;
view._adjustSelectedIndex(newItems);
if (newItems && newItems.length) {
for (var i = 0; i < newItems.length; i++) {
view.insertTab(newItems[i], i);
}
if (types.isNumber(view.selectedIndex) && view.android.getCurrentTab() !== view.selectedIndex) {
view.android.setCurrentTab(view.selectedIndex);
}
var tabHost = view.android;
var tabIndex;
for (tabIndex = 0; tabIndex < tabHost.getTabWidget().getTabCount(); tabIndex++) {
var tabChild = tabHost.getTabWidget().getChildTabViewAt(tabIndex);
var t = tabChild.getChildAt(1);
if (view.color) {
t.setTextColor(view.color.android);
}
t.setMaxLines(1);
t.setEllipsize(android.text.TextUtils.TruncateAt.END);
}
}
}
common.SegmentedBar.itemsProperty.metadata.onSetNativeValue = onItemsPropertyChanged;
var SegmentedBarColorDrawableClass;
function ensureSegmentedBarColorDrawableClass() {
if (SegmentedBarColorDrawableClass) {
return;
}
var SegmentedBarColorDrawable = function(_super) {
__extends(SegmentedBarColorDrawable, _super);
function SegmentedBarColorDrawable(arg) {
_super.call(this, arg);
return global.__native(this);
}
SegmentedBarColorDrawable.prototype.draw = function(canvas) {
var p = new android.graphics.Paint();
p.setColor(this.getColor());
p.setStyle(android.graphics.Paint.Style.FILL);
canvas.drawRect(0, this.getBounds().height() - 15, this.getBounds().width(), this.getBounds().height(), p);
};
return SegmentedBarColorDrawable;
}(android.graphics.drawable.ColorDrawable);
SegmentedBarColorDrawableClass = SegmentedBarColorDrawable;
}
var SegmentedBarItem = function(_super) {
__extends(SegmentedBarItem, _super);
function SegmentedBarItem() {
_super.apply(this, arguments);
}
SegmentedBarItem.prototype._update = function() {
if (this._parent && this._parent.android) {
var tabIndex = this._parent.items.indexOf(this);
var titleTextViewId = 16908310;
var titleTextView = this._parent.android.getTabWidget().getChildAt(tabIndex).findViewById(titleTextViewId);
titleTextView.setText(this.title + "");
}
};
return SegmentedBarItem;
}(common.SegmentedBarItem);
exports.SegmentedBarItem = SegmentedBarItem;
var SegmentedBar = function(_super) {
__extends(SegmentedBar, _super);
function SegmentedBar() {
_super.apply(this, arguments);
}
SegmentedBar.prototype._createUI = function() {
ensureTabHostClass();
this._android = new TabHostClass(this._context, null);
if (types.isNumber(this.selectedIndex) && this._android.getCurrentTab() !== this.selectedIndex) {
this._android.setCurrentTab(this.selectedIndex);
}
var that = new WeakRef(this);
this._listener = new android.widget.TabHost.OnTabChangeListener({
onTabChanged: function(id) {
var bar = that.get();
if (bar) {
bar.selectedIndex = parseInt(id);
}
}
});
var tabHostLayout = new android.widget.LinearLayout(this._context);
tabHostLayout.setOrientation(android.widget.LinearLayout.VERTICAL);
var tabWidget = new android.widget.TabWidget(this._context);
tabWidget.setId(R_ID_TABS);
tabHostLayout.addView(tabWidget);
var frame = new android.widget.FrameLayout(this._context);
frame.setId(R_ID_TABCONTENT);
frame.setVisibility(android.view.View.GONE);
tabHostLayout.addView(frame);
this._android.addView(tabHostLayout);
this._android.setup();
};
Object.defineProperty(SegmentedBar.prototype, "android", {
get: function() {
return this._android;
},
enumerable: true,
configurable: true
});
SegmentedBar.prototype.insertTab = function(tabItem, index) {
_super.prototype.insertTab.call(this, tabItem, index);
tabItem._parent = this;
var tab = this.android.newTabSpec(this.getValidIndex(index) + "");
tab.setIndicator(tabItem.title + "");
var that = this;
tab.setContent(new android.widget.TabHost.TabContentFactory({
createTabContent: function(tag) {
var tv = new android.widget.TextView(that._context);
tv.setVisibility(android.view.View.GONE);
return tv;
}
}));
this.android.addTab(tab);
this.resetNativeListener();
};
SegmentedBar.prototype.resetNativeListener = function() {
this.android.setOnTabChangedListener(null);
this.android.setOnTabChangedListener(this._listener);
};
return SegmentedBar;
}(common.SegmentedBar);
exports.SegmentedBar = SegmentedBar;
var TabHostClass;
function ensureTabHostClass() {
if (TabHostClass) {
return;
}
var OurTabHost = function(_super) {
__extends(OurTabHost, _super);
function OurTabHost(context, attrs) {
_super.call(this, context, attrs);
return global.__native(this);
}
OurTabHost.prototype.onAttachedToWindow = function() {};
return OurTabHost;
}(android.widget.TabHost);
TabHostClass = OurTabHost;
}
var SegmentedBarStyler = function() {
function SegmentedBarStyler() {}
SegmentedBarStyler.setColorProperty = function(v, newValue) {
var tabHost = v._nativeView;
for (var tabIndex = 0; tabIndex < tabHost.getTabWidget().getTabCount(); tabIndex++) {
var tab = tabHost.getTabWidget().getChildTabViewAt(tabIndex);
var t = tab.getChildAt(1);
t.setTextColor(newValue);
}
};
SegmentedBarStyler.resetColorProperty = function(v, nativeValue) {
var tabHost = v._nativeView;
for (var tabIndex = 0; tabIndex < tabHost.getTabWidget().getTabCount(); tabIndex++) {
var tab = tabHost.getTabWidget().getChildTabViewAt(tabIndex);
var t = tab.getChildAt(1);
t.setTextColor(nativeValue);
}
};
SegmentedBarStyler.getColorProperty = function(v) {
var tabHost = v._nativeView;
var textView = new android.widget.TextView(tabHost.getContext());
return textView.getCurrentTextColor();
};
SegmentedBarStyler.setFontInternalProperty = function(v, newValue, nativeValue) {
var tabHost = v._nativeView;
var fontValue = newValue;
for (var tabIndex = 0; tabIndex < tabHost.getTabWidget().getTabCount(); tabIndex++) {
var tab = tabHost.getTabWidget().getChildTabViewAt(tabIndex);
var t = tab.getChildAt(1);
var typeface = fontValue.getAndroidTypeface();
if (typeface) {
t.setTypeface(typeface);
} else {
t.setTypeface(nativeValue.typeface);
}
if (fontValue.fontSize) {
t.setTextSize(fontValue.fontSize);
} else {
t.setTextSize(android.util.TypedValue.COMPLEX_UNIT_PX, nativeValue.size);
}
}
};
SegmentedBarStyler.resetFontInternalProperty = function(v, nativeValue) {
var tabHost = v._nativeView;
for (var tabIndex = 0; tabIndex < tabHost.getTabWidget().getTabCount(); tabIndex++) {
var tab = tabHost.getTabWidget().getChildTabViewAt(tabIndex);
var t = tab.getChildAt(1);
t.setTypeface(nativeValue.typeface);
t.setTextSize(nativeValue.size);
}
};
SegmentedBarStyler.getFontInternalProperty = function(v) {
var tabHost = v._nativeView;
var textView = new android.widget.TextView(tabHost.getContext());
return {
typeface: textView.getTypeface(),
size: textView.getTextSize()
};
};
SegmentedBarStyler.setSelectedBackgroundColorProperty = function(v, newValue) {
ensureSegmentedBarColorDrawableClass();
var tabHost = v._nativeView;
for (var tabIndex = 0; tabIndex < tabHost.getTabWidget().getTabCount(); tabIndex++) {
var vg = tabHost.getTabWidget().getChildTabViewAt(tabIndex);
var backgroundDrawable = vg.getBackground();
if (android.os.Build.VERSION.SDK_INT > 21 && backgroundDrawable && types.isFunction(backgroundDrawable.setColorFilter)) {
backgroundDrawable.setColorFilter(newValue, android.graphics.PorterDuff.Mode.SRC_IN);
} else {
var stateDrawable = new android.graphics.drawable.StateListDrawable();
var arr = Array.create("int", 1);
arr[0] = R_ATTR_STATE_SELECTED;
var colorDrawable = new SegmentedBarColorDrawableClass(newValue);
stateDrawable.addState(arr, colorDrawable);
stateDrawable.setBounds(0, 15, vg.getRight(), vg.getBottom());
if (android.os.Build.VERSION.SDK_INT >= 16) {
vg.setBackground(stateDrawable);
} else {
vg.setBackgroundDrawable(stateDrawable);
}
}
}
};
SegmentedBarStyler.resetSelectedBackgroundColorProperty = function(v, nativeValue) {
var tabHost = v._nativeView;
ensureSegmentedBarColorDrawableClass();
for (var tabIndex = 0; tabIndex < tabHost.getTabWidget().getTabCount(); tabIndex++) {
var vg = tabHost.getTabWidget().getChildTabViewAt(tabIndex);
if (android.os.Build.VERSION.SDK_INT >= 16) {
vg.setBackground(nativeValue[tabIndex]);
} else {
vg.setBackgroundDrawable(nativeValue[tabIndex]);
}
}
};
SegmentedBarStyler.getSelectedBackgroundColorProperty = function(v) {
var tabHost = v._nativeView;
var result = [];
for (var tabIndex = 0; tabIndex < tabHost.getTabWidget().getTabCount(); tabIndex++) {
var background = tabHost.getTabWidget().getChildTabViewAt(tabIndex).getBackground();
result.push(background);
}
return result;
};
SegmentedBarStyler.registerHandlers = function() {
style.registerHandler(style.colorProperty, new style.StylePropertyChangedHandler(SegmentedBarStyler.setColorProperty, SegmentedBarStyler.resetColorProperty, SegmentedBarStyler.getColorProperty), "SegmentedBar");
style.registerHandler(style.fontInternalProperty, new style.StylePropertyChangedHandler(SegmentedBarStyler.setFontInternalProperty, SegmentedBarStyler.resetFontInternalProperty, SegmentedBarStyler.getFontInternalProperty), "SegmentedBar");
style.registerHandler(style.selectedBackgroundColorProperty, new style.StylePropertyChangedHandler(SegmentedBarStyler.setSelectedBackgroundColorProperty, SegmentedBarStyler.resetSelectedBackgroundColorProperty, SegmentedBarStyler.getSelectedBackgroundColorProperty), "SegmentedBar");
};
return SegmentedBarStyler;
}();
exports.SegmentedBarStyler = SegmentedBarStyler;
SegmentedBarStyler.registerHandlers();
}, function(module, exports, __webpack_require__) {
var view = __webpack_require__(12);
var proxy = __webpack_require__(41);
var dependencyObservable = __webpack_require__(17);
var bindable = __webpack_require__(42);
var types;
function ensureTypes() {
if (!types) {
types = __webpack_require__(14);
}
}
var knownCollections;
(function(knownCollections) {
knownCollections.items = "items";
})(knownCollections = exports.knownCollections || (exports.knownCollections = {}));
var CHILD_SEGMENTED_BAR_ITEM = "SegmentedBarItem";
var SegmentedBarItem = function(_super) {
__extends(SegmentedBarItem, _super);
function SegmentedBarItem() {
_super.apply(this, arguments);
this._title = "";
}
Object.defineProperty(SegmentedBarItem.prototype, "title", {
get: function() {
return this._title;
},
set: function(value) {
var strValue = value !== null && value !== undefined ? value.toString() : "";
if (this._title !== strValue) {
this._title = strValue;
this._update();
}
},
enumerable: true,
configurable: true
});
SegmentedBarItem.prototype._update = function() {};
return SegmentedBarItem;
}(bindable.Bindable);
exports.SegmentedBarItem = SegmentedBarItem;
var SegmentedBar = function(_super) {
__extends(SegmentedBar, _super);
function SegmentedBar() {
_super.apply(this, arguments);
}
SegmentedBar.prototype._addArrayFromBuilder = function(name, value) {
if (name === "items") {
this._setValue(SegmentedBar.itemsProperty, value);
}
};
SegmentedBar.prototype._adjustSelectedIndex = function(items) {
if (this.items) {
if (this.items.length > 0) {
ensureTypes();
if (types.isUndefined(this.selectedIndex) || this.selectedIndex > this.items.length - 1) {
this._setValue(SegmentedBar.selectedIndexProperty, 0);
}
} else {
this._setValue(SegmentedBar.selectedIndexProperty, undefined);
}
} else {
this._setValue(SegmentedBar.selectedIndexProperty, undefined);
}
};
Object.defineProperty(SegmentedBar.prototype, "selectedIndex", {
get: function() {
return this._getValue(SegmentedBar.selectedIndexProperty);
},
set: function(value) {
this._setValue(SegmentedBar.selectedIndexProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(SegmentedBar.prototype, "items", {
get: function() {
return this._getValue(SegmentedBar.itemsProperty);
},
set: function(value) {
this._setValue(SegmentedBar.itemsProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(SegmentedBar.prototype, "selectedBackgroundColor", {
get: function() {
return this.style.selectedBackgroundColor;
},
set: function(value) {
this.style.selectedBackgroundColor = value;
},
enumerable: true,
configurable: true
});
SegmentedBar.prototype._onBindingContextChanged = function(oldValue, newValue) {
_super.prototype._onBindingContextChanged.call(this, oldValue, newValue);
if (this.items && this.items.length > 0) {
var i = 0;
var length = this.items.length;
for (;i < length; i++) {
this.items[i].bindingContext = newValue;
}
}
};
SegmentedBar.prototype._addChildFromBuilder = function(name, value) {
if (name === CHILD_SEGMENTED_BAR_ITEM) {
if (!this.items) {
this.items = new Array();
}
this.items.push(value);
this.insertTab(value);
}
};
SegmentedBar.prototype.insertTab = function(tabItem, index) {};
SegmentedBar.prototype.getValidIndex = function(index) {
ensureTypes();
var idx;
var itemsLength = this.items ? this.items.length : 0;
if (types.isNullOrUndefined(index)) {
idx = itemsLength - 1;
} else {
if (index < 0 || index > itemsLength) {
idx = itemsLength - 1;
} else {
idx = index;
}
}
return idx;
};
SegmentedBar.selectedIndexProperty = new dependencyObservable.Property("selectedIndex", "SegmentedBar", new proxy.PropertyMetadata(undefined));
SegmentedBar.itemsProperty = new dependencyObservable.Property("items", "SegmentedBar", new proxy.PropertyMetadata(undefined));
SegmentedBar.selectedIndexChangedEvent = "selectedIndexChanged";
return SegmentedBar;
}(view.View);
exports.SegmentedBar = SegmentedBar;
}, function(module, exports, __webpack_require__) {
var common = __webpack_require__(137);
var style = __webpack_require__(15);
function onValuePropertyChanged(data) {
var slider = data.object;
if (!slider.android) {
return;
}
slider._setNativeValuesSilently(data.newValue - slider.minValue, slider.maxValue - slider.minValue);
}
function onMinValuePropertyChanged(data) {
var slider = data.object;
if (!slider.android) {
return;
}
slider._setNativeValuesSilently(slider.value - data.newValue, slider.maxValue - data.newValue);
}
function onMaxValuePropertyChanged(data) {
var slider = data.object;
if (!slider.android) {
return;
}
slider.android.setMax(data.newValue - slider.minValue);
}
common.Slider.valueProperty.metadata.onSetNativeValue = onValuePropertyChanged;
common.Slider.minValueProperty.metadata.onSetNativeValue = onMinValuePropertyChanged;
common.Slider.maxValueProperty.metadata.onSetNativeValue = onMaxValuePropertyChanged;
global.moduleMerge(common, exports);
var Slider = function(_super) {
__extends(Slider, _super);
function Slider() {
_super.apply(this, arguments);
}
Slider.prototype._createUI = function() {
this._android = new android.widget.SeekBar(this._context);
var that = new WeakRef(this);
this._changeListener = new android.widget.SeekBar.OnSeekBarChangeListener({
onProgressChanged: function(seekBar, progress, fromUser) {
var owner = that.get();
if (owner) {
if (!owner._supressNativeValue) {
var newValue = seekBar.getProgress() + owner.minValue;
owner._onPropertyChangedFromNative(common.Slider.valueProperty, newValue);
}
}
},
onStartTrackingTouch: function(seekBar) {},
onStopTrackingTouch: function(seekBar) {}
});
this._android.setOnSeekBarChangeListener(this._changeListener);
};
Object.defineProperty(Slider.prototype, "android", {
get: function() {
return this._android;
},
enumerable: true,
configurable: true
});
Slider.prototype._setNativeValuesSilently = function(newValue, newMaxValue) {
if (!this.android) {
return;
}
this._supressNativeValue = true;
try {
this.android.setMax(newMaxValue);
this.android.setProgress(newValue);
} finally {
this._supressNativeValue = false;
}
};
return Slider;
}(common.Slider);
exports.Slider = Slider;
var SliderStyler = function() {
function SliderStyler() {}
SliderStyler.setColorProperty = function(view, newValue) {
var bar = view._nativeView;
bar.getThumb().setColorFilter(newValue, android.graphics.PorterDuff.Mode.SRC_IN);
};
SliderStyler.resetColorProperty = function(view, nativeValue) {
var bar = view._nativeView;
bar.getThumb().clearColorFilter();
};
SliderStyler.setBackgroundAndBorderProperty = function(view, newValue) {
var bar = view._nativeView;
bar.getProgressDrawable().setColorFilter(newValue, android.graphics.PorterDuff.Mode.SRC_IN);
};
SliderStyler.resetBackgroundAndBorderProperty = function(view, nativeValue) {};
SliderStyler.registerHandlers = function() {
style.registerHandler(style.colorProperty, new style.StylePropertyChangedHandler(SliderStyler.setColorProperty, SliderStyler.resetColorProperty), "Slider");
style.registerHandler(style.backgroundColorProperty, new style.StylePropertyChangedHandler(SliderStyler.setBackgroundAndBorderProperty, SliderStyler.resetBackgroundAndBorderProperty), "Slider");
style.registerHandler(style.backgroundInternalProperty, style.ignorePropertyHandler, "Slider");
};
return SliderStyler;
}();
exports.SliderStyler = SliderStyler;
SliderStyler.registerHandlers();
}, function(module, exports, __webpack_require__) {
var view = __webpack_require__(12);
var dependencyObservable = __webpack_require__(17);
var proxy = __webpack_require__(41);
var Slider = function(_super) {
__extends(Slider, _super);
function Slider() {
_super.call(this);
}
Object.defineProperty(Slider.prototype, "value", {
get: function() {
return this._getValue(Slider.valueProperty);
},
set: function(value) {
var newValue = value;
newValue = Math.max(newValue, this.minValue);
newValue = Math.min(newValue, this.maxValue);
this._setValue(Slider.valueProperty, newValue);
},
enumerable: true,
configurable: true
});
Object.defineProperty(Slider.prototype, "minValue", {
get: function() {
return this._getValue(Slider.minValueProperty);
},
set: function(newValue) {
this._setValue(Slider.minValueProperty, newValue);
if (newValue > this.maxValue) {
this._setValue(Slider.maxValueProperty, newValue);
}
if (newValue > this.value) {
this._setValue(Slider.valueProperty, newValue);
}
},
enumerable: true,
configurable: true
});
Object.defineProperty(Slider.prototype, "maxValue", {
get: function() {
return this._getValue(Slider.maxValueProperty);
},
set: function(newValue) {
this._setValue(Slider.maxValueProperty, newValue);
if (newValue < this.minValue) {
this._setValue(Slider.minValueProperty, newValue);
}
if (newValue < this.value) {
this._setValue(Slider.valueProperty, newValue);
}
},
enumerable: true,
configurable: true
});
Slider.valueProperty = new dependencyObservable.Property("value", "Slider", new proxy.PropertyMetadata(0));
Slider.minValueProperty = new dependencyObservable.Property("minValue", "Slider", new proxy.PropertyMetadata(0));
Slider.maxValueProperty = new dependencyObservable.Property("maxValue", "Slider", new proxy.PropertyMetadata(100));
return Slider;
}(view.View);
exports.Slider = Slider;
}, function(module, exports, __webpack_require__) {
var common = __webpack_require__(139);
var style = __webpack_require__(15);
function onCheckedPropertyChanged(data) {
var swtch = data.object;
if (!swtch.android) {
return;
}
swtch.android.setChecked(data.newValue);
}
common.Switch.checkedProperty.metadata.onSetNativeValue = onCheckedPropertyChanged;
global.moduleMerge(common, exports);
var Switch = function(_super) {
__extends(Switch, _super);
function Switch() {
_super.apply(this, arguments);
}
Object.defineProperty(Switch.prototype, "android", {
get: function() {
return this._android;
},
enumerable: true,
configurable: true
});
Switch.prototype._createUI = function() {
this._android = new android.widget.Switch(this._context);
var that = new WeakRef(this);
this._android.setOnCheckedChangeListener(new android.widget.CompoundButton.OnCheckedChangeListener({
get owner() {
return that.get();
},
onCheckedChanged: function(sender, isChecked) {
if (this.owner) {
this.owner._onPropertyChangedFromNative(common.Switch.checkedProperty, isChecked);
}
}
}));
};
return Switch;
}(common.Switch);
exports.Switch = Switch;
var SwitchStyler = function() {
function SwitchStyler() {}
SwitchStyler.setColorProperty = function(view, newValue) {
var sw = view._nativeView;
var drawable = sw.getThumbDrawable();
if (drawable) {
drawable.setColorFilter(newValue, android.graphics.PorterDuff.Mode.SRC_IN);
}
};
SwitchStyler.resetColorProperty = function(view, nativeValue) {};
SwitchStyler.setBackgroundAndBorderProperty = function(view, newValue) {
var sw = view._nativeView;
var drawable = sw.getTrackDrawable();
if (drawable) {
drawable.setColorFilter(newValue, android.graphics.PorterDuff.Mode.SRC_IN);
}
};
SwitchStyler.resetBackgroundAndBorderProperty = function(view, nativeValue) {};
SwitchStyler.registerHandlers = function() {
style.registerHandler(style.colorProperty, new style.StylePropertyChangedHandler(SwitchStyler.setColorProperty, SwitchStyler.resetColorProperty), "Switch");
style.registerHandler(style.backgroundColorProperty, new style.StylePropertyChangedHandler(SwitchStyler.setBackgroundAndBorderProperty, SwitchStyler.resetBackgroundAndBorderProperty), "Switch");
style.registerHandler(style.backgroundInternalProperty, style.ignorePropertyHandler, "Switch");
};
return SwitchStyler;
}();
exports.SwitchStyler = SwitchStyler;
SwitchStyler.registerHandlers();
}, function(module, exports, __webpack_require__) {
var view = __webpack_require__(12);
var dependencyObservable = __webpack_require__(17);
var proxy = __webpack_require__(41);
var Switch = function(_super) {
__extends(Switch, _super);
function Switch() {
_super.apply(this, arguments);
}
Object.defineProperty(Switch.prototype, "checked", {
get: function() {
return this._getValue(Switch.checkedProperty);
},
set: function(value) {
this._setValue(Switch.checkedProperty, value);
},
enumerable: true,
configurable: true
});
Switch.checkedProperty = new dependencyObservable.Property("checked", "Switch", new proxy.PropertyMetadata(false));
return Switch;
}(view.View);
exports.Switch = Switch;
}, function(module, exports, __webpack_require__) {
var common = __webpack_require__(141);
var trace = __webpack_require__(16);
var types = __webpack_require__(14);
var utils = __webpack_require__(27);
var style = __webpack_require__(15);
var imageSource;
function ensureImageSource() {
if (!imageSource) {
imageSource = __webpack_require__(55);
}
}
var VIEWS_STATES = "_viewStates";
var ACCENT_COLOR = "colorAccent";
var PRIMARY_COLOR = "colorPrimary";
var DEFAULT_ELEVATION = 4;
global.moduleMerge(common, exports);
var TabViewItem = function(_super) {
__extends(TabViewItem, _super);
function TabViewItem() {
_super.apply(this, arguments);
}
TabViewItem.prototype._update = function() {
if (this._parent) {
this._parent._updateTabForItem(this);
}
};
return TabViewItem;
}(common.TabViewItem);
exports.TabViewItem = TabViewItem;
var PagerAdapterClass;
function ensurePagerAdapterClass() {
if (PagerAdapterClass) {
return;
}
var PagerAdapterClassInner = function(_super) {
__extends(PagerAdapterClassInner, _super);
function PagerAdapterClassInner(owner, items) {
_super.call(this);
this.owner = owner;
this.items = items;
return global.__native(this);
}
PagerAdapterClassInner.prototype.getCount = function() {
return this.items ? this.items.length : 0;
};
PagerAdapterClassInner.prototype.getPageTitle = function(index) {
if (index < 0 || index >= this.items.length) {
return "";
}
return this.items[index].title;
};
PagerAdapterClassInner.prototype.instantiateItem = function(container, index) {
if (trace.enabled) {
trace.write("TabView.PagerAdapter.instantiateItem; container: " + container + "; index: " + index, common.traceCategory);
}
var item = this.items[index];
if (item.view.parent !== this.owner) {
this.owner._addView(item.view);
}
if (this[VIEWS_STATES]) {
if (trace.enabled) {
trace.write("TabView.PagerAdapter.instantiateItem; restoreHierarchyState: " + item.view, common.traceCategory);
}
item.view._nativeView.restoreHierarchyState(this[VIEWS_STATES]);
}
container.addView(item.view._nativeView);
return item.view._nativeView;
};
PagerAdapterClassInner.prototype.destroyItem = function(container, index, _object) {
if (trace.enabled) {
trace.write("TabView.PagerAdapter.destroyItem; container: " + container + "; index: " + index + "; _object: " + _object, common.traceCategory);
}
var item = this.items[index];
var nativeView = item.view._nativeView;
if (nativeView.toString() !== _object.toString()) {
throw new Error("Expected " + nativeView.toString() + " to equal " + _object.toString());
}
container.removeView(nativeView);
if (item.view.parent === this.owner) {
this.owner._removeView(item.view);
}
};
PagerAdapterClassInner.prototype.isViewFromObject = function(view, _object) {
return view === _object;
};
PagerAdapterClassInner.prototype.saveState = function() {
if (trace.enabled) {
trace.write("TabView.PagerAdapter.saveState", common.traceCategory);
}
var owner = this.owner;
if (!owner || owner._childrenCount === 0) {
return null;
}
if (!this[VIEWS_STATES]) {
this[VIEWS_STATES] = new android.util.SparseArray();
}
var viewStates = this[VIEWS_STATES];
var childCallback = function(view) {
var nativeView = view._nativeView;
if (nativeView && nativeView.isSaveFromParentEnabled && nativeView.isSaveFromParentEnabled()) {
nativeView.saveHierarchyState(viewStates);
}
return true;
};
owner._eachChildView(childCallback);
var bundle = new android.os.Bundle();
bundle.putSparseParcelableArray(VIEWS_STATES, viewStates);
return bundle;
};
PagerAdapterClassInner.prototype.restoreState = function(state, loader) {
if (trace.enabled) {
trace.write("TabView.PagerAdapter.restoreState", common.traceCategory);
}
var bundle = state;
bundle.setClassLoader(loader);
this[VIEWS_STATES] = bundle.getSparseParcelableArray(VIEWS_STATES);
};
return PagerAdapterClassInner;
}(android.support.v4.view.PagerAdapter);
PagerAdapterClass = PagerAdapterClassInner;
}
var PageChangedListenerClass;
function ensurePageChangedListenerClass() {
if (PageChangedListenerClass) {
return;
}
var PageChangedListener = function(_super) {
__extends(PageChangedListener, _super);
function PageChangedListener(owner) {
_super.call(this);
this._owner = owner;
return global.__native(this);
}
PageChangedListener.prototype.onPageSelected = function(position) {
this._owner.selectedIndex = position;
};
return PageChangedListener;
}(android.support.v4.view.ViewPager.SimpleOnPageChangeListener);
PageChangedListenerClass = PageChangedListener;
}
var TabView = function(_super) {
__extends(TabView, _super);
function TabView() {
_super.apply(this, arguments);
this._androidViewId = -1;
this._androidOffscreenTabLimit = 1;
}
Object.defineProperty(TabView.prototype, "android", {
get: function() {
return this._grid;
},
enumerable: true,
configurable: true
});
TabView.prototype._createUI = function() {
if (trace.enabled) {
trace.write("TabView._createUI(" + this + ");", common.traceCategory);
}
this._grid = new org.nativescript.widgets.GridLayout(this._context);
this._grid.addRow(new org.nativescript.widgets.ItemSpec(1, org.nativescript.widgets.GridUnitType.auto));
this._grid.addRow(new org.nativescript.widgets.ItemSpec(1, org.nativescript.widgets.GridUnitType.star));
this._tabLayout = new org.nativescript.widgets.TabLayout(this._context);
this._grid.addView(this._tabLayout);
this.setElevation();
var accentColor = utils.ad.resources.getPalleteColor(ACCENT_COLOR, this._context);
if (accentColor) {
this._tabLayout.setSelectedIndicatorColors([ accentColor ]);
}
var primaryColor = utils.ad.resources.getPalleteColor(PRIMARY_COLOR, this._context);
if (primaryColor) {
this._tabLayout.setBackgroundColor(primaryColor);
}
if (this._androidViewId < 0) {
this._androidViewId = android.view.View.generateViewId();
}
this._viewPager = new android.support.v4.view.ViewPager(this._context);
if (this._androidOffscreenTabLimit !== 1) {
this._viewPager.setOffscreenPageLimit(this._androidOffscreenTabLimit);
}
this._viewPager.setId(this._androidViewId);
var lp = new org.nativescript.widgets.CommonLayoutParams();
lp.row = 1;
this._viewPager.setLayoutParams(lp);
this._grid.addView(this._viewPager);
ensurePageChangedListenerClass();
this._pageChagedListener = new PageChangedListenerClass(this);
this._viewPager.addOnPageChangeListener(this._pageChagedListener);
};
TabView.prototype.setElevation = function() {
var compat = android.support.v4.view.ViewCompat;
if (compat.setElevation) {
var val = DEFAULT_ELEVATION * utils.layout.getDisplayDensity();
compat.setElevation(this._grid, val);
compat.setElevation(this._tabLayout, val);
}
};
TabView.prototype._onItemsPropertyChangedSetNativeValue = function(data) {
var _this = this;
if (trace.enabled) {
trace.write("TabView._onItemsPropertyChangedSetNativeValue(" + data.oldValue + " ---\x3e " + data.newValue + ");", common.traceCategory);
}
if (data.oldValue) {
var oldItems = data.oldValue;
oldItems.forEach(function(oldItem) {
oldItem._parent = null;
});
this._viewPager.setAdapter(null);
this._pagerAdapter = null;
this._tabLayout.setItems(null, null);
}
if (data.newValue) {
var items = data.newValue;
var tabItems = new Array();
items.forEach(function(item, idx, arr) {
if (types.isNullOrUndefined(item.view)) {
throw new Error("View of TabViewItem at index " + idx + " is " + item.view);
}
item._parent = _this;
if (item.view.parent !== _this) {
_this._addView(item.view, idx);
}
tabItems.push(_this.createTabItem(item));
});
ensurePagerAdapterClass();
this._pagerAdapter = new PagerAdapterClass(this, data.newValue);
this._viewPager.setAdapter(this._pagerAdapter);
this._tabLayout.setItems(tabItems, this._viewPager);
}
this._updateSelectedIndexOnItemsPropertyChanged(data.newValue);
this.style._syncNativeProperties();
};
TabView.prototype._updateTabForItem = function(item) {
if (this.items && this.items.length > 0) {
var index = this.items.indexOf(item);
if (index >= 0) {
this._tabLayout.updateItemAt(index, this.createTabItem(item));
}
}
};
TabView.prototype._onSelectedIndexPropertyChangedSetNativeValue = function(data) {
if (trace.enabled) {
trace.write("TabView._onSelectedIndexPropertyChangedSetNativeValue(" + data.oldValue + " ---\x3e " + data.newValue + ");", common.traceCategory);
}
_super.prototype._onSelectedIndexPropertyChangedSetNativeValue.call(this, data);
var index = data.newValue;
if (!types.isNullOrUndefined(index)) {
var viewPagerSelectedIndex = this._viewPager.getCurrentItem();
if (viewPagerSelectedIndex !== index) {
if (trace.enabled) {
trace.write("TabView this._viewPager.setCurrentItem(" + index + ", true);", common.traceCategory);
}
this._viewPager.setCurrentItem(index, true);
}
}
var args = {
eventName: TabView.selectedIndexChangedEvent,
object: this,
oldIndex: data.oldValue,
newIndex: data.newValue
};
this.notify(args);
};
TabView.prototype.createTabItem = function(item) {
var result = new org.nativescript.widgets.TabItemSpec();
result.title = item.title;
if (item.iconSource) {
if (item.iconSource.indexOf(utils.RESOURCE_PREFIX) === 0) {
result.iconId = utils.ad.resources.getDrawableId(item.iconSource.substr(utils.RESOURCE_PREFIX.length));
} else {
ensureImageSource();
var is = imageSource.fromFileOrResource(item.iconSource);
if (is) {
result.iconDrawable = new android.graphics.drawable.BitmapDrawable(is.android);
}
}
}
return result;
};
TabView.prototype._getAndroidTabView = function() {
return this._tabLayout;
};
Object.defineProperty(TabView.prototype, "androidOffscreenTabLimit", {
get: function() {
return this._androidOffscreenTabLimit;
},
set: function(value) {
if (value !== this._androidOffscreenTabLimit) {
this._androidOffscreenTabLimit = value;
if (this._viewPager) {
this._viewPager.setOffscreenPageLimit(value);
}
}
},
enumerable: true,
configurable: true
});
return TabView;
}(common.TabView);
exports.TabView = TabView;
var TabViewStyler = function() {
function TabViewStyler() {}
TabViewStyler.setFontInternalProperty = function(v, newValue, nativeValue) {
var tab = v;
var fontValue = newValue;
var typeface = fontValue.getAndroidTypeface();
var tabLayout = tab._getAndroidTabView();
var tabCount = tabLayout.getItemCount();
for (var i = 0; i < tabCount; i++) {
var tv = tabLayout.getTextViewForItemAt(i);
if (typeface) {
tv.setTypeface(typeface);
} else if (nativeValue) {
tv.setTypeface(nativeValue.typeface);
}
if (fontValue.fontSize) {
tv.setTextSize(fontValue.fontSize);
} else if (nativeValue) {
tv.setTextSize(android.util.TypedValue.COMPLEX_UNIT_PX, nativeValue.size);
}
}
};
TabViewStyler.resetFontInternalProperty = function(v, nativeValue) {
if (!nativeValue) {
return;
}
var tab = v;
var tabLayout = tab._getAndroidTabView();
var tabCount = tabLayout.getItemCount();
for (var i = 0; i < tabCount; i++) {
var tv = tabLayout.getTextViewForItemAt(i);
tv.setTypeface(nativeValue.typeface);
tv.setTextSize(android.util.TypedValue.COMPLEX_UNIT_PX, nativeValue.size);
}
};
TabViewStyler.getNativeFontInternalValue = function(v) {
var tab = v;
var tv = tab._getAndroidTabView().getTextViewForItemAt(0);
if (tv) {
return {
typeface: tv.getTypeface(),
size: tv.getTextSize()
};
} else {
return null;
}
};
TabViewStyler.setTabTextColorProperty = function(v, newValue) {
var tabLayout = v._getAndroidTabView();
tabLayout.setTabTextColor(types.isNumber(newValue) ? new java.lang.Integer(newValue) : newValue);
};
TabViewStyler.resetTabTextColorProperty = function(v, nativeValue) {
var tabLayout = v._getAndroidTabView();
tabLayout.setTabTextColor(types.isNumber(nativeValue) ? new java.lang.Integer(nativeValue) : nativeValue);
};
TabViewStyler.getTabTextColorProperty = function(v) {
var tabLayout = v._getAndroidTabView();
return tabLayout.getTabTextColor();
};
TabViewStyler.setTabBackgroundColorProperty = function(v, newValue) {
var tabLayout = v._getAndroidTabView();
tabLayout.setBackgroundColor(newValue);
};
TabViewStyler.resetTabBackgroundColorProperty = function(v, nativeValue) {
var tabLayout = v._getAndroidTabView();
tabLayout.setBackgroundColor(nativeValue);
};
TabViewStyler.getTabBackgroundColorProperty = function(v) {
var tabLayout = v._getAndroidTabView();
var background = tabLayout.getBackground();
if (background instanceof android.graphics.drawable.ColorDrawable) {
return background.getColor();
}
return null;
};
TabViewStyler.setSelectedTabTextColorProperty = function(v, newValue) {
var tabLayout = v._getAndroidTabView();
tabLayout.setSelectedTabTextColor(types.isNumber(newValue) ? new java.lang.Integer(newValue) : newValue);
};
TabViewStyler.resetSelectedTabTextColorProperty = function(v, nativeValue) {
var tabLayout = v._getAndroidTabView();
tabLayout.setSelectedTabTextColor(types.isNumber(nativeValue) ? new java.lang.Integer(nativeValue) : nativeValue);
};
TabViewStyler.getSelectedTabTextColorProperty = function(v) {
var tabLayout = v._getAndroidTabView();
return tabLayout.getSelectedTabTextColor();
};
TabViewStyler.setAndroidSelectedTabHighlightColorProperty = function(v, newValue) {
var tabLayout = v._getAndroidTabView();
tabLayout.setSelectedIndicatorColors([ newValue ]);
};
TabViewStyler.resetAndroidSelectedTabHighlightColorProperty = function(v, nativeValue) {
var tabLayout = v._getAndroidTabView();
tabLayout.setSelectedIndicatorColors([ nativeValue ]);
};
TabViewStyler.getAndroidSelectedTabHighlightColorProperty = function(v) {
var tabLayout = v._getAndroidTabView();
var selectedIndicatorColors = tabLayout.getSelectedIndicatorColors();
return selectedIndicatorColors.length > 0 ? selectedIndicatorColors[0] : null;
};
TabViewStyler.setTextTransformProperty = function(v, newValue) {
var tabView = v;
var tabLayout = tabView._getAndroidTabView();
for (var i = 0; i < tabView.items.length; i++) {
var textView = tabLayout.getTextViewForItemAt(i);
var str = tabView.items[i].title;
var result = utils.ad.getTransformedString(newValue, textView, str);
textView.setText(result);
}
};
TabViewStyler.resetTextTransformProperty = function(v, nativeValue) {
var tabView = v;
var tabLayout = tabView._getAndroidTabView();
for (var i = 0; i < tabView.items.length; i++) {
var textView = tabLayout.getTextViewForItemAt(i);
var str = tabView.items[i].title;
var result = utils.ad.getTransformedString(nativeValue, textView, str);
textView.setText(result);
}
};
TabViewStyler.registerHandlers = function() {
style.registerHandler(style.fontInternalProperty, new style.StylePropertyChangedHandler(TabViewStyler.setFontInternalProperty, TabViewStyler.resetFontInternalProperty, TabViewStyler.getNativeFontInternalValue), "TabView");
style.registerHandler(style.tabTextColorProperty, new style.StylePropertyChangedHandler(TabViewStyler.setTabTextColorProperty, TabViewStyler.resetTabTextColorProperty, TabViewStyler.getTabTextColorProperty), "TabView");
style.registerHandler(style.tabBackgroundColorProperty, new style.StylePropertyChangedHandler(TabViewStyler.setTabBackgroundColorProperty, TabViewStyler.resetTabBackgroundColorProperty, TabViewStyler.getTabBackgroundColorProperty), "TabView");
style.registerHandler(style.selectedTabTextColorProperty, new style.StylePropertyChangedHandler(TabViewStyler.setSelectedTabTextColorProperty, TabViewStyler.resetSelectedTabTextColorProperty, TabViewStyler.getSelectedTabTextColorProperty), "TabView");
style.registerHandler(style.androidSelectedTabHighlightColorProperty, new style.StylePropertyChangedHandler(TabViewStyler.setAndroidSelectedTabHighlightColorProperty, TabViewStyler.resetAndroidSelectedTabHighlightColorProperty, TabViewStyler.getAndroidSelectedTabHighlightColorProperty), "TabView");
style.registerHandler(style.textTransformProperty, new style.StylePropertyChangedHandler(TabViewStyler.setTextTransformProperty, TabViewStyler.resetTextTransformProperty), "TabView");
};
return TabViewStyler;
}();
exports.TabViewStyler = TabViewStyler;
TabViewStyler.registerHandlers();
}, function(module, exports, __webpack_require__) {
var view_1 = __webpack_require__(12);
var dependency_observable_1 = __webpack_require__(17);
var bindable_1 = __webpack_require__(42);
var platform_1 = __webpack_require__(35);
var proxy_1 = __webpack_require__(41);
var types = __webpack_require__(14);
var trace = __webpack_require__(16);
var AffectsLayout = platform_1.isAndroid ? dependency_observable_1.PropertyMetadataSettings.None : dependency_observable_1.PropertyMetadataSettings.AffectsLayout;
exports.traceCategory = "TabView";
var TabViewItem = function(_super) {
__extends(TabViewItem, _super);
function TabViewItem() {
_super.apply(this, arguments);
this._title = "";
}
Object.defineProperty(TabViewItem.prototype, "title", {
get: function() {
return this._title;
},
set: function(value) {
if (this._title !== value) {
this._title = value;
this._update();
}
},
enumerable: true,
configurable: true
});
Object.defineProperty(TabViewItem.prototype, "view", {
get: function() {
return this._view;
},
set: function(value) {
if (this._view !== value) {
if (this._view) {
throw new Error("Changing the view of an already loaded TabViewItem is not currently supported.");
}
this._view = value;
}
},
enumerable: true,
configurable: true
});
Object.defineProperty(TabViewItem.prototype, "iconSource", {
get: function() {
return this._iconSource;
},
set: function(value) {
if (this._iconSource !== value) {
this._iconSource = value;
this._update();
}
},
enumerable: true,
configurable: true
});
TabViewItem.prototype._update = function() {};
return TabViewItem;
}(bindable_1.Bindable);
exports.TabViewItem = TabViewItem;
var TAB_VIEW = "TabView";
var ITEMS = "items";
var SELECTED_INDEX = "selectedIndex";
var knownCollections;
(function(knownCollections) {
knownCollections.items = "items";
})(knownCollections = exports.knownCollections || (exports.knownCollections = {}));
var itemsProperty = new dependency_observable_1.Property(ITEMS, TAB_VIEW, new proxy_1.PropertyMetadata(undefined, AffectsLayout));
var selectedIndexProperty = new dependency_observable_1.Property(SELECTED_INDEX, TAB_VIEW, new proxy_1.PropertyMetadata(undefined, AffectsLayout));
selectedIndexProperty.metadata.onSetNativeValue = function(data) {
var tabView = data.object;
tabView._onSelectedIndexPropertyChangedSetNativeValue(data);
};
itemsProperty.metadata.onSetNativeValue = function(data) {
var tabView = data.object;
tabView._onItemsPropertyChangedSetNativeValue(data);
};
var TabView = function(_super) {
__extends(TabView, _super);
function TabView() {
_super.apply(this, arguments);
}
TabView.prototype._addArrayFromBuilder = function(name, value) {
if (name === ITEMS) {
this.items = value;
}
};
Object.defineProperty(TabView.prototype, "items", {
get: function() {
return this._getValue(TabView.itemsProperty);
},
set: function(value) {
this._setValue(TabView.itemsProperty, value);
},
enumerable: true,
configurable: true
});
TabView.prototype._onItemsPropertyChangedSetNativeValue = function(data) {
if (trace.enabled) {
trace.write("TabView.__onItemsPropertyChangedSetNativeValue(" + data.oldValue + " -> " + data.newValue + ");", exports.traceCategory);
}
if (data.oldValue) {
this._removeTabs(data.oldValue);
}
if (data.newValue) {
this._addTabs(data.newValue);
}
this._updateSelectedIndexOnItemsPropertyChanged(data.newValue);
};
TabView.prototype._updateSelectedIndexOnItemsPropertyChanged = function(newItems) {
if (trace.enabled) {
trace.write("TabView._updateSelectedIndexOnItemsPropertyChanged(" + newItems + ");", exports.traceCategory);
}
var newItemsCount = 0;
if (newItems) {
newItemsCount = newItems.length;
}
if (newItemsCount === 0) {
this.selectedIndex = undefined;
} else if (types.isUndefined(this.selectedIndex) || this.selectedIndex >= newItemsCount) {
this.selectedIndex = 0;
}
};
TabView.prototype._removeTabs = function(oldItems) {
var i;
var length = oldItems.length;
var oldItem;
for (i = 0; i < length; i++) {
oldItem = oldItems[i];
if (!oldItem) {
throw new Error("TabViewItem at index " + i + " is undefined.");
}
if (!oldItem.view) {
throw new Error("TabViewItem at index " + i + " does not have a view.");
}
this._removeView(oldItem.view);
}
};
TabView.prototype._addTabs = function(newItems) {
var i;
var length = newItems.length;
var newItem;
for (i = 0; i < length; i++) {
newItem = newItems[i];
if (!newItem) {
throw new Error("TabViewItem at index " + i + " is undefined.");
}
if (!newItem.view) {
throw new Error("TabViewItem at index " + i + " does not have a view.");
}
this._addView(newItem.view, i);
}
};
Object.defineProperty(TabView.prototype, "selectedIndex", {
get: function() {
return this._getValue(TabView.selectedIndexProperty);
},
set: function(value) {
this._setValue(TabView.selectedIndexProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(TabView.prototype, "selectedColor", {
get: function() {
if (platform_1.isAndroid) {
return this.style.androidSelectedTabHighlightColor;
} else {
return this.style.selectedTabTextColor;
}
},
set: function(value) {
if (platform_1.isAndroid) {
this.style.androidSelectedTabHighlightColor = value;
} else {
this.style.selectedTabTextColor = value;
}
},
enumerable: true,
configurable: true
});
Object.defineProperty(TabView.prototype, "tabsBackgroundColor", {
get: function() {
return this.style.tabBackgroundColor;
},
set: function(value) {
this.style.tabBackgroundColor = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(TabView.prototype, "tabTextColor", {
get: function() {
return this.style.tabTextColor;
},
set: function(value) {
this.style.tabTextColor = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(TabView.prototype, "tabBackgroundColor", {
get: function() {
return this.style.tabBackgroundColor;
},
set: function(value) {
this.style.tabBackgroundColor = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(TabView.prototype, "selectedTabTextColor", {
get: function() {
return this.style.selectedTabTextColor;
},
set: function(value) {
this.style.selectedTabTextColor = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(TabView.prototype, "androidSelectedTabHighlightColor", {
get: function() {
return this.style.androidSelectedTabHighlightColor;
},
set: function(value) {
this.style.androidSelectedTabHighlightColor = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(TabView.prototype, "textTransform", {
get: function() {
return this.style.textTransform;
},
set: function(value) {
this.style.textTransform = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(TabView.prototype, "iosIconRenderingMode", {
get: function() {
return undefined;
},
set: function(value) {},
enumerable: true,
configurable: true
});
Object.defineProperty(TabView.prototype, "androidOffscreenTabLimit", {
get: function() {
return undefined;
},
set: function(value) {},
enumerable: true,
configurable: true
});
TabView.prototype._onSelectedIndexPropertyChangedSetNativeValue = function(data) {
var index = this.selectedIndex;
if (types.isUndefined(index)) {
return;
}
if (types.isDefined(this.items)) {
if (index < 0 || index >= this.items.length) {
this.selectedIndex = undefined;
throw new Error("SelectedIndex should be between [0, items.length)");
}
}
};
Object.defineProperty(TabView.prototype, "_selectedView", {
get: function() {
var _items = this.items;
var _selectedIndex = this.selectedIndex;
if (!_items) {
return undefined;
}
if (_items.length === 0) {
return undefined;
}
if (_selectedIndex === undefined) {
return undefined;
}
return _items[_selectedIndex].view;
},
enumerable: true,
configurable: true
});
Object.defineProperty(TabView.prototype, "_childrenCount", {
get: function() {
if (this.items) {
return this.items.length;
}
return 0;
},
enumerable: true,
configurable: true
});
TabView.prototype._eachChildView = function(callback) {
var _items = this.items;
if (!_items) {
return;
}
var i;
var length = _items.length;
var item;
var retVal;
for (i = 0; i < length; i++) {
item = _items[i];
if (item.view) {
retVal = callback(item.view);
if (retVal === false) {
break;
}
}
}
};
TabView.prototype._onBindingContextChanged = function(oldValue, newValue) {
_super.prototype._onBindingContextChanged.call(this, oldValue, newValue);
if (this.items && this.items.length > 0) {
var i = 0;
var length = this.items.length;
for (;i < length; i++) {
this.items[i].bindingContext = newValue;
}
}
};
TabView.prototype._getAndroidTabView = function() {
return undefined;
};
TabView.prototype._updateIOSTabBarColorsAndFonts = function() {};
TabView.itemsProperty = itemsProperty;
TabView.selectedIndexProperty = selectedIndexProperty;
TabView.selectedIndexChangedEvent = "selectedIndexChanged";
return TabView;
}(view_1.View);
exports.TabView = TabView;
}, function(module, exports, __webpack_require__) {
var common = __webpack_require__(143);
var trace = __webpack_require__(16);
global.moduleMerge(common, exports);
var fs;
function ensureFS() {
if (!fs) {
fs = __webpack_require__(32);
}
}
var WebViewClientClass;
function ensureWebViewClientClass() {
if (WebViewClientClass) {
return;
}
var WebViewClientClassInner = function(_super) {
__extends(WebViewClientClassInner, _super);
function WebViewClientClassInner(view) {
_super.call(this);
this._view = view;
return global.__native(this);
}
WebViewClientClassInner.prototype.shouldOverrideUrlLoading = function(view, url) {
if (trace.enabled) {
trace.write("WebViewClientClass.shouldOverrideUrlLoading(" + url + ")", trace.categories.Debug);
}
return false;
};
WebViewClientClassInner.prototype.onPageStarted = function(view, url, favicon) {
_super.prototype.onPageStarted.call(this, view, url, favicon);
if (this._view) {
if (trace.enabled) {
trace.write("WebViewClientClass.onPageStarted(" + url + ", " + favicon + ")", trace.categories.Debug);
}
this._view._onLoadStarted(url, common.WebView.navigationTypes[common.WebView.navigationTypes.indexOf("linkClicked")]);
}
};
WebViewClientClassInner.prototype.onPageFinished = function(view, url) {
_super.prototype.onPageFinished.call(this, view, url);
if (this._view) {
if (trace.enabled) {
trace.write("WebViewClientClass.onPageFinished(" + url + ")", trace.categories.Debug);
}
this._view._onLoadFinished(url, undefined);
}
};
WebViewClientClassInner.prototype.onReceivedError = function() {
var view = arguments[0];
if (arguments.length === 4) {
var errorCode = arguments[1];
var description = arguments[2];
var failingUrl = arguments[3];
_super.prototype.onReceivedError.call(this, view, errorCode, description, failingUrl);
if (this._view) {
if (trace.enabled) {
trace.write("WebViewClientClass.onReceivedError(" + errorCode + ", " + description + ", " + failingUrl + ")", trace.categories.Debug);
}
this._view._onLoadFinished(failingUrl, description + "(" + errorCode + ")");
}
} else {
var request = arguments[1];
var error = arguments[2];
_super.prototype.onReceivedError.call(this, view, request, error);
if (this._view) {
if (trace.enabled) {
trace.write("WebViewClientClass.onReceivedError(" + error.getErrorCode() + ", " + error.getDescription() + ", " + (error.getUrl && error.getUrl()) + ")", trace.categories.Debug);
}
this._view._onLoadFinished(error.getUrl && error.getUrl(), error.getDescription() + "(" + error.getErrorCode() + ")");
}
}
};
return WebViewClientClassInner;
}(android.webkit.WebViewClient);
WebViewClientClass = WebViewClientClassInner;
}
var WebView = function(_super) {
__extends(WebView, _super);
function WebView() {
_super.call(this);
ensureWebViewClientClass();
this._webViewClient = new WebViewClientClass(this);
}
Object.defineProperty(WebView.prototype, "android", {
get: function() {
return this._android;
},
enumerable: true,
configurable: true
});
WebView.prototype._createUI = function() {
this._android = new android.webkit.WebView(this._context);
this._android.getSettings().setJavaScriptEnabled(true);
this._android.getSettings().setBuiltInZoomControls(true);
this._android.setWebViewClient(this._webViewClient);
};
WebView.prototype._onDetached = function(force) {
if (this.android) {
this.android.destroy();
}
_super.prototype._onDetached.call(this, force);
};
WebView.prototype._loadUrl = function(url) {
if (!this._android) {
return;
}
if (trace.enabled) {
trace.write("WebView._loadUrl(" + url + ")", trace.categories.Debug);
}
this._android.stopLoading();
this._android.loadUrl(url);
};
WebView.prototype._loadFileOrResource = function(path, content) {
if (!this._android) {
return;
}
var baseUrl = "file:///" + path.substring(0, path.lastIndexOf("/") + 1);
this._android.loadDataWithBaseURL(baseUrl, content, "text/html", "utf-8", null);
};
WebView.prototype._loadHttp = function(src) {
if (!this._android) {
return;
}
this._android.loadUrl(src);
};
WebView.prototype._loadData = function(src) {
if (!this._android) {
return;
}
ensureFS();
var baseUrl = "file:///" + fs.knownFolders.currentApp().path + "/";
this._android.loadDataWithBaseURL(baseUrl, src, "text/html", "utf-8", null);
};
Object.defineProperty(WebView.prototype, "canGoBack", {
get: function() {
return this._android.canGoBack();
},
enumerable: true,
configurable: true
});
WebView.prototype.stopLoading = function() {
if (this._android) {
this._android.stopLoading();
}
};
Object.defineProperty(WebView.prototype, "canGoForward", {
get: function() {
return this._android.canGoForward();
},
enumerable: true,
configurable: true
});
WebView.prototype.goBack = function() {
this._android.goBack();
};
WebView.prototype.goForward = function() {
this._android.goForward();
};
WebView.prototype.reload = function() {
this._android.reload();
};
return WebView;
}(common.WebView);
exports.WebView = WebView;
}, function(module, exports, __webpack_require__) {
var view = __webpack_require__(12);
var dependencyObservable = __webpack_require__(17);
var proxy = __webpack_require__(41);
var utils = __webpack_require__(27);
var trace = __webpack_require__(16);
var fs;
function ensureFS() {
if (!fs) {
fs = __webpack_require__(32);
}
}
var urlProperty = new dependencyObservable.Property("url", "WebView", new proxy.PropertyMetadata(""));
function onUrlPropertyChanged(data) {
var webView = data.object;
if (webView._suspendLoading) {
return;
}
webView._loadUrl(data.newValue);
}
urlProperty.metadata.onSetNativeValue = onUrlPropertyChanged;
var srcProperty = new dependencyObservable.Property("src", "WebView", new proxy.PropertyMetadata(""));
function onSrcPropertyChanged(data) {
var webView = data.object;
if (webView._suspendLoading) {
return;
}
webView.stopLoading();
var src = data.newValue;
if (trace.enabled) {
trace.write("WebView._loadSrc(" + src + ")", trace.categories.Debug);
}
if (utils.isFileOrResourcePath(src)) {
ensureFS();
if (src.indexOf("~/") === 0) {
src = fs.path.join(fs.knownFolders.currentApp().path, src.replace("~/", ""));
}
if (fs.File.exists(src)) {
var file = fs.File.fromPath(src);
var content = file.readTextSync();
webView._loadFileOrResource(src, content);
}
} else if (src.toLowerCase().indexOf("http://") === 0 || src.toLowerCase().indexOf("https://") === 0) {
webView._loadHttp(src);
} else {
webView._loadData(src);
}
}
srcProperty.metadata.onSetNativeValue = onSrcPropertyChanged;
var WebView = function(_super) {
__extends(WebView, _super);
function WebView() {
_super.apply(this, arguments);
}
Object.defineProperty(WebView.prototype, "url", {
get: function() {
return this._getValue(WebView.urlProperty);
},
set: function(value) {
this._setValue(WebView.urlProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(WebView.prototype, "src", {
get: function() {
return this._getValue(WebView.srcProperty);
},
set: function(value) {
this._setValue(WebView.srcProperty, value);
},
enumerable: true,
configurable: true
});
WebView.prototype._onLoadFinished = function(url, error) {
this._suspendLoading = true;
this.url = url;
this._suspendLoading = false;
var args = {
eventName: WebView.loadFinishedEvent,
object: this,
url: url,
navigationType: undefined,
error: error
};
this.notify(args);
};
WebView.prototype._onLoadStarted = function(url, navigationType) {
var args = {
eventName: WebView.loadStartedEvent,
object: this,
url: url,
navigationType: navigationType,
error: undefined
};
this.notify(args);
};
Object.defineProperty(WebView.prototype, "canGoBack", {
get: function() {
throw new Error("This member is abstract.");
},
enumerable: true,
configurable: true
});
Object.defineProperty(WebView.prototype, "canGoForward", {
get: function() {
throw new Error("This member is abstract.");
},
enumerable: true,
configurable: true
});
WebView.loadStartedEvent = "loadStarted";
WebView.loadFinishedEvent = "loadFinished";
WebView.navigationTypes = [ "linkClicked", "formSubmitted", "backForward", "reload", "formResubmitted", "other" ];
WebView.urlProperty = urlProperty;
WebView.srcProperty = srcProperty;
return WebView;
}(view.View);
exports.WebView = WebView;
}, function(module, exports, __webpack_require__) {
var common = __webpack_require__(145);
global.moduleMerge(common, exports);
var TextView = function(_super) {
__extends(TextView, _super);
function TextView() {
_super.apply(this, arguments);
}
TextView.prototype._configureEditText = function() {
this.android.setInputType(android.text.InputType.TYPE_CLASS_TEXT | android.text.InputType.TYPE_TEXT_VARIATION_NORMAL | android.text.InputType.TYPE_TEXT_FLAG_CAP_SENTENCES | android.text.InputType.TYPE_TEXT_FLAG_MULTI_LINE);
this.android.setGravity(android.view.Gravity.TOP | android.view.Gravity.LEFT);
};
return TextView;
}(common.TextView);
exports.TextView = TextView;
}, function(module, exports, __webpack_require__) {
var textBase = __webpack_require__(97);
var editableTextBase = __webpack_require__(99);
global.moduleMerge(textBase, exports);
var TextView = function(_super) {
__extends(TextView, _super);
function TextView() {
_super.apply(this, arguments);
}
return TextView;
}(editableTextBase.EditableTextBase);
exports.TextView = TextView;
}, function(module, exports, __webpack_require__) {
var common = __webpack_require__(147);
global.moduleMerge(common, exports);
var TimePicker = function(_super) {
__extends(TimePicker, _super);
function TimePicker() {
_super.apply(this, arguments);
}
Object.defineProperty(TimePicker.prototype, "android", {
get: function() {
return this._android;
},
enumerable: true,
configurable: true
});
TimePicker.prototype._createUI = function() {
this._android = new android.widget.TimePicker(this._context);
var that = new WeakRef(this);
this._listener = new android.widget.TimePicker.OnTimeChangedListener({
get owner() {
return that.get();
},
onTimeChanged: function(picker, hour, minute) {
if (this.owner) {
var validTime = common.getValidTime(this.owner, hour, minute);
this.owner._setNativeValueSilently(validTime.hour, validTime.minute);
this.owner._onPropertyChangedFromNative(common.TimePicker.timeProperty, new Date(0, 0, 0, validTime.hour, validTime.minute));
}
}
});
this._android.setOnTimeChangedListener(this._listener);
var c = java.util.Calendar.getInstance();
if (this.hour === common.TimePicker.hourProperty.defaultValue) {
this.hour = c.get(java.util.Calendar.HOUR_OF_DAY);
}
if (this.minute === common.TimePicker.minuteProperty.defaultValue) {
this.minute = c.get(java.util.Calendar.MINUTE);
}
var validTime = common.getValidTime(this, this.hour, this.minute);
this._setNativeValueSilently(validTime.hour, validTime.minute);
};
TimePicker.prototype._setNativeValueSilently = function(hour, minute) {
if (this.android) {
this.android.setOnTimeChangedListener(null);
this.android.setCurrentHour(new java.lang.Integer(hour));
this.android.setCurrentMinute(new java.lang.Integer(minute));
this.minute = minute;
this.hour = hour;
this.android.setOnTimeChangedListener(this._listener);
}
};
TimePicker.prototype._setNativeTime = function() {
this._setNativeValueSilently(this.hour, this.minute);
};
return TimePicker;
}(common.TimePicker);
exports.TimePicker = TimePicker;
}, function(module, exports, __webpack_require__) {
var dependencyObservable = __webpack_require__(17);
var proxy = __webpack_require__(41);
var view = __webpack_require__(12);
var types = __webpack_require__(14);
function isHourValid(value) {
return types.isNumber(value) && value >= 0 && value <= 23;
}
function isMinuteValid(value) {
return types.isNumber(value) && value >= 0 && value <= 59;
}
function isMinuteIntervalValid(value) {
return types.isNumber(value) && value >= 1 && value <= 30 && 60 % value === 0;
}
function getMinutes(hour) {
return hour * 60;
}
function isGreaterThanMinTime(picker, hour, minute) {
if (!types.isDefined(picker.minHour) || !types.isDefined(picker.minMinute)) {
return true;
}
return getMinutes(types.isDefined(hour) ? hour : picker.hour) + (types.isDefined(minute) ? minute : picker.minute) >= getMinutes(picker.minHour) + picker.minMinute;
}
exports.isGreaterThanMinTime = isGreaterThanMinTime;
function isLessThanMaxTime(picker, hour, minute) {
if (!types.isDefined(picker.maxHour) || !types.isDefined(picker.maxMinute)) {
return true;
}
return getMinutes(types.isDefined(hour) ? hour : picker.hour) + (types.isDefined(minute) ? minute : picker.minute) <= getMinutes(picker.maxHour) + picker.maxMinute;
}
exports.isLessThanMaxTime = isLessThanMaxTime;
function isValidTime(picker) {
return isGreaterThanMinTime(picker) && isLessThanMaxTime(picker);
}
exports.isValidTime = isValidTime;
function getValidTime(picker, hour, minute) {
if (picker.minuteInterval > 1) {
var minuteFloor = minute - minute % picker.minuteInterval;
minute = minuteFloor + (minute === minuteFloor + 1 ? picker.minuteInterval : 0);
if (minute === 60) {
hour++;
minute = 0;
}
}
var time = {
hour: hour,
minute: minute
};
if (!isGreaterThanMinTime(picker, hour, minute)) {
time = {
hour: picker.minHour,
minute: picker.minMinute
};
}
if (!isLessThanMaxTime(picker, hour, minute)) {
time = {
hour: picker.maxHour,
minute: picker.maxMinute
};
}
return time;
}
exports.getValidTime = getValidTime;
function toString(value) {
return value < 10 ? "0" + value : "" + value;
}
function getMinMaxTimeErrorMessage(picker) {
return "Min time: (" + toString(picker.minHour) + ":" + toString(picker.minMinute) + "), max time: (" + toString(picker.maxHour) + ":" + toString(picker.maxMinute) + ")";
}
function getErrorMessage(picker, propertyName, newValue) {
return propertyName + " property value (" + toString(newValue) + ":" + toString(picker.minute) + ") is not valid. " + getMinMaxTimeErrorMessage(picker) + ".";
}
function onHourPropertyChanged(data) {
var picker = data.object;
if (isValidTime(picker)) {
picker._setNativeTime();
if (picker.time) {
picker.time.setHours(picker.hour);
} else {
picker.time = new Date(0, 0, 0, picker.hour, picker.minute);
}
} else {
throw new Error(getErrorMessage(picker, "Hour", data.newValue));
}
}
function onMinutePropertyChanged(data) {
var picker = data.object;
if (isValidTime(picker)) {
picker._setNativeTime();
if (picker.time) {
picker.time.setMinutes(picker.minute);
} else {
picker.time = new Date(0, 0, 0, picker.hour, picker.minute);
}
} else {
throw new Error(getErrorMessage(picker, "Minute", data.newValue));
}
}
function onTimePropertyChanged(data) {
var picker = data.object;
var newTime = data.newValue;
picker.hour = newTime.getHours();
picker.minute = newTime.getMinutes();
if (isValidTime(picker)) {
picker._setNativeTime();
} else {
throw new Error(getErrorMessage(picker, "Time", data.newValue));
}
}
function onMinMinutePropertyChanged(data) {
var picker = data.object;
if (isValidTime(picker)) {
picker._setNativeMinTime();
} else {
throw new Error(getErrorMessage(picker, "Minute", data.newValue));
}
}
function onMaxMinutePropertyChanged(data) {
var picker = data.object;
if (isValidTime(picker)) {
picker._setNativeMaxTime();
} else {
throw new Error(getErrorMessage(picker, "Minute", data.newValue));
}
}
function onMinHourPropertyChanged(data) {
var picker = data.object;
if (isValidTime(picker)) {
picker._setNativeMinTime();
} else {
throw new Error(getErrorMessage(picker, "Hour", data.newValue));
}
}
function onMaxHourPropertyChanged(data) {
var picker = data.object;
if (isValidTime(picker)) {
picker._setNativeMaxTime();
} else {
throw new Error(getErrorMessage(picker, "Hour", data.newValue));
}
}
function onMinuteIntervalPropertyChanged(data) {
var picker = data.object;
picker._setNativeMinuteIntervalTime();
}
var TimePicker = function(_super) {
__extends(TimePicker, _super);
function TimePicker() {
_super.apply(this, arguments);
}
Object.defineProperty(TimePicker.prototype, "hour", {
get: function() {
return this._getValue(TimePicker.hourProperty);
},
set: function(value) {
this._setValue(TimePicker.hourProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(TimePicker.prototype, "minute", {
get: function() {
return this._getValue(TimePicker.minuteProperty);
},
set: function(value) {
this._setValue(TimePicker.minuteProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(TimePicker.prototype, "time", {
get: function() {
return this._getValue(TimePicker.timeProperty);
},
set: function(value) {
this._setValue(TimePicker.timeProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(TimePicker.prototype, "minuteInterval", {
get: function() {
return this._getValue(TimePicker.minuteIntervalProperty);
},
set: function(value) {
this._setValue(TimePicker.minuteIntervalProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(TimePicker.prototype, "maxHour", {
get: function() {
return this._getValue(TimePicker.maxHourProperty);
},
set: function(value) {
this._setValue(TimePicker.maxHourProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(TimePicker.prototype, "maxMinute", {
get: function() {
return this._getValue(TimePicker.maxMinuteProperty);
},
set: function(value) {
this._setValue(TimePicker.maxMinuteProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(TimePicker.prototype, "minHour", {
get: function() {
return this._getValue(TimePicker.minHourProperty);
},
set: function(value) {
this._setValue(TimePicker.minHourProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(TimePicker.prototype, "minMinute", {
get: function() {
return this._getValue(TimePicker.minMinuteProperty);
},
set: function(value) {
this._setValue(TimePicker.minMinuteProperty, value);
},
enumerable: true,
configurable: true
});
TimePicker.prototype._setNativeTime = function() {};
TimePicker.prototype._setNativeMinTime = function() {};
TimePicker.prototype._setNativeMaxTime = function() {};
TimePicker.prototype._setNativeMinuteIntervalTime = function() {};
TimePicker.hourProperty = new dependencyObservable.Property("hour", "TimePicker", new proxy.PropertyMetadata(0, dependencyObservable.PropertyMetadataSettings.None, onHourPropertyChanged, isHourValid));
TimePicker.minHourProperty = new dependencyObservable.Property("minHour", "TimePicker", new proxy.PropertyMetadata(0, dependencyObservable.PropertyMetadataSettings.None, onMinHourPropertyChanged, isHourValid));
TimePicker.maxHourProperty = new dependencyObservable.Property("maxHour", "TimePicker", new proxy.PropertyMetadata(23, dependencyObservable.PropertyMetadataSettings.None, onMaxHourPropertyChanged, isHourValid));
TimePicker.minuteProperty = new dependencyObservable.Property("minute", "TimePicker", new proxy.PropertyMetadata(0, dependencyObservable.PropertyMetadataSettings.None, onMinutePropertyChanged, isMinuteValid));
TimePicker.minMinuteProperty = new dependencyObservable.Property("minMinute", "TimePicker", new proxy.PropertyMetadata(0, dependencyObservable.PropertyMetadataSettings.None, onMinMinutePropertyChanged, isMinuteValid));
TimePicker.maxMinuteProperty = new dependencyObservable.Property("maxMinute", "TimePicker", new proxy.PropertyMetadata(59, dependencyObservable.PropertyMetadataSettings.None, onMaxMinutePropertyChanged, isMinuteValid));
TimePicker.minuteIntervalProperty = new dependencyObservable.Property("minuteInterval", "TimePicker", new proxy.PropertyMetadata(1, dependencyObservable.PropertyMetadataSettings.None, onMinuteIntervalPropertyChanged, isMinuteIntervalValid));
TimePicker.timeProperty = new dependencyObservable.Property("time", "TimePicker", new proxy.PropertyMetadata(undefined, dependencyObservable.PropertyMetadataSettings.None, onTimePropertyChanged, isValidTime));
return TimePicker;
}(view.View);
exports.TimePicker = TimePicker;
}, function(module, exports, __webpack_require__) {
var observable = __webpack_require__(18);
var common = __webpack_require__(149);
var stackLayout = __webpack_require__(120);
var proxy_view_container_1 = __webpack_require__(128);
var layoutBase = __webpack_require__(71);
var style_1 = __webpack_require__(15);
var color;
function ensureColor() {
if (!color) {
color = __webpack_require__(19);
}
}
var ITEMLOADING = common.ListView.itemLoadingEvent;
var LOADMOREITEMS = common.ListView.loadMoreItemsEvent;
var ITEMTAP = common.ListView.itemTapEvent;
global.moduleMerge(common, exports);
function onSeparatorColorPropertyChanged(data) {
var listView = data.object;
if (!listView.android) {
return;
}
ensureColor();
if (data.newValue instanceof color.Color) {
listView.android.setDivider(new android.graphics.drawable.ColorDrawable(data.newValue.android));
listView.android.setDividerHeight(1);
}
}
common.ListView.separatorColorProperty.metadata.onSetNativeValue = onSeparatorColorPropertyChanged;
var ListView = function(_super) {
__extends(ListView, _super);
function ListView() {
_super.apply(this, arguments);
this._androidViewId = -1;
this._realizedItems = new Map();
this._realizedTemplates = new Map();
}
ListView.prototype._createUI = function() {
this._android = new android.widget.ListView(this._context);
this._android.setDescendantFocusability(android.view.ViewGroup.FOCUS_AFTER_DESCENDANTS);
this._android.setCacheColorHint(android.graphics.Color.TRANSPARENT);
if (this._androidViewId < 0) {
this._androidViewId = android.view.View.generateViewId();
}
this._android.setId(this._androidViewId);
ensureListViewAdapterClass();
this.android.setAdapter(new ListViewAdapterClass(this));
var that = new WeakRef(this);
this.android.setOnItemClickListener(new android.widget.AdapterView.OnItemClickListener({
onItemClick: function(parent, convertView, index, id) {
var owner = that.get();
if (owner) {
var view = owner._realizedTemplates.get(owner._getItemTemplate(index).key).get(convertView);
owner.notify({
eventName: ITEMTAP,
object: owner,
index: index,
view: view
});
}
}
}));
};
Object.defineProperty(ListView.prototype, "android", {
get: function() {
return this._android;
},
enumerable: true,
configurable: true
});
ListView.prototype.refresh = function() {
if (!this._android || !this._android.getAdapter()) {
return;
}
this._realizedItems.forEach(function(view, nativeView, map) {
if (!(view.bindingContext instanceof observable.Observable)) {
view.bindingContext = null;
}
});
this.android.getAdapter().notifyDataSetChanged();
};
ListView.prototype.scrollToIndex = function(index) {
if (this._android) {
this._android.setSelection(index);
}
};
ListView.prototype._onDetached = function(force) {
_super.prototype._onDetached.call(this, force);
this.clearRealizedCells();
};
Object.defineProperty(ListView.prototype, "_childrenCount", {
get: function() {
return this._realizedItems.size;
},
enumerable: true,
configurable: true
});
ListView.prototype._eachChildView = function(callback) {
this._realizedItems.forEach(function(view, nativeView, map) {
if (view.parent instanceof ListView) {
callback(view);
} else {
if (view.parent) {
callback(view.parent);
}
}
});
};
ListView.prototype._dumpRealizedTemplates = function() {
console.log("Realized Templates:");
this._realizedTemplates.forEach(function(value, index, map) {
console.log("\t" + index + ":");
value.forEach(function(value, index, map) {
console.log("\t\t" + index.hashCode() + ": " + value);
});
});
console.log("Realized Items Size: " + this._realizedItems.size);
};
ListView.prototype.clearRealizedCells = function() {
var _this = this;
this._realizedItems.forEach(function(view, nativeView, map) {
if (view.parent) {
if (!(view.parent instanceof ListView)) {
_this._removeView(view.parent);
}
view.parent._removeView(view);
}
});
this._realizedItems.clear();
this._realizedTemplates.clear();
};
ListView.prototype._onItemTemplatesPropertyChanged = function(data) {
this._itemTemplatesInternal = new Array(this._defaultTemplate);
if (data.newValue) {
this._itemTemplatesInternal = this._itemTemplatesInternal.concat(data.newValue);
}
if (this.android) {
ensureListViewAdapterClass();
this.android.setAdapter(new ListViewAdapterClass(this));
}
this.refresh();
};
return ListView;
}(common.ListView);
exports.ListView = ListView;
var ListViewAdapterClass;
function ensureListViewAdapterClass() {
if (ListViewAdapterClass) {
return;
}
var ListViewAdapter = function(_super) {
__extends(ListViewAdapter, _super);
function ListViewAdapter(listView) {
_super.call(this);
this._listView = listView;
return global.__native(this);
}
ListViewAdapter.prototype.getCount = function() {
return this._listView && this._listView.items && this._listView.items.length ? this._listView.items.length : 0;
};
ListViewAdapter.prototype.getItem = function(i) {
if (this._listView && this._listView.items && i < this._listView.items.length) {
return this._listView.items.getItem ? this._listView.items.getItem(i) : this._listView.items[i];
}
return null;
};
ListViewAdapter.prototype.getItemId = function(i) {
return long(i);
};
ListViewAdapter.prototype.hasStableIds = function() {
return true;
};
ListViewAdapter.prototype.getViewTypeCount = function() {
return this._listView._itemTemplatesInternal.length;
};
ListViewAdapter.prototype.getItemViewType = function(index) {
var template = this._listView._getItemTemplate(index);
var itemViewType = this._listView._itemTemplatesInternal.indexOf(template);
return itemViewType;
};
ListViewAdapter.prototype.getView = function(index, convertView, parent) {
if (!this._listView) {
return null;
}
var totalItemCount = this._listView.items ? this._listView.items.length : 0;
if (index === totalItemCount - 1) {
this._listView.notify({
eventName: LOADMOREITEMS,
object: this._listView
});
}
var template = this._listView._getItemTemplate(index);
var view;
if (convertView) {
view = this._listView._realizedTemplates.get(template.key).get(convertView);
if (!view) {
throw new Error("There is no entry with key '" + convertView + "' in the realized views cache for template with key'" + template.key + "'.");
}
} else {
view = template.createView();
}
var args = {
eventName: ITEMLOADING,
object: this._listView,
index: index,
view: view,
android: parent,
ios: undefined
};
this._listView.notify(args);
if (!args.view) {
args.view = this._listView._getDefaultItemContent(index);
}
if (args.view) {
if (this._listView.rowHeight > -1) {
args.view.height = this._listView.rowHeight;
} else {
args.view.height = Number.NaN;
}
this._listView._prepareItem(args.view, index);
if (!args.view.parent) {
if (args.view instanceof layoutBase.LayoutBase && !(args.view instanceof proxy_view_container_1.ProxyViewContainer)) {
this._listView._addView(args.view);
convertView = args.view.android;
} else {
var sp = new stackLayout.StackLayout();
sp.addChild(args.view);
this._listView._addView(sp);
convertView = sp.android;
}
}
var realizedItemsForTemplateKey = this._listView._realizedTemplates.get(template.key);
if (!realizedItemsForTemplateKey) {
realizedItemsForTemplateKey = new Map();
this._listView._realizedTemplates.set(template.key, realizedItemsForTemplateKey);
}
realizedItemsForTemplateKey.set(convertView, args.view);
this._listView._realizedItems.set(convertView, args.view);
}
return convertView;
};
return ListViewAdapter;
}(android.widget.BaseAdapter);
ListViewAdapterClass = ListViewAdapter;
}
var ListViewStyler = function() {
function ListViewStyler() {}
ListViewStyler.getSeparatorColorProperty = function(view) {
var listView = view._nativeView;
return listView.getDivider();
};
ListViewStyler.setSeparatorColorProperty = function(view, newValue) {
var listView = view._nativeView;
if (newValue instanceof android.graphics.drawable.Drawable) {
listView.setDivider(newValue);
} else {
listView.setDivider(new android.graphics.drawable.ColorDrawable(newValue));
}
listView.setDividerHeight(1);
};
ListViewStyler.resetSeparatorColorProperty = function(view, nativeValue) {
var listView = view._nativeView;
if (nativeValue instanceof android.graphics.drawable.Drawable) {
listView.setDivider(nativeValue);
} else {
listView.setDivider(new android.graphics.drawable.ColorDrawable(nativeValue));
}
};
ListViewStyler.registerHandlers = function() {
style_1.registerHandler(style_1.separatorColorProperty, new style_1.StylePropertyChangedHandler(ListViewStyler.setSeparatorColorProperty, ListViewStyler.resetSeparatorColorProperty, ListViewStyler.getSeparatorColorProperty), "ListView");
};
return ListViewStyler;
}();
exports.ListViewStyler = ListViewStyler;
ListViewStyler.registerHandlers();
}, function(module, exports, __webpack_require__) {
var observable = __webpack_require__(18);
var view = __webpack_require__(12);
var proxy = __webpack_require__(41);
var dependencyObservable = __webpack_require__(17);
var color = __webpack_require__(19);
var types_1 = __webpack_require__(14);
var bindable_1 = __webpack_require__(42);
var builder;
function ensureBuilder() {
if (!builder) {
builder = __webpack_require__(82);
}
}
var label;
function ensureLabel() {
if (!label) {
label = __webpack_require__(101);
}
}
var observableArray;
function ensureObservableArray() {
if (!observableArray) {
observableArray = __webpack_require__(51);
}
}
var weakEvents;
function ensureWeakEvents() {
if (!weakEvents) {
weakEvents = __webpack_require__(43);
}
}
var ITEMS = "items";
var ITEMTEMPLATE = "itemTemplate";
var ITEMTEMPLATES = "itemTemplates";
var ISSCROLLING = "isScrolling";
var LISTVIEW = "ListView";
var SEPARATORCOLOR = "separatorColor";
var ROWHEIGHT = "rowHeight";
var knownTemplates;
(function(knownTemplates) {
knownTemplates.itemTemplate = "itemTemplate";
})(knownTemplates = exports.knownTemplates || (exports.knownTemplates = {}));
var knownMultiTemplates;
(function(knownMultiTemplates) {
knownMultiTemplates.itemTemplates = "itemTemplates";
})(knownMultiTemplates = exports.knownMultiTemplates || (exports.knownMultiTemplates = {}));
function onItemsPropertyChanged(data) {
var listView = data.object;
listView._onItemsPropertyChanged(data);
}
function onItemTemplatePropertyChanged(data) {
var listView = data.object;
listView.refresh();
}
function onItemTemplatesPropertyChanged(data) {
var listView = data.object;
listView._onItemTemplatesPropertyChanged(data);
}
function onRowHeightPropertyChanged(data) {
var listView = data.object;
listView._onRowHeightPropertyChanged(data);
}
var ListView = function(_super) {
__extends(ListView, _super);
function ListView() {
var _this = this;
_super.apply(this, arguments);
this._itemTemplateSelectorBindable = new bindable_1.Bindable();
this._defaultTemplate = {
key: "default",
createView: function() {
if (_this.itemTemplate) {
ensureBuilder();
return builder.parse(_this.itemTemplate, _this);
}
return undefined;
}
};
this._itemTemplatesInternal = new Array(this._defaultTemplate);
}
Object.defineProperty(ListView.prototype, "items", {
get: function() {
return this._getValue(ListView.itemsProperty);
},
set: function(value) {
this._setValue(ListView.itemsProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(ListView.prototype, "itemTemplate", {
get: function() {
return this._getValue(ListView.itemTemplateProperty);
},
set: function(value) {
this._setValue(ListView.itemTemplateProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(ListView.prototype, "itemTemplates", {
get: function() {
return this._getValue(ListView.itemTemplatesProperty);
},
set: function(value) {
var newValue = value;
if (types_1.isString(newValue)) {
ensureBuilder();
newValue = builder.parseMultipleTemplates(newValue, this);
}
this._setValue(ListView.itemTemplatesProperty, newValue);
},
enumerable: true,
configurable: true
});
Object.defineProperty(ListView.prototype, "itemTemplateSelector", {
get: function() {
return this._itemTemplateSelector;
},
set: function(value) {
var _this = this;
if (types_1.isString(value)) {
this._itemTemplateSelectorBindable.bind({
sourceProperty: null,
targetProperty: "templateKey",
expression: value
});
this._itemTemplateSelector = function(item, index, items) {
item["$index"] = index;
_this._itemTemplateSelectorBindable.bindingContext = item;
return _this._itemTemplateSelectorBindable.get("templateKey");
};
} else if (types_1.isFunction(value)) {
this._itemTemplateSelector = value;
}
},
enumerable: true,
configurable: true
});
Object.defineProperty(ListView.prototype, "isScrolling", {
get: function() {
return false;
},
set: function(value) {},
enumerable: true,
configurable: true
});
Object.defineProperty(ListView.prototype, "separatorColor", {
get: function() {
return this.style._getValue(ListView.separatorColorProperty);
},
set: function(value) {
this.style._setValue(ListView.separatorColorProperty, value instanceof color.Color ? value : new color.Color(value));
},
enumerable: true,
configurable: true
});
Object.defineProperty(ListView.prototype, "rowHeight", {
get: function() {
return this._getValue(ListView.rowHeightProperty);
},
set: function(value) {
this._setValue(ListView.rowHeightProperty, value);
},
enumerable: true,
configurable: true
});
ListView.prototype.refresh = function() {};
ListView.prototype.scrollToIndex = function(index) {};
ListView.prototype._getItemTemplate = function(index) {
var templateKey = "default";
if (this.itemTemplateSelector) {
var dataItem = this._getDataItem(index);
templateKey = this._itemTemplateSelector(dataItem, index, this.items);
}
for (var i = 0, length = this._itemTemplatesInternal.length; i < length; i++) {
if (this._itemTemplatesInternal[i].key === templateKey) {
return this._itemTemplatesInternal[i];
}
}
return this._itemTemplatesInternal[0];
};
ListView.prototype._prepareItem = function(item, index) {
if (item) {
item.bindingContext = this._getDataItem(index);
}
};
ListView.prototype._getDataItem = function(index) {
var thisItems = this.items;
return thisItems.getItem ? thisItems.getItem(index) : thisItems[index];
};
ListView.prototype._getDefaultItemContent = function(index) {
ensureLabel();
var lbl = new label.Label();
lbl.bind({
targetProperty: "text",
sourceProperty: "$value"
});
return lbl;
};
ListView.prototype._onItemsPropertyChanged = function(data) {
ensureObservableArray();
ensureWeakEvents();
if (data.oldValue instanceof observable.Observable) {
weakEvents.removeWeakEventListener(data.oldValue, observableArray.ObservableArray.changeEvent, this._onItemsChanged, this);
}
if (data.newValue instanceof observable.Observable) {
weakEvents.addWeakEventListener(data.newValue, observableArray.ObservableArray.changeEvent, this._onItemsChanged, this);
}
this.refresh();
};
ListView.prototype._onItemsChanged = function(args) {
this.refresh();
};
ListView.prototype._onRowHeightPropertyChanged = function(data) {
this.refresh();
};
ListView.prototype._onItemTemplatesPropertyChanged = function(data) {};
ListView.itemLoadingEvent = "itemLoading";
ListView.itemTapEvent = "itemTap";
ListView.loadMoreItemsEvent = "loadMoreItems";
ListView.knownFunctions = [ "itemTemplateSelector" ];
ListView.separatorColorProperty = new dependencyObservable.Property(SEPARATORCOLOR, LISTVIEW, new proxy.PropertyMetadata(undefined));
ListView.itemsProperty = new dependencyObservable.Property(ITEMS, LISTVIEW, new proxy.PropertyMetadata(undefined, dependencyObservable.PropertyMetadataSettings.AffectsLayout, onItemsPropertyChanged));
ListView.itemTemplateProperty = new dependencyObservable.Property(ITEMTEMPLATE, LISTVIEW, new proxy.PropertyMetadata(undefined, dependencyObservable.PropertyMetadataSettings.AffectsLayout, onItemTemplatePropertyChanged));
ListView.itemTemplatesProperty = new dependencyObservable.Property(ITEMTEMPLATES, LISTVIEW, new proxy.PropertyMetadata(undefined, dependencyObservable.PropertyMetadataSettings.AffectsLayout, onItemTemplatesPropertyChanged));
ListView.isScrollingProperty = new dependencyObservable.Property(ISSCROLLING, LISTVIEW, new proxy.PropertyMetadata(false, dependencyObservable.PropertyMetadataSettings.None));
ListView.rowHeightProperty = new dependencyObservable.Property(ROWHEIGHT, LISTVIEW, new proxy.PropertyMetadata(-1, dependencyObservable.PropertyMetadataSettings.AffectsLayout, onRowHeightPropertyChanged));
return ListView;
}(view.View);
exports.ListView = ListView;
}, function(module, exports, __webpack_require__) {
global.__requireOverride = function() {
var map = {
application: function() {
return __webpack_require__(3);
},
"application-settings": function() {
return __webpack_require__(151);
},
"application-settings/": function() {
return __webpack_require__(151);
},
"application-settings/application-settings": function() {
return __webpack_require__(151);
},
"application-settings/application-settings-common": function() {
return __webpack_require__(152);
},
"application-settings/application-settings-common.js": function() {
return __webpack_require__(152);
},
"application-settings/application-settings.js": function() {
return __webpack_require__(151);
},
"application/": function() {
return __webpack_require__(3);
},
"application/application": function() {
return __webpack_require__(3);
},
"application/application-common": function() {
return __webpack_require__(4);
},
"application/application-common.js": function() {
return __webpack_require__(4);
},
"application/application.js": function() {
return __webpack_require__(3);
},
"bundle-entry-points": function() {
return __webpack_require__(106);
},
"bundle-entry-points.js": function() {
return __webpack_require__(106);
},
camera: function() {
return __webpack_require__(153);
},
"camera/": function() {
return __webpack_require__(153);
},
"camera/camera": function() {
return __webpack_require__(153);
},
"camera/camera-common": function() {
return __webpack_require__(154);
},
"camera/camera-common.js": function() {
return __webpack_require__(154);
},
"camera/camera.js": function() {
return __webpack_require__(153);
},
color: function() {
return __webpack_require__(19);
},
"color/": function() {
return __webpack_require__(19);
},
"color/color": function() {
return __webpack_require__(19);
},
"color/color-common": function() {
return __webpack_require__(20);
},
"color/color-common.js": function() {
return __webpack_require__(20);
},
"color/color.js": function() {
return __webpack_require__(19);
},
"color/known-colors": function() {
return __webpack_require__(21);
},
"color/known-colors.js": function() {
return __webpack_require__(21);
},
connectivity: function() {
return __webpack_require__(155);
},
"connectivity/": function() {
return __webpack_require__(155);
},
"connectivity/connectivity": function() {
return __webpack_require__(155);
},
"connectivity/connectivity-common": function() {
return __webpack_require__(156);
},
"connectivity/connectivity-common.js": function() {
return __webpack_require__(156);
},
"connectivity/connectivity.js": function() {
return __webpack_require__(155);
},
console: function() {
return __webpack_require__(105);
},
"console/": function() {
return __webpack_require__(105);
},
"console/console": function() {
return __webpack_require__(105);
},
"console/console.js": function() {
return __webpack_require__(105);
},
css: function() {
return __webpack_require__(63);
},
"css-value": function() {
return __webpack_require__(38);
},
"css-value/": function() {
return __webpack_require__(38);
},
"css-value/index": function() {
return __webpack_require__(38);
},
"css-value/index.js": function() {
return __webpack_require__(38);
},
"css/": function() {
return __webpack_require__(63);
},
"css/index": function() {
return __webpack_require__(63);
},
"css/index.js": function() {
return __webpack_require__(63);
},
"css/lib/parse/index": function() {
return __webpack_require__(64);
},
"css/lib/parse/index.js": function() {
return __webpack_require__(64);
},
"data/observable": function() {
return __webpack_require__(18);
},
"data/observable-array": function() {
return __webpack_require__(51);
},
"data/observable-array/": function() {
return __webpack_require__(51);
},
"data/observable-array/observable-array": function() {
return __webpack_require__(51);
},
"data/observable-array/observable-array.js": function() {
return __webpack_require__(51);
},
"data/observable/": function() {
return __webpack_require__(18);
},
"data/observable/observable": function() {
return __webpack_require__(18);
},
"data/observable/observable.js": function() {
return __webpack_require__(18);
},
"data/virtual-array": function() {
return __webpack_require__(157);
},
"data/virtual-array/": function() {
return __webpack_require__(157);
},
"data/virtual-array/virtual-array": function() {
return __webpack_require__(157);
},
"data/virtual-array/virtual-array.js": function() {
return __webpack_require__(157);
},
debugger: function() {
return __webpack_require__(158);
},
"debugger/": function() {
return __webpack_require__(158);
},
"debugger/debugger": function() {
return __webpack_require__(158);
},
"debugger/debugger.js": function() {
return __webpack_require__(158);
},
fetch: function() {
return __webpack_require__(104);
},
"fetch/": function() {
return __webpack_require__(104);
},
"fetch/fetch": function() {
return __webpack_require__(104);
},
"fetch/fetch.js": function() {
return __webpack_require__(104);
},
"file-system": function() {
return __webpack_require__(32);
},
"file-system/": function() {
return __webpack_require__(32);
},
"file-system/file-name-resolver": function() {
return __webpack_require__(81);
},
"file-system/file-name-resolver.js": function() {
return __webpack_require__(81);
},
"file-system/file-system": function() {
return __webpack_require__(32);
},
"file-system/file-system-access": function() {
return __webpack_require__(33);
},
"file-system/file-system-access.js": function() {
return __webpack_require__(33);
},
"file-system/file-system.js": function() {
return __webpack_require__(32);
},
"fps-meter": function() {
return __webpack_require__(159);
},
"fps-meter/": function() {
return __webpack_require__(159);
},
"fps-meter/fps-meter": function() {
return __webpack_require__(159);
},
"fps-meter/fps-meter.js": function() {
return __webpack_require__(159);
},
"fps-meter/fps-native": function() {
return __webpack_require__(160);
},
"fps-meter/fps-native.js": function() {
return __webpack_require__(160);
},
globals: function() {
return __webpack_require__(5);
},
"globals/": function() {
return __webpack_require__(5);
},
"globals/decorators": function() {
return __webpack_require__(6);
},
"globals/decorators.js": function() {
return __webpack_require__(6);
},
"globals/globals": function() {
return __webpack_require__(5);
},
"globals/globals.js": function() {
return __webpack_require__(5);
},
http: function() {
return __webpack_require__(57);
},
"http/": function() {
return __webpack_require__(57);
},
"http/http": function() {
return __webpack_require__(57);
},
"http/http-request": function() {
return __webpack_require__(58);
},
"http/http-request.js": function() {
return __webpack_require__(58);
},
"http/http.js": function() {
return __webpack_require__(57);
},
"image-asset": function() {
return __webpack_require__(118);
},
"image-asset/": function() {
return __webpack_require__(118);
},
"image-asset/image-asset": function() {
return __webpack_require__(118);
},
"image-asset/image-asset-common": function() {
return __webpack_require__(119);
},
"image-asset/image-asset-common.js": function() {
return __webpack_require__(119);
},
"image-asset/image-asset.js": function() {
return __webpack_require__(118);
},
"image-source": function() {
return __webpack_require__(55);
},
"image-source/": function() {
return __webpack_require__(55);
},
"image-source/image-source": function() {
return __webpack_require__(55);
},
"image-source/image-source-common": function() {
return __webpack_require__(56);
},
"image-source/image-source-common.js": function() {
return __webpack_require__(56);
},
"image-source/image-source.js": function() {
return __webpack_require__(55);
},
"js-libs/easysax": function() {
return __webpack_require__(84);
},
"js-libs/easysax/": function() {
return __webpack_require__(84);
},
"js-libs/easysax/easysax": function() {
return __webpack_require__(84);
},
"js-libs/easysax/easysax.js": function() {
return __webpack_require__(84);
},
"js-libs/esprima": function() {
return __webpack_require__(46);
},
"js-libs/esprima/": function() {
return __webpack_require__(46);
},
"js-libs/esprima/esprima": function() {
return __webpack_require__(46);
},
"js-libs/esprima/esprima.js": function() {
return __webpack_require__(46);
},
"js-libs/polymer-expressions": function() {
return __webpack_require__(45);
},
"js-libs/polymer-expressions/": function() {
return __webpack_require__(45);
},
"js-libs/polymer-expressions/path-parser": function() {
return __webpack_require__(47);
},
"js-libs/polymer-expressions/path-parser.js": function() {
return __webpack_require__(47);
},
"js-libs/polymer-expressions/polymer-expressions": function() {
return __webpack_require__(45);
},
"js-libs/polymer-expressions/polymer-expressions.js": function() {
return __webpack_require__(45);
},
location: function() {
return __webpack_require__(161);
},
"location/": function() {
return __webpack_require__(161);
},
"location/location": function() {
return __webpack_require__(161);
},
"location/location-common": function() {
return __webpack_require__(162);
},
"location/location-common.js": function() {
return __webpack_require__(162);
},
"location/location.js": function() {
return __webpack_require__(161);
},
platform: function() {
return __webpack_require__(35);
},
"platform/": function() {
return __webpack_require__(35);
},
"platform/platform": function() {
return __webpack_require__(35);
},
"platform/platform.js": function() {
return __webpack_require__(35);
},
text: function() {
return __webpack_require__(34);
},
"text/": function() {
return __webpack_require__(34);
},
"text/formatted-string": function() {
return __webpack_require__(49);
},
"text/formatted-string-common": function() {
return __webpack_require__(50);
},
"text/formatted-string-common.js": function() {
return __webpack_require__(50);
},
"text/formatted-string.js": function() {
return __webpack_require__(49);
},
"text/span": function() {
return __webpack_require__(107);
},
"text/span-common": function() {
return __webpack_require__(108);
},
"text/span-common.js": function() {
return __webpack_require__(108);
},
"text/span.js": function() {
return __webpack_require__(107);
},
"text/text": function() {
return __webpack_require__(34);
},
"text/text.js": function() {
return __webpack_require__(34);
},
timer: function() {
return __webpack_require__(7);
},
"timer/": function() {
return __webpack_require__(7);
},
"timer/timer": function() {
return __webpack_require__(7);
},
"timer/timer.js": function() {
return __webpack_require__(7);
},
trace: function() {
return __webpack_require__(16);
},
"trace/": function() {
return __webpack_require__(16);
},
"trace/trace": function() {
return __webpack_require__(16);
},
"trace/trace.js": function() {
return __webpack_require__(16);
},
"ui/action-bar": function() {
return __webpack_require__(76);
},
"ui/action-bar/": function() {
return __webpack_require__(76);
},
"ui/action-bar/action-bar": function() {
return __webpack_require__(76);
},
"ui/action-bar/action-bar-common": function() {
return __webpack_require__(77);
},
"ui/action-bar/action-bar-common.js": function() {
return __webpack_require__(77);
},
"ui/action-bar/action-bar.js": function() {
return __webpack_require__(76);
},
"ui/activity-indicator": function() {
return __webpack_require__(109);
},
"ui/activity-indicator/": function() {
return __webpack_require__(109);
},
"ui/activity-indicator/activity-indicator": function() {
return __webpack_require__(109);
},
"ui/activity-indicator/activity-indicator-common": function() {
return __webpack_require__(110);
},
"ui/activity-indicator/activity-indicator-common.js": function() {
return __webpack_require__(110);
},
"ui/activity-indicator/activity-indicator.js": function() {
return __webpack_require__(109);
},
"ui/animation": function() {
return __webpack_require__(25);
},
"ui/animation/": function() {
return __webpack_require__(25);
},
"ui/animation/animation": function() {
return __webpack_require__(25);
},
"ui/animation/animation-common": function() {
return __webpack_require__(26);
},
"ui/animation/animation-common.js": function() {
return __webpack_require__(26);
},
"ui/animation/animation.js": function() {
return __webpack_require__(25);
},
"ui/animation/keyframe-animation": function() {
return __webpack_require__(65);
},
"ui/animation/keyframe-animation.js": function() {
return __webpack_require__(65);
},
"ui/border": function() {
return __webpack_require__(111);
},
"ui/border/": function() {
return __webpack_require__(111);
},
"ui/border/border": function() {
return __webpack_require__(111);
},
"ui/border/border.js": function() {
return __webpack_require__(111);
},
"ui/builder": function() {
return __webpack_require__(82);
},
"ui/builder/": function() {
return __webpack_require__(82);
},
"ui/builder/binding-builder": function() {
return __webpack_require__(44);
},
"ui/builder/binding-builder.js": function() {
return __webpack_require__(44);
},
"ui/builder/builder": function() {
return __webpack_require__(82);
},
"ui/builder/builder.js": function() {
return __webpack_require__(82);
},
"ui/builder/component-builder": function() {
return __webpack_require__(85);
},
"ui/builder/component-builder.js": function() {
return __webpack_require__(85);
},
"ui/builder/special-properties": function() {
return __webpack_require__(48);
},
"ui/builder/special-properties.js": function() {
return __webpack_require__(48);
},
"ui/button": function() {
return __webpack_require__(39);
},
"ui/button/": function() {
return __webpack_require__(39);
},
"ui/button/button": function() {
return __webpack_require__(39);
},
"ui/button/button-common": function() {
return __webpack_require__(40);
},
"ui/button/button-common.js": function() {
return __webpack_require__(40);
},
"ui/button/button.js": function() {
return __webpack_require__(39);
},
"ui/content-view": function() {
return __webpack_require__(75);
},
"ui/content-view/": function() {
return __webpack_require__(75);
},
"ui/content-view/content-view": function() {
return __webpack_require__(75);
},
"ui/content-view/content-view.js": function() {
return __webpack_require__(75);
},
"ui/core/bindable": function() {
return __webpack_require__(42);
},
"ui/core/bindable.js": function() {
return __webpack_require__(42);
},
"ui/core/dependency-observable": function() {
return __webpack_require__(17);
},
"ui/core/dependency-observable.js": function() {
return __webpack_require__(17);
},
"ui/core/proxy": function() {
return __webpack_require__(41);
},
"ui/core/proxy.js": function() {
return __webpack_require__(41);
},
"ui/core/view": function() {
return __webpack_require__(12);
},
"ui/core/view-common": function() {
return __webpack_require__(13);
},
"ui/core/view-common.js": function() {
return __webpack_require__(13);
},
"ui/core/view.js": function() {
return __webpack_require__(12);
},
"ui/core/weak-event-listener": function() {
return __webpack_require__(43);
},
"ui/core/weak-event-listener.js": function() {
return __webpack_require__(43);
},
"ui/date-picker": function() {
return __webpack_require__(112);
},
"ui/date-picker/": function() {
return __webpack_require__(112);
},
"ui/date-picker/date-picker": function() {
return __webpack_require__(112);
},
"ui/date-picker/date-picker-common": function() {
return __webpack_require__(113);
},
"ui/date-picker/date-picker-common.js": function() {
return __webpack_require__(113);
},
"ui/date-picker/date-picker.js": function() {
return __webpack_require__(112);
},
"ui/dialogs": function() {
return __webpack_require__(8);
},
"ui/dialogs/": function() {
return __webpack_require__(8);
},
"ui/dialogs/dialogs": function() {
return __webpack_require__(8);
},
"ui/dialogs/dialogs-common": function() {
return __webpack_require__(9);
},
"ui/dialogs/dialogs-common.js": function() {
return __webpack_require__(9);
},
"ui/dialogs/dialogs.js": function() {
return __webpack_require__(8);
},
"ui/editable-text-base": function() {
return __webpack_require__(99);
},
"ui/editable-text-base/": function() {
return __webpack_require__(99);
},
"ui/editable-text-base/editable-text-base": function() {
return __webpack_require__(99);
},
"ui/editable-text-base/editable-text-base-common": function() {
return __webpack_require__(100);
},
"ui/editable-text-base/editable-text-base-common.js": function() {
return __webpack_require__(100);
},
"ui/editable-text-base/editable-text-base.js": function() {
return __webpack_require__(99);
},
"ui/enums": function() {
return __webpack_require__(24);
},
"ui/enums/": function() {
return __webpack_require__(24);
},
"ui/enums/enums": function() {
return __webpack_require__(24);
},
"ui/enums/enums.js": function() {
return __webpack_require__(24);
},
"ui/frame": function() {
return __webpack_require__(10);
},
"ui/frame/": function() {
return __webpack_require__(10);
},
"ui/frame/activity": function() {
return __webpack_require__(163);
},
"ui/frame/activity.js": function() {
return __webpack_require__(163);
},
"ui/frame/fragment": function() {
return __webpack_require__(94);
},
"ui/frame/fragment.js": function() {
return __webpack_require__(94);
},
"ui/frame/frame": function() {
return __webpack_require__(10);
},
"ui/frame/frame-common": function() {
return __webpack_require__(11);
},
"ui/frame/frame-common.js": function() {
return __webpack_require__(11);
},
"ui/frame/frame.js": function() {
return __webpack_require__(10);
},
"ui/gestures": function() {
return __webpack_require__(53);
},
"ui/gestures/": function() {
return __webpack_require__(53);
},
"ui/gestures/gestures": function() {
return __webpack_require__(53);
},
"ui/gestures/gestures-common": function() {
return __webpack_require__(54);
},
"ui/gestures/gestures-common.js": function() {
return __webpack_require__(54);
},
"ui/gestures/gestures.js": function() {
return __webpack_require__(53);
},
"ui/html-view": function() {
return __webpack_require__(114);
},
"ui/html-view/": function() {
return __webpack_require__(114);
},
"ui/html-view/html-view": function() {
return __webpack_require__(114);
},
"ui/html-view/html-view-common": function() {
return __webpack_require__(115);
},
"ui/html-view/html-view-common.js": function() {
return __webpack_require__(115);
},
"ui/html-view/html-view.js": function() {
return __webpack_require__(114);
},
"ui/image": function() {
return __webpack_require__(116);
},
"ui/image-cache": function() {
return __webpack_require__(164);
},
"ui/image-cache/": function() {
return __webpack_require__(164);
},
"ui/image-cache/image-cache": function() {
return __webpack_require__(164);
},
"ui/image-cache/image-cache-common": function() {
return __webpack_require__(165);
},
"ui/image-cache/image-cache-common.js": function() {
return __webpack_require__(165);
},
"ui/image-cache/image-cache.js": function() {
return __webpack_require__(164);
},
"ui/image/": function() {
return __webpack_require__(116);
},
"ui/image/image": function() {
return __webpack_require__(116);
},
"ui/image/image-common": function() {
return __webpack_require__(117);
},
"ui/image/image-common.js": function() {
return __webpack_require__(117);
},
"ui/image/image.js": function() {
return __webpack_require__(116);
},
"ui/label": function() {
return __webpack_require__(101);
},
"ui/label/": function() {
return __webpack_require__(101);
},
"ui/label/label": function() {
return __webpack_require__(101);
},
"ui/label/label-common": function() {
return __webpack_require__(102);
},
"ui/label/label-common.js": function() {
return __webpack_require__(102);
},
"ui/label/label.js": function() {
return __webpack_require__(101);
},
"ui/layouts/absolute-layout": function() {
return __webpack_require__(88);
},
"ui/layouts/absolute-layout/": function() {
return __webpack_require__(88);
},
"ui/layouts/absolute-layout/absolute-layout": function() {
return __webpack_require__(88);
},
"ui/layouts/absolute-layout/absolute-layout-common": function() {
return __webpack_require__(89);
},
"ui/layouts/absolute-layout/absolute-layout-common.js": function() {
return __webpack_require__(89);
},
"ui/layouts/absolute-layout/absolute-layout.js": function() {
return __webpack_require__(88);
},
"ui/layouts/dock-layout": function() {
return __webpack_require__(86);
},
"ui/layouts/dock-layout/": function() {
return __webpack_require__(86);
},
"ui/layouts/dock-layout/dock-layout": function() {
return __webpack_require__(86);
},
"ui/layouts/dock-layout/dock-layout-common": function() {
return __webpack_require__(87);
},
"ui/layouts/dock-layout/dock-layout-common.js": function() {
return __webpack_require__(87);
},
"ui/layouts/dock-layout/dock-layout.js": function() {
return __webpack_require__(86);
},
"ui/layouts/flexbox-layout": function() {
return __webpack_require__(69);
},
"ui/layouts/flexbox-layout/": function() {
return __webpack_require__(69);
},
"ui/layouts/flexbox-layout/flexbox-layout": function() {
return __webpack_require__(69);
},
"ui/layouts/flexbox-layout/flexbox-layout-common": function() {
return __webpack_require__(70);
},
"ui/layouts/flexbox-layout/flexbox-layout-common.js": function() {
return __webpack_require__(70);
},
"ui/layouts/flexbox-layout/flexbox-layout.js": function() {
return __webpack_require__(69);
},
"ui/layouts/grid-layout": function() {
return __webpack_require__(78);
},
"ui/layouts/grid-layout/": function() {
return __webpack_require__(78);
},
"ui/layouts/grid-layout/grid-layout": function() {
return __webpack_require__(78);
},
"ui/layouts/grid-layout/grid-layout-common": function() {
return __webpack_require__(79);
},
"ui/layouts/grid-layout/grid-layout-common.js": function() {
return __webpack_require__(79);
},
"ui/layouts/grid-layout/grid-layout.js": function() {
return __webpack_require__(78);
},
"ui/layouts/layout": function() {
return __webpack_require__(166);
},
"ui/layouts/layout-base": function() {
return __webpack_require__(71);
},
"ui/layouts/layout-base-common": function() {
return __webpack_require__(72);
},
"ui/layouts/layout-base-common.js": function() {
return __webpack_require__(72);
},
"ui/layouts/layout-base.js": function() {
return __webpack_require__(71);
},
"ui/layouts/layout.js": function() {
return __webpack_require__(166);
},
"ui/layouts/stack-layout": function() {
return __webpack_require__(120);
},
"ui/layouts/stack-layout/": function() {
return __webpack_require__(120);
},
"ui/layouts/stack-layout/stack-layout": function() {
return __webpack_require__(120);
},
"ui/layouts/stack-layout/stack-layout-common": function() {
return __webpack_require__(121);
},
"ui/layouts/stack-layout/stack-layout-common.js": function() {
return __webpack_require__(121);
},
"ui/layouts/stack-layout/stack-layout.js": function() {
return __webpack_require__(120);
},
"ui/layouts/wrap-layout": function() {
return __webpack_require__(167);
},
"ui/layouts/wrap-layout/": function() {
return __webpack_require__(167);
},
"ui/layouts/wrap-layout/wrap-layout": function() {
return __webpack_require__(167);
},
"ui/layouts/wrap-layout/wrap-layout-common": function() {
return __webpack_require__(168);
},
"ui/layouts/wrap-layout/wrap-layout-common.js": function() {
return __webpack_require__(168);
},
"ui/layouts/wrap-layout/wrap-layout.js": function() {
return __webpack_require__(167);
},
"ui/list-picker": function() {
return __webpack_require__(122);
},
"ui/list-picker/": function() {
return __webpack_require__(122);
},
"ui/list-picker/list-picker": function() {
return __webpack_require__(122);
},
"ui/list-picker/list-picker-common": function() {
return __webpack_require__(123);
},
"ui/list-picker/list-picker-common.js": function() {
return __webpack_require__(123);
},
"ui/list-picker/list-picker.js": function() {
return __webpack_require__(122);
},
"ui/list-view": function() {
return __webpack_require__(148);
},
"ui/list-view/": function() {
return __webpack_require__(148);
},
"ui/list-view/list-view": function() {
return __webpack_require__(148);
},
"ui/list-view/list-view-common": function() {
return __webpack_require__(149);
},
"ui/list-view/list-view-common.js": function() {
return __webpack_require__(149);
},
"ui/list-view/list-view.js": function() {
return __webpack_require__(148);
},
"ui/page": function() {
return __webpack_require__(73);
},
"ui/page/": function() {
return __webpack_require__(73);
},
"ui/page/page": function() {
return __webpack_require__(73);
},
"ui/page/page-common": function() {
return __webpack_require__(74);
},
"ui/page/page-common.js": function() {
return __webpack_require__(74);
},
"ui/page/page.js": function() {
return __webpack_require__(73);
},
"ui/placeholder": function() {
return __webpack_require__(124);
},
"ui/placeholder/": function() {
return __webpack_require__(124);
},
"ui/placeholder/placeholder": function() {
return __webpack_require__(124);
},
"ui/placeholder/placeholder-common": function() {
return __webpack_require__(125);
},
"ui/placeholder/placeholder-common.js": function() {
return __webpack_require__(125);
},
"ui/placeholder/placeholder.js": function() {
return __webpack_require__(124);
},
"ui/progress": function() {
return __webpack_require__(126);
},
"ui/progress/": function() {
return __webpack_require__(126);
},
"ui/progress/progress": function() {
return __webpack_require__(126);
},
"ui/progress/progress-common": function() {
return __webpack_require__(127);
},
"ui/progress/progress-common.js": function() {
return __webpack_require__(127);
},
"ui/progress/progress.js": function() {
return __webpack_require__(126);
},
"ui/proxy-view-container": function() {
return __webpack_require__(128);
},
"ui/proxy-view-container/": function() {
return __webpack_require__(128);
},
"ui/proxy-view-container/proxy-view-container": function() {
return __webpack_require__(128);
},
"ui/proxy-view-container/proxy-view-container.js": function() {
return __webpack_require__(128);
},
"ui/repeater": function() {
return __webpack_require__(129);
},
"ui/repeater/": function() {
return __webpack_require__(129);
},
"ui/repeater/repeater": function() {
return __webpack_require__(129);
},
"ui/repeater/repeater.js": function() {
return __webpack_require__(129);
},
"ui/scroll-view": function() {
return __webpack_require__(130);
},
"ui/scroll-view/": function() {
return __webpack_require__(130);
},
"ui/scroll-view/scroll-view": function() {
return __webpack_require__(130);
},
"ui/scroll-view/scroll-view-common": function() {
return __webpack_require__(131);
},
"ui/scroll-view/scroll-view-common.js": function() {
return __webpack_require__(131);
},
"ui/scroll-view/scroll-view.js": function() {
return __webpack_require__(130);
},
"ui/search-bar": function() {
return __webpack_require__(132);
},
"ui/search-bar/": function() {
return __webpack_require__(132);
},
"ui/search-bar/search-bar": function() {
return __webpack_require__(132);
},
"ui/search-bar/search-bar-common": function() {
return __webpack_require__(133);
},
"ui/search-bar/search-bar-common.js": function() {
return __webpack_require__(133);
},
"ui/search-bar/search-bar.js": function() {
return __webpack_require__(132);
},
"ui/segmented-bar": function() {
return __webpack_require__(134);
},
"ui/segmented-bar/": function() {
return __webpack_require__(134);
},
"ui/segmented-bar/segmented-bar": function() {
return __webpack_require__(134);
},
"ui/segmented-bar/segmented-bar-common": function() {
return __webpack_require__(135);
},
"ui/segmented-bar/segmented-bar-common.js": function() {
return __webpack_require__(135);
},
"ui/segmented-bar/segmented-bar.js": function() {
return __webpack_require__(134);
},
"ui/slider": function() {
return __webpack_require__(136);
},
"ui/slider/": function() {
return __webpack_require__(136);
},
"ui/slider/slider": function() {
return __webpack_require__(136);
},
"ui/slider/slider-common": function() {
return __webpack_require__(137);
},
"ui/slider/slider-common.js": function() {
return __webpack_require__(137);
},
"ui/slider/slider.js": function() {
return __webpack_require__(136);
},
"ui/styling": function() {
return __webpack_require__(59);
},
"ui/styling/": function() {
return __webpack_require__(59);
},
"ui/styling/background": function() {
return __webpack_require__(36);
},
"ui/styling/background-common": function() {
return __webpack_require__(37);
},
"ui/styling/background-common.js": function() {
return __webpack_require__(37);
},
"ui/styling/background.js": function() {
return __webpack_require__(36);
},
"ui/styling/converters": function() {
return __webpack_require__(23);
},
"ui/styling/converters.js": function() {
return __webpack_require__(23);
},
"ui/styling/css-animation-parser": function() {
return __webpack_require__(66);
},
"ui/styling/css-animation-parser.js": function() {
return __webpack_require__(66);
},
"ui/styling/css-selector": function() {
return __webpack_require__(61);
},
"ui/styling/css-selector-parser": function() {
return __webpack_require__(62);
},
"ui/styling/css-selector-parser.js": function() {
return __webpack_require__(62);
},
"ui/styling/css-selector.js": function() {
return __webpack_require__(61);
},
"ui/styling/font": function() {
return __webpack_require__(30);
},
"ui/styling/font-common": function() {
return __webpack_require__(31);
},
"ui/styling/font-common.js": function() {
return __webpack_require__(31);
},
"ui/styling/font.js": function() {
return __webpack_require__(30);
},
"ui/styling/style": function() {
return __webpack_require__(15);
},
"ui/styling/style-property": function() {
return __webpack_require__(22);
},
"ui/styling/style-property.js": function() {
return __webpack_require__(22);
},
"ui/styling/style-scope": function() {
return __webpack_require__(60);
},
"ui/styling/style-scope.js": function() {
return __webpack_require__(60);
},
"ui/styling/style.js": function() {
return __webpack_require__(15);
},
"ui/styling/styling": function() {
return __webpack_require__(59);
},
"ui/styling/styling.js": function() {
return __webpack_require__(59);
},
"ui/switch": function() {
return __webpack_require__(138);
},
"ui/switch/": function() {
return __webpack_require__(138);
},
"ui/switch/switch": function() {
return __webpack_require__(138);
},
"ui/switch/switch-common": function() {
return __webpack_require__(139);
},
"ui/switch/switch-common.js": function() {
return __webpack_require__(139);
},
"ui/switch/switch.js": function() {
return __webpack_require__(138);
},
"ui/tab-view": function() {
return __webpack_require__(140);
},
"ui/tab-view/": function() {
return __webpack_require__(140);
},
"ui/tab-view/tab-view": function() {
return __webpack_require__(140);
},
"ui/tab-view/tab-view-common": function() {
return __webpack_require__(141);
},
"ui/tab-view/tab-view-common.js": function() {
return __webpack_require__(141);
},
"ui/tab-view/tab-view.js": function() {
return __webpack_require__(140);
},
"ui/text-base": function() {
return __webpack_require__(97);
},
"ui/text-base/": function() {
return __webpack_require__(97);
},
"ui/text-base/text-base": function() {
return __webpack_require__(97);
},
"ui/text-base/text-base-common": function() {
return __webpack_require__(98);
},
"ui/text-base/text-base-common.js": function() {
return __webpack_require__(98);
},
"ui/text-base/text-base-styler": function() {
return __webpack_require__(52);
},
"ui/text-base/text-base-styler.js": function() {
return __webpack_require__(52);
},
"ui/text-base/text-base.js": function() {
return __webpack_require__(97);
},
"ui/text-field": function() {
return __webpack_require__(95);
},
"ui/text-field/": function() {
return __webpack_require__(95);
},
"ui/text-field/text-field": function() {
return __webpack_require__(95);
},
"ui/text-field/text-field-common": function() {
return __webpack_require__(96);
},
"ui/text-field/text-field-common.js": function() {
return __webpack_require__(96);
},
"ui/text-field/text-field.js": function() {
return __webpack_require__(95);
},
"ui/text-view": function() {
return __webpack_require__(144);
},
"ui/text-view/": function() {
return __webpack_require__(144);
},
"ui/text-view/text-view": function() {
return __webpack_require__(144);
},
"ui/text-view/text-view-common": function() {
return __webpack_require__(145);
},
"ui/text-view/text-view-common.js": function() {
return __webpack_require__(145);
},
"ui/text-view/text-view.js": function() {
return __webpack_require__(144);
},
"ui/time-picker": function() {
return __webpack_require__(146);
},
"ui/time-picker/": function() {
return __webpack_require__(146);
},
"ui/time-picker/time-picker": function() {
return __webpack_require__(146);
},
"ui/time-picker/time-picker-common": function() {
return __webpack_require__(147);
},
"ui/time-picker/time-picker-common.js": function() {
return __webpack_require__(147);
},
"ui/time-picker/time-picker.js": function() {
return __webpack_require__(146);
},
"ui/transition": function() {
return __webpack_require__(90);
},
"ui/transition/": function() {
return __webpack_require__(90);
},
"ui/transition/fade-transition": function() {
return __webpack_require__(92);
},
"ui/transition/fade-transition.js": function() {
return __webpack_require__(92);
},
"ui/transition/flip-transition": function() {
return __webpack_require__(93);
},
"ui/transition/flip-transition.js": function() {
return __webpack_require__(93);
},
"ui/transition/slide-transition": function() {
return __webpack_require__(91);
},
"ui/transition/slide-transition.js": function() {
return __webpack_require__(91);
},
"ui/transition/transition": function() {
return __webpack_require__(90);
},
"ui/transition/transition.js": function() {
return __webpack_require__(90);
},
"ui/web-view": function() {
return __webpack_require__(142);
},
"ui/web-view/": function() {
return __webpack_require__(142);
},
"ui/web-view/web-view": function() {
return __webpack_require__(142);
},
"ui/web-view/web-view-common": function() {
return __webpack_require__(143);
},
"ui/web-view/web-view-common.js": function() {
return __webpack_require__(143);
},
"ui/web-view/web-view.js": function() {
return __webpack_require__(142);
},
"utils/debug": function() {
return __webpack_require__(67);
},
"utils/debug-common": function() {
return __webpack_require__(68);
},
"utils/debug-common.js": function() {
return __webpack_require__(68);
},
"utils/debug.js": function() {
return __webpack_require__(67);
},
"utils/lazy": function() {
return __webpack_require__(29);
},
"utils/lazy.js": function() {
return __webpack_require__(29);
},
"utils/module-merge": function() {
return __webpack_require__(169);
},
"utils/module-merge.js": function() {
return __webpack_require__(169);
},
"utils/number-utils": function() {
return __webpack_require__(80);
},
"utils/number-utils.js": function() {
return __webpack_require__(80);
},
"utils/types": function() {
return __webpack_require__(14);
},
"utils/types.js": function() {
return __webpack_require__(14);
},
"utils/utils": function() {
return __webpack_require__(27);
},
"utils/utils-common": function() {
return __webpack_require__(28);
},
"utils/utils-common.js": function() {
return __webpack_require__(28);
},
"utils/utils.js": function() {
return __webpack_require__(27);
},
xhr: function() {
return __webpack_require__(103);
},
"xhr/": function() {
return __webpack_require__(103);
},
"xhr/xhr": function() {
return __webpack_require__(103);
},
"xhr/xhr.js": function() {
return __webpack_require__(103);
},
xml: function() {
return __webpack_require__(83);
},
"xml/": function() {
return __webpack_require__(83);
},
"xml/xml": function() {
return __webpack_require__(83);
},
"xml/xml.js": function() {
return __webpack_require__(83);
}
};
function __join() {
var parts = [];
for (var i = 0, l = arguments.length; i < l; i++) {
parts = parts.concat(arguments[i].split("/"));
}
var newParts = [];
for (i = 0, l = parts.length; i < l; i++) {
var part = parts[i];
if (!part || part === ".") continue;
if (part === "..") newParts.pop(); else newParts.push(part);
}
if (parts[0] === "") newParts.unshift("");
return newParts.join("/") || (newParts.length ? "/" : ".");
}
function __require(moduleId) {
var moduleEntry = map[moduleId];
if (!moduleEntry) {
return;
}
return moduleEntry();
}
function __trace(message) {
android.util.Log.v("TNS.Native", "" + message);
}
return function(moduleId, dirname) {
while (global.__pendingSnapshotCalls && __pendingSnapshotCalls.length) {
var call = __pendingSnapshotCalls.shift();
call();
}
var resolvedModuleId = moduleId.replace(/^\.\/tns_modules\//, "");
if (resolvedModuleId[0] === ".") {
if (resolvedModuleId === "./_embedded_script_.js") {
return {};
}
resolvedModuleId = __join(dirname, resolvedModuleId);
}
if (resolvedModuleId[0] === "/") {
resolvedModuleId = resolvedModuleId.replace(/^\/.*\/files\/app\/tns_modules\//, "");
}
var module = __require(resolvedModuleId);
if (module) {
return module;
}
};
}();
}, function(module, exports, __webpack_require__) {
var common = __webpack_require__(152);
var utils = __webpack_require__(27);
var sharedPreferences;
function ensureSharedPreferences() {
if (!sharedPreferences) {
sharedPreferences = utils.ad.getApplicationContext().getSharedPreferences("prefs.db", 0);
}
}
function verify(key) {
common.checkKey(key);
ensureSharedPreferences();
}
exports.hasKey = function(key) {
verify(key);
return sharedPreferences.contains(key);
};
exports.getBoolean = function(key, defaultValue) {
verify(key);
if (exports.hasKey(key)) {
return sharedPreferences.getBoolean(key, false);
}
return defaultValue;
};
exports.getString = function(key, defaultValue) {
verify(key);
if (exports.hasKey(key)) {
return sharedPreferences.getString(key, "");
}
return defaultValue;
};
exports.getNumber = function(key, defaultValue) {
verify(key);
if (exports.hasKey(key)) {
return sharedPreferences.getFloat(key, float(0));
}
return defaultValue;
};
exports.setBoolean = function(key, value) {
verify(key);
common.ensureValidValue(value, "boolean");
var editor = sharedPreferences.edit();
editor.putBoolean(key, value);
editor.commit();
};
exports.setString = function(key, value) {
verify(key);
common.ensureValidValue(value, "string");
var editor = sharedPreferences.edit();
editor.putString(key, value);
editor.commit();
};
exports.setNumber = function(key, value) {
verify(key);
common.ensureValidValue(value, "number");
var editor = sharedPreferences.edit();
editor.putFloat(key, float(value));
editor.commit();
};
exports.remove = function(key) {
verify(key);
var editor = sharedPreferences.edit();
editor.remove(key);
editor.commit();
};
exports.clear = function() {
ensureSharedPreferences();
sharedPreferences.edit().clear().commit();
};
}, function(module, exports) {
exports.checkKey = function(key) {
if ("string" !== typeof key) {
throw new Error("key: '" + key + "' must be a string");
}
};
exports.ensureValidValue = function(value, valueType) {
if (valueType !== typeof value) {
throw new Error("value: '" + value + "' must be a " + valueType);
}
};
}, function(module, exports, __webpack_require__) {
var platform = __webpack_require__(35);
var REQUEST_IMAGE_CAPTURE = 3453;
exports.takePicture = function(options) {
return new Promise(function(resolve, reject) {
try {
var types = __webpack_require__(14);
var utils = __webpack_require__(27);
var saveToGallery = void 0;
var reqWidth_1;
var reqHeight_1;
var shouldKeepAspectRatio_1;
var density = utils.layout.getDisplayDensity();
if (options) {
saveToGallery = options.saveToGallery ? true : false;
reqWidth_1 = options.width ? options.width * density : 0;
reqHeight_1 = options.height ? options.height * density : reqWidth_1;
shouldKeepAspectRatio_1 = types.isNullOrUndefined(options.keepAspectRatio) ? true : options.keepAspectRatio;
}
var takePictureIntent = new android.content.Intent(android.provider.MediaStore.ACTION_IMAGE_CAPTURE);
var dateStamp = createDateTimeStamp();
var picturePath_1;
var nativeFile = void 0;
var tempPictureUri = void 0;
if (saveToGallery) {
picturePath_1 = android.os.Environment.getExternalStoragePublicDirectory(android.os.Environment.DIRECTORY_PICTURES).getAbsolutePath() + "/" + "cameraPicture_" + dateStamp + ".jpg";
nativeFile = new java.io.File(picturePath_1);
tempPictureUri = android.net.Uri.fromFile(nativeFile);
takePictureIntent.putExtra(android.provider.MediaStore.EXTRA_OUTPUT, tempPictureUri);
} else {
picturePath_1 = utils.ad.getApplicationContext().getExternalFilesDir(null).getAbsolutePath() + "/" + "cameraPicture_" + dateStamp + ".jpg";
nativeFile = new java.io.File(picturePath_1);
tempPictureUri = android.net.Uri.fromFile(nativeFile);
takePictureIntent.putExtra(android.provider.MediaStore.EXTRA_OUTPUT, tempPictureUri);
}
if (takePictureIntent.resolveActivity(utils.ad.getApplicationContext().getPackageManager()) != null) {
var appModule_1 = __webpack_require__(3);
var previousResult_1 = appModule_1.android.onActivityResult;
appModule_1.android.onActivityResult = function(requestCode, resultCode, data) {
appModule_1.android.onActivityResult = previousResult_1;
if (requestCode === REQUEST_IMAGE_CAPTURE && resultCode === android.app.Activity.RESULT_OK) {
var imageSource = __webpack_require__(55);
var options_1 = new android.graphics.BitmapFactory.Options();
options_1.inJustDecodeBounds = true;
var bitmap = android.graphics.BitmapFactory.decodeFile(picturePath_1, options_1);
var sampleSize = calculateInSampleSize(options_1.outWidth, options_1.outHeight, reqWidth_1, reqHeight_1);
var finalBitmapOptions = new android.graphics.BitmapFactory.Options();
finalBitmapOptions.inSampleSize = sampleSize;
bitmap = android.graphics.BitmapFactory.decodeFile(picturePath_1, finalBitmapOptions);
var scaledSizeImage = null;
if (reqHeight_1 > 0 && reqWidth_1 > 0) {
if (shouldKeepAspectRatio_1) {
var common = __webpack_require__(154);
var aspectSafeSize = common.getAspectSafeDimensions(bitmap.getWidth(), bitmap.getHeight(), reqWidth_1, reqHeight_1);
scaledSizeImage = android.graphics.Bitmap.createScaledBitmap(bitmap, aspectSafeSize.width, aspectSafeSize.height, true);
} else {
scaledSizeImage = android.graphics.Bitmap.createScaledBitmap(bitmap, reqWidth_1, reqHeight_1, true);
}
} else {
scaledSizeImage = bitmap;
}
resolve(imageSource.fromNativeSource(scaledSizeImage));
}
};
appModule_1.android.foregroundActivity.startActivityForResult(takePictureIntent, REQUEST_IMAGE_CAPTURE);
}
} catch (e) {
if (reject) {
reject(e);
}
}
});
};
exports.isAvailable = function() {
var utils = __webpack_require__(27);
return utils.ad.getApplicationContext().getPackageManager().hasSystemFeature(android.content.pm.PackageManager.FEATURE_CAMERA);
};
var calculateInSampleSize = function(imageWidth, imageHeight, reqWidth, reqHeight) {
var sampleSize = 1;
var displayWidth = platform.screen.mainScreen.widthDIPs;
var displayHeigth = platform.screen.mainScreen.heightDIPs;
reqWidth = reqWidth > 0 && reqWidth < displayWidth ? reqWidth : displayWidth;
reqHeight = reqHeight > 0 && reqHeight < displayHeigth ? reqHeight : displayHeigth;
if (imageWidth > reqWidth && imageHeight > reqHeight) {
var halfWidth = imageWidth / 2;
var halfHeight = imageHeight / 2;
while (halfWidth / sampleSize > reqWidth && halfHeight / sampleSize > reqHeight) {
sampleSize *= 2;
}
}
return sampleSize;
};
var createDateTimeStamp = function() {
var result = "";
var date = new Date();
result = (date.getDate() < 10 ? "0" + date.getDate().toString() : date.getDate().toString()) + (date.getMonth() + 1 < 10 ? "0" + (date.getMonth() + 1).toString() : (date.getMonth() + 1).toString()) + date.getFullYear().toString() + date.getHours().toString() + date.getMinutes().toString() + date.getSeconds().toString();
return result;
};
}, function(module, exports) {
function getAspectSafeDimensions(sourceWidth, sourceHeight, reqWidth, reqHeight) {
var widthCoef = sourceWidth / reqWidth;
var heightCoef = sourceHeight / reqHeight;
var aspectCoef = widthCoef > heightCoef ? widthCoef : heightCoef;
return {
width: Math.floor(sourceWidth / aspectCoef),
height: Math.floor(sourceHeight / aspectCoef)
};
}
exports.getAspectSafeDimensions = getAspectSafeDimensions;
}, function(module, exports, __webpack_require__) {
var appModule = __webpack_require__(3);
var common = __webpack_require__(156);
var utils = __webpack_require__(27);
global.moduleMerge(common, exports);
var wifi = "wifi";
var mobile = "mobile";
function getConnectivityManager() {
return utils.ad.getApplicationContext().getSystemService(android.content.Context.CONNECTIVITY_SERVICE);
}
function getActiveNetworkInfo() {
var connectivityManager = getConnectivityManager();
if (!connectivityManager) {
return null;
}
return connectivityManager.getActiveNetworkInfo();
}
function getConnectionType() {
var activeNetworkInfo = getActiveNetworkInfo();
if (!activeNetworkInfo || !activeNetworkInfo.isConnected()) {
return common.connectionType.none;
}
var connectionType = activeNetworkInfo.getTypeName().toLowerCase();
if (connectionType.indexOf(wifi) !== -1) {
return common.connectionType.wifi;
}
if (connectionType.indexOf(mobile) !== -1) {
return common.connectionType.mobile;
}
return common.connectionType.none;
}
exports.getConnectionType = getConnectionType;
function startMonitoring(connectionTypeChangedCallback) {
var onReceiveCallback = function onReceiveCallback(context, intent) {
var newConnectionType = getConnectionType();
connectionTypeChangedCallback(newConnectionType);
};
appModule.android.registerBroadcastReceiver(android.net.ConnectivityManager.CONNECTIVITY_ACTION, onReceiveCallback);
}
exports.startMonitoring = startMonitoring;
function stopMonitoring() {
appModule.android.unregisterBroadcastReceiver(android.net.ConnectivityManager.CONNECTIVITY_ACTION);
}
exports.stopMonitoring = stopMonitoring;
}, function(module, exports) {
var connectionType;
(function(connectionType) {
connectionType.none = 0;
connectionType.wifi = 1;
connectionType.mobile = 2;
})(connectionType = exports.connectionType || (exports.connectionType = {}));
}, function(module, exports, __webpack_require__) {
var observable = __webpack_require__(18);
var types = __webpack_require__(14);
var CHANGE = "change", UPDATE = "update", DELETE = "delete", ADD = "add";
var ChangeType = function() {
function ChangeType() {}
ChangeType.Add = "add";
ChangeType.Delete = "delete";
ChangeType.Update = "update";
ChangeType.Splice = "splice";
return ChangeType;
}();
exports.ChangeType = ChangeType;
var VirtualArray = function(_super) {
__extends(VirtualArray, _super);
function VirtualArray(length) {
if (length === void 0) {
length = 0;
}
_super.call(this);
this._length = length;
this._cache = {};
this._requestedIndexes = [];
this._loadedIndexes = [];
}
Object.defineProperty(VirtualArray.prototype, "length", {
get: function() {
return this._length;
},
set: function(value) {
if (this._length !== value) {
var index = this._length;
var count = value - this._length;
this._length = value;
this.notify({
eventName: CHANGE,
object: this,
action: count > 0 ? ADD : DELETE,
index: index,
removed: new Array(count < 0 ? Math.abs(count) : 0),
addedCount: count > 0 ? count : 0
});
}
},
enumerable: true,
configurable: true
});
Object.defineProperty(VirtualArray.prototype, "loadSize", {
get: function() {
return this._loadSize;
},
set: function(value) {
this._loadSize = value;
},
enumerable: true,
configurable: true
});
VirtualArray.prototype.getItem = function(index) {
var item = this._cache[index];
if (types.isUndefined(item)) {
if (index >= 0 && index < this.length && this._requestedIndexes.indexOf(index) < 0 && this._loadedIndexes.indexOf(index) < 0) {
this.requestItems(index);
}
}
return item;
};
VirtualArray.prototype.setItem = function(index, value) {
if (this._cache[index] !== value) {
this.load(index, [ value ]);
}
};
VirtualArray.prototype.load = function(index, items) {
var i;
for (i = 0; i < items.length; i++) {
var itemIndex = index + i;
this._cache[itemIndex] = items[i];
this._requestedIndexes.splice(this._requestedIndexes.indexOf(itemIndex), 1);
if (this._loadedIndexes.indexOf(itemIndex) < 0) {
this._loadedIndexes.push(itemIndex);
}
}
if (this._requestedIndexes.length > 0) {
for (i = 0; i < this.loadSize - items.length; i++) {
this._requestedIndexes.splice(this._requestedIndexes.indexOf(index + i), 1);
}
}
this.notify({
eventName: CHANGE,
object: this,
action: UPDATE,
index: index,
removed: new Array(items.length),
addedCount: items.length
});
};
VirtualArray.prototype.requestItems = function(index) {
var indexesToLoad = [];
var pageIndex = this._loadSize > 0 ? this._loadSize * Math.floor(index / this._loadSize) : index;
var count = 0;
var start = -1;
for (var i = 0; i < this.loadSize; i++) {
var itemIndex = pageIndex + i;
if (itemIndex >= this._length) {
break;
}
if (this._loadedIndexes.indexOf(itemIndex) < 0) {
if (start < 0) {
start = itemIndex;
}
indexesToLoad.push(itemIndex);
if (this._requestedIndexes.indexOf(itemIndex) < 0) {
this._requestedIndexes.push(itemIndex);
}
count++;
} else {
if (count > 0) {
this.notify({
eventName: VirtualArray.itemsLoadingEvent,
object: this,
index: start,
count: count
});
}
start = -1;
count = 0;
}
}
if (start >= 0 && count > 0) {
this.notify({
eventName: VirtualArray.itemsLoadingEvent,
object: this,
index: start,
count: count
});
}
};
VirtualArray.changeEvent = CHANGE;
VirtualArray.itemsLoadingEvent = "itemsLoading";
return VirtualArray;
}(observable.Observable);
exports.VirtualArray = VirtualArray;
}, function(module, exports) {
var network;
function getNetwork() {
return network;
}
exports.getNetwork = getNetwork;
function setNetwork(newNetwork) {
network = newNetwork;
}
exports.setNetwork = setNetwork;
}, function(module, exports, __webpack_require__) {
var fpsNative = __webpack_require__(160);
var callbacks = {};
var idCounter = 0;
var _minFps = 1e3;
var framesRendered = 0;
var frameStartTime = 0;
function doFrame(currentTimeMillis) {
var fps = 0;
if (frameStartTime > 0) {
var timeSpan = currentTimeMillis - frameStartTime;
framesRendered++;
if (timeSpan > 1e3) {
fps = framesRendered * 1e3 / timeSpan;
if (fps < _minFps) {
_minFps = fps;
}
notify(fps);
frameStartTime = currentTimeMillis;
framesRendered = 0;
}
} else {
frameStartTime = currentTimeMillis;
}
}
var native;
function ensureNative() {
if (!native) {
native = new fpsNative.FPSCallback(doFrame);
}
}
function reset() {
_minFps = 1e3;
frameStartTime = 0;
framesRendered = 0;
}
exports.reset = reset;
function running() {
if (!native) {
return false;
}
return native.running;
}
exports.running = running;
function minFps() {
return _minFps;
}
exports.minFps = minFps;
function start() {
ensureNative();
native.start();
}
exports.start = start;
function stop() {
if (!native) {
return;
}
native.stop();
reset();
}
exports.stop = stop;
function addCallback(callback) {
var id = idCounter;
callbacks[id] = zonedCallback(callback);
idCounter++;
return id;
}
exports.addCallback = addCallback;
function removeCallback(id) {
if (id in callbacks) {
delete callbacks[id];
}
}
exports.removeCallback = removeCallback;
function notify(fps) {
var callback;
for (var id in callbacks) {
callback = callbacks[id];
callback(fps, _minFps);
}
}
}, function(module, exports) {
var FPSCallback = function() {
function FPSCallback(onFrame) {
var _this = this;
this.running = false;
this.onFrame = onFrame;
this.impl = new android.view.Choreographer.FrameCallback({
doFrame: function(nanos) {
_this.handleFrame(nanos);
}
});
}
FPSCallback.prototype.start = function() {
if (this.running) {
return;
}
android.view.Choreographer.getInstance().postFrameCallback(this.impl);
this.running = true;
};
FPSCallback.prototype.stop = function() {
if (!this.running) {
return;
}
android.view.Choreographer.getInstance().removeFrameCallback(this.impl);
this.running = false;
};
FPSCallback.prototype.handleFrame = function(nanos) {
if (!this.running) {
return;
}
this.onFrame(nanos / 1e6);
android.view.Choreographer.getInstance().postFrameCallback(this.impl);
};
return FPSCallback;
}();
exports.FPSCallback = FPSCallback;
}, function(module, exports, __webpack_require__) {
var enums = __webpack_require__(24);
var common = __webpack_require__(162);
var utils = __webpack_require__(27);
global.moduleMerge(common, exports);
var LocationManager = function() {
function LocationManager() {
this.desiredAccuracy = enums.Accuracy.any;
this.updateDistance = 0;
var alm = utils.ad.getApplicationContext().getSystemService(android.content.Context.LOCATION_SERVICE);
this.androidLocationManager = new AndroidLocationManager(alm);
this.androidLocationManager.minimumUpdateTime = 200;
}
Object.defineProperty(LocationManager.prototype, "android", {
get: function() {
return this.androidLocationManager;
},
enumerable: true,
configurable: true
});
Object.defineProperty(LocationManager.prototype, "ios", {
get: function() {
return undefined;
},
enumerable: true,
configurable: true
});
Object.defineProperty(LocationManager.prototype, "locationListener", {
get: function() {
if (!this._locationListener) {
this._locationListener = new android.location.LocationListener({
onLocationChanged: function(location1) {
if (this._onLocation) {
var location = LocationManager.locationFromAndroidLocation(location1);
if (this.maximumAge) {
if (location.timestamp.valueOf() + this.maximumAge > new Date().valueOf()) {
this._onLocation(location);
}
} else {
this._onLocation(location);
}
}
},
onProviderDisabled: function(provider) {},
onProviderEnabled: function(provider) {},
onStatusChanged: function(arg1, arg2, arg3) {}
});
}
return this._locationListener;
},
enumerable: true,
configurable: true
});
LocationManager.locationFromAndroidLocation = function(androidLocation) {
var location = new common.Location();
location.latitude = androidLocation.getLatitude();
location.longitude = androidLocation.getLongitude();
location.altitude = androidLocation.getAltitude();
location.horizontalAccuracy = androidLocation.getAccuracy();
location.verticalAccuracy = androidLocation.getAccuracy();
location.speed = androidLocation.getSpeed();
location.direction = androidLocation.getBearing();
location.timestamp = new Date(androidLocation.getTime());
location.android = androidLocation;
return location;
};
LocationManager.androidLocationFromLocation = function(location) {
var androidLocation = new android.location.Location("custom");
androidLocation.setLatitude(location.latitude);
androidLocation.setLongitude(location.longitude);
if (location.altitude) {
androidLocation.setAltitude(location.altitude);
}
if (location.speed) {
androidLocation.setSpeed(float(location.speed));
}
if (location.direction) {
androidLocation.setBearing(float(location.direction));
}
if (location.timestamp) {
try {
androidLocation.setTime(long(location.timestamp.getTime()));
} catch (e) {
console.error("invalid location timestamp");
}
}
return androidLocation;
};
LocationManager.isEnabled = function() {
var criteria = new android.location.Criteria();
criteria.setAccuracy(android.location.Criteria.ACCURACY_COARSE);
var lm = utils.ad.getApplicationContext().getSystemService(android.content.Context.LOCATION_SERVICE);
var enabledProviders = lm.getProviders(criteria, true);
return enabledProviders.size() > 0 ? true : false;
};
LocationManager.distance = function(loc1, loc2) {
if (!loc1.android) {
loc1.android = LocationManager.androidLocationFromLocation(loc1);
}
if (!loc2.android) {
loc2.android = LocationManager.androidLocationFromLocation(loc2);
}
return loc1.android.distanceTo(loc2.android);
};
LocationManager.prototype.startLocationMonitoring = function(onLocation, onError, options) {
var criteria = new android.location.Criteria();
if (options) {
if (options.desiredAccuracy) {
this.desiredAccuracy = options.desiredAccuracy;
}
if (options.updateDistance) {
this.updateDistance = options.updateDistance;
}
if (options.minimumUpdateTime) {
this.androidLocationManager.minimumUpdateTime = options.minimumUpdateTime;
}
}
criteria.setAccuracy(this.desiredAccuracy === enums.Accuracy.high ? android.location.Criteria.ACCURACY_FINE : android.location.Criteria.ACCURACY_COARSE);
this.locationListener._onLocation = onLocation;
this.locationListener._onError = onError;
this.locationListener.maximumAge = options && "number" === typeof options.maximumAge ? options.maximumAge : undefined;
try {
this.androidLocationManager.manager.requestLocationUpdates(this.androidLocationManager.minimumUpdateTime, this.updateDistance, criteria, this.locationListener, null);
this.isStarted = true;
} catch (e) {
if (onError) {
onError(e);
}
}
};
LocationManager.prototype.stopLocationMonitoring = function() {
this.androidLocationManager.manager.removeUpdates(this.locationListener);
this.isStarted = false;
};
Object.defineProperty(LocationManager.prototype, "lastKnownLocation", {
get: function() {
var criteria = new android.location.Criteria();
criteria.setAccuracy(this.desiredAccuracy === enums.Accuracy.high ? android.location.Criteria.ACCURACY_FINE : android.location.Criteria.ACCURACY_COARSE);
try {
var providers = this.androidLocationManager.manager.getProviders(criteria, false);
var it = providers.iterator();
var location;
var tempLocation;
while (it.hasNext()) {
var element = it.next();
tempLocation = this.androidLocationManager.manager.getLastKnownLocation(element);
if (!location) {
location = tempLocation;
} else {
if (tempLocation.getTime() < location.getTime()) {
location = tempLocation;
}
}
}
if (location) {
return LocationManager.locationFromAndroidLocation(location);
}
} catch (e) {
console.error(e.message);
}
return null;
},
enumerable: true,
configurable: true
});
LocationManager = __decorate([ Deprecated ], LocationManager);
return LocationManager;
}();
exports.LocationManager = LocationManager;
var AndroidLocationManager = function() {
function AndroidLocationManager(manager) {
this._manager = manager;
}
Object.defineProperty(AndroidLocationManager.prototype, "minimumUpdateTime", {
get: function() {
return this._minimumUpdateTime;
},
set: function(value) {
this._minimumUpdateTime = value;
},
enumerable: true,
configurable: true
});
Object.defineProperty(AndroidLocationManager.prototype, "manager", {
get: function() {
return this._manager;
},
enumerable: true,
configurable: true
});
AndroidLocationManager = __decorate([ Deprecated ], AndroidLocationManager);
return AndroidLocationManager;
}();
exports.AndroidLocationManager = AndroidLocationManager;
}, function(module, exports, __webpack_require__) {
var defModule = __webpack_require__(161);
var defaultGetLocationTimeout = 2e4;
var Location = function() {
function Location() {}
Location = __decorate([ Deprecated ], Location);
return Location;
}();
exports.Location = Location;
exports.getLocation = function(options) {
var timerId;
var locationManager = new defModule.LocationManager();
if (options && 0 === options.timeout) {
return new Promise(function(resolve, reject) {
var location = locationManager.lastKnownLocation;
if (location) {
if (options && "number" === typeof options.maximumAge) {
if (location.timestamp.valueOf() + options.maximumAge > new Date().valueOf()) {
resolve(location);
} else {
reject(new Error("timeout is 0 and last known location is older than maximumAge"));
}
} else {
resolve(location);
}
} else {
reject(new Error("timeout is 0 and no known location found"));
}
});
}
return new Promise(function(resolve, reject) {
if (!defModule.LocationManager.isEnabled()) {
return reject(new Error("Location service is disabled"));
}
var timer = __webpack_require__(7);
locationManager.startLocationMonitoring(function(location) {
if (options && "number" === typeof options.maximumAge) {
if (location.timestamp.valueOf() + options.maximumAge > new Date().valueOf()) {
locationManager.stopLocationMonitoring();
if ("undefined" !== typeof timerId) {
timer.clearTimeout(timerId);
}
resolve(location);
}
} else {
locationManager.stopLocationMonitoring();
if ("undefined" !== typeof timerId) {
timer.clearTimeout(timerId);
}
resolve(location);
}
}, function(error) {
console.error("Location error received: " + error);
locationManager.stopLocationMonitoring();
if ("undefined" !== typeof timerId) {
timer.clearTimeout(timerId);
}
reject(error);
}, options);
if (options && "number" === typeof options.timeout) {
timerId = timer.setTimeout(function() {
locationManager.stopLocationMonitoring();
reject(new Error("timeout searching for location"));
}, options.timeout || defaultGetLocationTimeout);
}
});
};
}, function(module, exports, __webpack_require__) {
var frame_1 = __webpack_require__(10);
var NativeScriptActivity = function(_super) {
__extends(NativeScriptActivity, _super);
function NativeScriptActivity() {
_super.call(this);
return global.__native(this);
}
NativeScriptActivity.prototype.onCreate = function(savedInstanceState) {
this.isNativeScriptActivity = true;
if (!this._callbacks) {
frame_1.setActivityCallbacks(this);
}
this._callbacks.onCreate(this, savedInstanceState, _super.prototype.onCreate);
};
NativeScriptActivity.prototype.onSaveInstanceState = function(outState) {
this._callbacks.onSaveInstanceState(this, outState, _super.prototype.onSaveInstanceState);
};
NativeScriptActivity.prototype.onStart = function() {
this._callbacks.onStart(this, _super.prototype.onStart);
};
NativeScriptActivity.prototype.onStop = function() {
this._callbacks.onStop(this, _super.prototype.onStop);
};
NativeScriptActivity.prototype.onDestroy = function() {
this._callbacks.onDestroy(this, _super.prototype.onDestroy);
};
NativeScriptActivity.prototype.onBackPressed = function() {
this._callbacks.onBackPressed(this, _super.prototype.onBackPressed);
};
NativeScriptActivity.prototype.onRequestPermissionsResult = function(requestCode, permissions, grantResults) {
this._callbacks.onRequestPermissionsResult(this, requestCode, permissions, grantResults, undefined);
};
NativeScriptActivity.prototype.onActivityResult = function(requestCode, resultCode, data) {
this._callbacks.onActivityResult(this, requestCode, resultCode, data, _super.prototype.onActivityResult);
};
NativeScriptActivity = __decorate([ JavaProxy("com.tns.NativeScriptActivity") ], NativeScriptActivity);
return NativeScriptActivity;
}(android.app.Activity);
}, function(module, exports, __webpack_require__) {
var common = __webpack_require__(165);
var LruBitmapCacheClass;
function ensureLruBitmapCacheClass() {
if (LruBitmapCacheClass) {
return;
}
var LruBitmapCache = function(_super) {
__extends(LruBitmapCache, _super);
function LruBitmapCache(cacheSize) {
_super.call(this, cacheSize);
return global.__native(this);
}
LruBitmapCache.prototype.sizeOf = function(key, bitmap) {
var result = Math.round(bitmap.getByteCount() / 1024);
return result;
};
return LruBitmapCache;
}(android.util.LruCache);
LruBitmapCacheClass = LruBitmapCache;
}
var Cache = function(_super) {
__extends(Cache, _super);
function Cache() {
_super.call(this);
ensureLruBitmapCacheClass();
var maxMemory = java.lang.Runtime.getRuntime().maxMemory() / 1024;
var cacheSize = maxMemory / 8;
this._cache = new LruBitmapCacheClass(cacheSize);
var that = new WeakRef(this);
this._callback = new org.nativescript.widgets.Async.CompleteCallback({
onComplete: function(result, context) {
var instance = that.get();
if (instance) {
instance._onDownloadCompleted(context, result);
}
}
});
}
Cache.prototype._downloadCore = function(request) {
org.nativescript.widgets.Async.Image.download(request.url, this._callback, request.key);
};
Cache.prototype.get = function(key) {
var result = this._cache.get(key);
return result;
};
Cache.prototype.set = function(key, image) {
this._cache.put(key, image);
};
Cache.prototype.remove = function(key) {
this._cache.remove(key);
};
Cache.prototype.clear = function() {
this._cache.evictAll();
};
return Cache;
}(common.Cache);
exports.Cache = Cache;
}, function(module, exports, __webpack_require__) {
var observable = __webpack_require__(18);
var Cache = function(_super) {
__extends(Cache, _super);
function Cache() {
_super.apply(this, arguments);
this.maxRequests = 5;
this._enabled = true;
this._pendingDownloads = {};
this._queue = [];
this._currentDownloads = 0;
}
Cache.prototype.enableDownload = function() {
if (this._enabled) {
return;
}
this._enabled = true;
var request;
while (this._queue.length > 0 && this._currentDownloads < this.maxRequests) {
request = this._queue.pop();
if (!(request.key in this._pendingDownloads)) {
this._download(request);
}
}
};
Cache.prototype.disableDownload = function() {
if (!this._enabled) {
return;
}
this._enabled = false;
};
Cache.prototype.push = function(request) {
this._addRequest(request, true);
};
Cache.prototype.enqueue = function(request) {
this._addRequest(request, false);
};
Cache.prototype._addRequest = function(request, onTop) {
if (request.key in this._pendingDownloads) {
var existingRequest = this._pendingDownloads[request.key];
this._mergeRequests(existingRequest, request);
} else {
var queueRequest;
for (var i = 0; i < this._queue.length; i++) {
if (this._queue[i].key === request.key) {
queueRequest = this._queue[i];
break;
}
}
if (queueRequest) {
this._mergeRequests(queueRequest, request);
} else {
if (this._shouldDownload(request, onTop)) {
this._download(request);
}
}
}
};
Cache.prototype._mergeRequests = function(existingRequest, newRequest) {
if (existingRequest.completed) {
if (newRequest.completed) {
var existingCompleted = existingRequest.completed;
var stackCompleted = function(result, key) {
existingCompleted(result, key);
newRequest.completed(result, key);
};
existingRequest.completed = stackCompleted;
}
} else {
existingRequest.completed = newRequest.completed;
}
};
Cache.prototype.get = function(key) {
throw new Error("Abstract");
};
Cache.prototype.set = function(key, image) {
throw new Error("Abstract");
};
Cache.prototype.remove = function(key) {
throw new Error("Abstract");
};
Cache.prototype.clear = function() {
throw new Error("Abstract");
};
Cache.prototype._downloadCore = function(request) {
throw new Error("Abstract");
};
Cache.prototype._onDownloadCompleted = function(key, image) {
var request = this._pendingDownloads[key];
if (request.key && image) {
this.set(request.key, image);
}
this._currentDownloads--;
if (request.completed) {
request.completed(image, request.key);
}
if (this.hasListeners(Cache.downloadedEvent)) {
this.notify({
eventName: Cache.downloadedEvent,
object: this,
key: key,
image: image
});
}
delete this._pendingDownloads[request.key];
this._updateQueue();
};
Cache.prototype._shouldDownload = function(request, onTop) {
if (this.get(request.key) || request.key in this._pendingDownloads) {
return false;
}
if (this._currentDownloads >= this.maxRequests || !this._enabled) {
if (onTop) {
this._queue.push(request);
} else {
this._queue.unshift(request);
}
return false;
}
return true;
};
Cache.prototype._download = function(request) {
this._currentDownloads++;
this._pendingDownloads[request.key] = request;
this._downloadCore(request);
};
Cache.prototype._updateQueue = function() {
if (!this._enabled || this._queue.length === 0 || this._currentDownloads === this.maxRequests) {
return;
}
var request = this._queue.pop();
this._download(request);
};
Cache.downloadedEvent = "downloaded";
return Cache;
}(observable.Observable);
exports.Cache = Cache;
}, function(module, exports, __webpack_require__) {
var layoutBase = __webpack_require__(71);
var trace = __webpack_require__(16);
var utils = __webpack_require__(27);
var OWNER = "_owner";
var NativeViewGroupClass;
function ensureNativeViewGroupClass() {
if (NativeViewGroupClass) {
return;
}
NativeViewGroupClass = android.view.ViewGroup.extend({
onMeasure: function(widthMeasureSpec, heightMeasureSpec) {
var owner = this[OWNER];
owner.onMeasure(widthMeasureSpec, heightMeasureSpec);
this.setMeasuredDimension(owner.getMeasuredWidth(), owner.getMeasuredHeight());
},
onLayout: function(changed, left, top, right, bottom) {
var owner = this[OWNER];
owner.onLayout(left, top, right, bottom);
}
});
}
var Layout = function(_super) {
__extends(Layout, _super);
function Layout() {
_super.apply(this, arguments);
}
Object.defineProperty(Layout.prototype, "android", {
get: function() {
return this._viewGroup;
},
enumerable: true,
configurable: true
});
Object.defineProperty(Layout.prototype, "_nativeView", {
get: function() {
return this._viewGroup;
},
enumerable: true,
configurable: true
});
Layout.prototype._createUI = function() {
ensureNativeViewGroupClass();
this._viewGroup = new NativeViewGroupClass(this._context);
this._viewGroup[OWNER] = this;
};
Layout.prototype._onDetached = function(force) {
delete this._viewGroup[OWNER];
_super.prototype._onDetached.call(this, force);
};
Layout.prototype.measure = function(widthMeasureSpec, heightMeasureSpec) {
this._setCurrentMeasureSpecs(widthMeasureSpec, heightMeasureSpec);
var view = this._nativeView;
if (view) {
var width = utils.layout.getMeasureSpecSize(widthMeasureSpec);
var widthMode = utils.layout.getMeasureSpecMode(widthMeasureSpec);
var height = utils.layout.getMeasureSpecSize(heightMeasureSpec);
var heightMode = utils.layout.getMeasureSpecMode(heightMeasureSpec);
if (trace.enabled) {
trace.write(this + " :measure: " + utils.layout.getMode(widthMode) + " " + width + ", " + utils.layout.getMode(heightMode) + " " + height, trace.categories.Layout);
}
view.measure(widthMeasureSpec, heightMeasureSpec);
}
};
Layout.prototype.layout = function(left, top, right, bottom) {
this._setCurrentLayoutBounds(left, top, right, bottom);
var view = this._nativeView;
if (view) {
this.layoutNativeView(left, top, right, bottom);
if (trace.enabled) {
trace.write(this + " :layout: " + left + ", " + top + ", " + (right - left) + ", " + (bottom - top), trace.categories.Layout);
}
}
};
Layout.prototype.onMeasure = function(widthMeasureSpec, heightMeasureSpec) {};
Layout.prototype.onLayout = function(left, top, right, bottom) {};
return Layout;
}(layoutBase.LayoutBase);
exports.Layout = Layout;
}, function(module, exports, __webpack_require__) {
var utils = __webpack_require__(27);
var common = __webpack_require__(168);
var enums_1 = __webpack_require__(24);
global.moduleMerge(common, exports);
function setNativeOrientationProperty(data) {
var wrapLayout = data.object;
var nativeView = wrapLayout._nativeView;
nativeView.setOrientation(data.newValue === enums_1.Orientation.vertical ? org.nativescript.widgets.Orientation.vertical : org.nativescript.widgets.Orientation.horizontal);
}
function setNativeItemWidthProperty(data) {
var wrapLayout = data.object;
var nativeView = wrapLayout._nativeView;
nativeView.setItemWidth(data.newValue * utils.layout.getDisplayDensity());
}
function setNativeItemHeightProperty(data) {
var wrapLayout = data.object;
var nativeView = wrapLayout._nativeView;
nativeView.setItemHeight(data.newValue * utils.layout.getDisplayDensity());
}
common.WrapLayout.orientationProperty.metadata.onSetNativeValue = setNativeOrientationProperty;
common.WrapLayout.itemWidthProperty.metadata.onSetNativeValue = setNativeItemWidthProperty;
common.WrapLayout.itemHeightProperty.metadata.onSetNativeValue = setNativeItemHeightProperty;
var WrapLayout = function(_super) {
__extends(WrapLayout, _super);
function WrapLayout() {
_super.apply(this, arguments);
}
Object.defineProperty(WrapLayout.prototype, "android", {
get: function() {
return this._layout;
},
enumerable: true,
configurable: true
});
Object.defineProperty(WrapLayout.prototype, "_nativeView", {
get: function() {
return this._layout;
},
enumerable: true,
configurable: true
});
WrapLayout.prototype._createUI = function() {
this._layout = new org.nativescript.widgets.WrapLayout(this._context);
};
return WrapLayout;
}(common.WrapLayout);
exports.WrapLayout = WrapLayout;
}, function(module, exports, __webpack_require__) {
var platform = __webpack_require__(35);
var layout_base_1 = __webpack_require__(71);
var enums_1 = __webpack_require__(24);
var proxy_1 = __webpack_require__(41);
var dependency_observable_1 = __webpack_require__(17);
var AffectsLayout = platform.device.os === platform.platformNames.android ? dependency_observable_1.PropertyMetadataSettings.None : dependency_observable_1.PropertyMetadataSettings.AffectsLayout;
function isWidthHeightValid(value) {
return value >= 0 && value !== Number.POSITIVE_INFINITY;
}
function isValidOrientation(value) {
return value === enums_1.Orientation.vertical || value === enums_1.Orientation.horizontal;
}
var WrapLayout = function(_super) {
__extends(WrapLayout, _super);
function WrapLayout() {
_super.apply(this, arguments);
}
Object.defineProperty(WrapLayout.prototype, "orientation", {
get: function() {
return this._getValue(WrapLayout.orientationProperty);
},
set: function(value) {
this._setValue(WrapLayout.orientationProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(WrapLayout.prototype, "itemWidth", {
get: function() {
return this._getValue(WrapLayout.itemWidthProperty);
},
set: function(value) {
this._setValue(WrapLayout.itemWidthProperty, value);
},
enumerable: true,
configurable: true
});
Object.defineProperty(WrapLayout.prototype, "itemHeight", {
get: function() {
return this._getValue(WrapLayout.itemHeightProperty);
},
set: function(value) {
this._setValue(WrapLayout.itemHeightProperty, value);
},
enumerable: true,
configurable: true
});
WrapLayout.orientationProperty = new dependency_observable_1.Property("orientation", "WrapLayout", new proxy_1.PropertyMetadata(enums_1.Orientation.horizontal, AffectsLayout, undefined, isValidOrientation));
WrapLayout.itemWidthProperty = new dependency_observable_1.Property("itemWidth", "WrapLayout", new proxy_1.PropertyMetadata(0, AffectsLayout, undefined, isWidthHeightValid));
WrapLayout.itemHeightProperty = new dependency_observable_1.Property("itemHeight", "WrapLayout", new proxy_1.PropertyMetadata(0, AffectsLayout, undefined, isWidthHeightValid));
return WrapLayout;
}(layout_base_1.LayoutBase);
exports.WrapLayout = WrapLayout;
}, function(module, exports) {
exports.merge = function(sourceExports, destExports) {
for (var key in sourceExports) {
destExports[key] = sourceExports[key];
}
};
} ]);
